
Display_TFT_320x240.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2f8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800c5c8  0800c5c8  0000d5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cb6c  0800cb6c  0000db6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cb74  0800cb74  0000db74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cb78  0800cb78  0000db78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800cb7c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001560  2400006c  0800cbe8  0000e06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240015cc  0800cbe8  0000e5cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000117d3  00000000  00000000  0000e09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cfd  00000000  00000000  0001f86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e88  00000000  00000000  00022570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ae9  00000000  00000000  000233f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003436b  00000000  00000000  00023ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000168a1  00000000  00000000  0005824c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141ea9  00000000  00000000  0006eaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b0996  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004208  00000000  00000000  001b09dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001b4be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c5b0 	.word	0x0800c5b0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800c5b0 	.word	0x0800c5b0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b09c      	sub	sp, #112	@ 0x70
 80003b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 f971 	bl	800069c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f001 faad 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f825 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 f911 	bl	80005e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c6:	f000 f8e7 	bl	8000598 <MX_DMA_Init>
  MX_SPI1_Init();
 80003ca:	f000 f88f 	bl	80004ec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  while (1)
  {
    if (sd_mount() == FR_OK)
 80003ce:	f000 fa95 	bl	80008fc <sd_mount>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d000      	beq.n	80003da <main+0x2a>
 80003d8:	e7f9      	b.n	80003ce <main+0x1e>
    {
      break;
 80003da:	bf00      	nop
    }
  }
  UINT br;
uint8_t bufr[100];
sd_read_file("note.txt", bufr, 20, &br,0);
 80003dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80003e0:	4639      	mov	r1, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	9200      	str	r2, [sp, #0]
 80003e6:	2214      	movs	r2, #20
 80003e8:	4806      	ldr	r0, [pc, #24]	@ (8000404 <main+0x54>)
 80003ea:	f000 fb31 	bl	8000a50 <sd_read_file>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 80003ee:	2180      	movs	r1, #128	@ 0x80
 80003f0:	4805      	ldr	r0, [pc, #20]	@ (8000408 <main+0x58>)
 80003f2:	f004 fcd4 	bl	8004d9e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80003f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003fa:	f001 fb1f 	bl	8001a3c <HAL_Delay>
	  HAL_GPIO_TogglePin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 80003fe:	bf00      	nop
 8000400:	e7f5      	b.n	80003ee <main+0x3e>
 8000402:	bf00      	nop
 8000404:	0800c5c8 	.word	0x0800c5c8
 8000408:	58021800 	.word	0x58021800

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b09c      	sub	sp, #112	@ 0x70
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000416:	224c      	movs	r2, #76	@ 0x4c
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f00b fb46 	bl	800baac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2220      	movs	r2, #32
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f00b fb40 	bl	800baac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800042c:	2002      	movs	r0, #2
 800042e:	f004 fcd1 	bl	8004dd4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000432:	2300      	movs	r3, #0
 8000434:	603b      	str	r3, [r7, #0]
 8000436:	4b2c      	ldr	r3, [pc, #176]	@ (80004e8 <SystemClock_Config+0xdc>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800043e:	4a2a      	ldr	r2, [pc, #168]	@ (80004e8 <SystemClock_Config+0xdc>)
 8000440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b28      	ldr	r3, [pc, #160]	@ (80004e8 <SystemClock_Config+0xdc>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800044e:	603b      	str	r3, [r7, #0]
 8000450:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000452:	bf00      	nop
 8000454:	4b24      	ldr	r3, [pc, #144]	@ (80004e8 <SystemClock_Config+0xdc>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800045c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000460:	d1f8      	bne.n	8000454 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000462:	2302      	movs	r3, #2
 8000464:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000466:	2301      	movs	r3, #1
 8000468:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800046a:	2340      	movs	r3, #64	@ 0x40
 800046c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	2302      	movs	r3, #2
 8000470:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000472:	2300      	movs	r3, #0
 8000474:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000476:	2304      	movs	r3, #4
 8000478:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800047a:	230c      	movs	r3, #12
 800047c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800047e:	2302      	movs	r3, #2
 8000480:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000482:	2303      	movs	r3, #3
 8000484:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000486:	2302      	movs	r3, #2
 8000488:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800048a:	230c      	movs	r3, #12
 800048c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800048e:	2300      	movs	r3, #0
 8000490:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800049a:	4618      	mov	r0, r3
 800049c:	f004 fcd4 	bl	8004e48 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004a6:	f000 f925 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	233f      	movs	r3, #63	@ 0x3f
 80004ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2101      	movs	r1, #1
 80004ce:	4618      	mov	r0, r3
 80004d0:	f005 f894 	bl	80055fc <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80004da:	f000 f90b 	bl	80006f4 <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3770      	adds	r7, #112	@ 0x70
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	58024800 	.word	0x58024800

080004ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004f0:	4b27      	ldr	r3, [pc, #156]	@ (8000590 <MX_SPI1_Init+0xa4>)
 80004f2:	4a28      	ldr	r2, [pc, #160]	@ (8000594 <MX_SPI1_Init+0xa8>)
 80004f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004f6:	4b26      	ldr	r3, [pc, #152]	@ (8000590 <MX_SPI1_Init+0xa4>)
 80004f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80004fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004fe:	4b24      	ldr	r3, [pc, #144]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000504:	4b22      	ldr	r3, [pc, #136]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000506:	2207      	movs	r2, #7
 8000508:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800050a:	4b21      	ldr	r3, [pc, #132]	@ (8000590 <MX_SPI1_Init+0xa4>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000510:	4b1f      	ldr	r3, [pc, #124]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000512:	2200      	movs	r2, #0
 8000514:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000516:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000518:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800051c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800051e:	4b1c      	ldr	r3, [pc, #112]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000520:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000524:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000526:	4b1a      	ldr	r3, [pc, #104]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800052c:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <MX_SPI1_Init+0xa4>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000532:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000538:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_SPI1_Init+0xa4>)
 800053a:	2200      	movs	r2, #0
 800053c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000540:	2200      	movs	r2, #0
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000546:	2200      	movs	r2, #0
 8000548:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_SPI1_Init+0xa4>)
 800054c:	2200      	movs	r2, #0
 800054e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000552:	2200      	movs	r2, #0
 8000554:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000558:	2200      	movs	r2, #0
 800055a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800055c:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <MX_SPI1_Init+0xa4>)
 800055e:	2200      	movs	r2, #0
 8000560:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000564:	2200      	movs	r2, #0
 8000566:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <MX_SPI1_Init+0xa4>)
 800056a:	2200      	movs	r2, #0
 800056c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000570:	2200      	movs	r2, #0
 8000572:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <MX_SPI1_Init+0xa4>)
 8000576:	2200      	movs	r2, #0
 8000578:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800057a:	4805      	ldr	r0, [pc, #20]	@ (8000590 <MX_SPI1_Init+0xa4>)
 800057c:	f006 fe72 	bl	8007264 <HAL_SPI_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000586:	f000 f8b5 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	24000088 	.word	0x24000088
 8000594:	40013000 	.word	0x40013000

08000598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_DMA_Init+0x4c>)
 80005a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005a4:	4a0f      	ldr	r2, [pc, #60]	@ (80005e4 <MX_DMA_Init+0x4c>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80005ae:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <MX_DMA_Init+0x4c>)
 80005b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	200b      	movs	r0, #11
 80005c2:	f001 fb3a 	bl	8001c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005c6:	200b      	movs	r0, #11
 80005c8:	f001 fb51 	bl	8001c6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	200c      	movs	r0, #12
 80005d2:	f001 fb32 	bl	8001c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005d6:	200c      	movs	r0, #12
 80005d8:	f001 fb49 	bl	8001c6e <HAL_NVIC_EnableIRQ>

}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	58024400 	.word	0x58024400

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <MX_GPIO_Init+0xa8>)
 8000600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000604:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <MX_GPIO_Init+0xa8>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060e:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <MX_GPIO_Init+0xa8>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_GPIO_Init+0xa8>)
 800061e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000622:	4a1b      	ldr	r2, [pc, #108]	@ (8000690 <MX_GPIO_Init+0xa8>)
 8000624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062c:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <MX_GPIO_Init+0xa8>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2110      	movs	r1, #16
 800063e:	4815      	ldr	r0, [pc, #84]	@ (8000694 <MX_GPIO_Init+0xac>)
 8000640:	f004 fb94 	bl	8004d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_Led_GPIO_Port, Debug_Led_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2180      	movs	r1, #128	@ 0x80
 8000648:	4813      	ldr	r0, [pc, #76]	@ (8000698 <MX_GPIO_Init+0xb0>)
 800064a:	f004 fb8f 	bl	8004d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800064e:	2310      	movs	r3, #16
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	480b      	ldr	r0, [pc, #44]	@ (8000694 <MX_GPIO_Init+0xac>)
 8000666:	f004 f9d9 	bl	8004a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Debug_Led_Pin */
  GPIO_InitStruct.Pin = Debug_Led_Pin;
 800066a:	2380      	movs	r3, #128	@ 0x80
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Debug_Led_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_GPIO_Init+0xb0>)
 8000682:	f004 f9cb 	bl	8004a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	58024400 	.word	0x58024400
 8000694:	58020000 	.word	0x58020000
 8000698:	58021800 	.word	0x58021800

0800069c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006ae:	f001 faf9 	bl	8001ca4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006b2:	2301      	movs	r3, #1
 80006b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80006be:	231f      	movs	r3, #31
 80006c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80006c2:	2387      	movs	r3, #135	@ 0x87
 80006c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006ca:	2300      	movs	r3, #0
 80006cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006ce:	2301      	movs	r3, #1
 80006d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fb17 	bl	8001d14 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006e6:	2004      	movs	r0, #4
 80006e8:	f001 faf4 	bl	8001cd4 <HAL_MPU_Enable>

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <Error_Handler+0x8>

08000700 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SD_disk_status+0x14>
        return STA_NOINIT;
 8000710:	2301      	movs	r3, #1
 8000712:	e000      	b.n	8000716 <SD_disk_status+0x16>
    return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8000732:	2301      	movs	r3, #1
 8000734:	e007      	b.n	8000746 <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 8000736:	f000 fba3 	bl	8000e80 <SD_SPI_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	bf14      	ite	ne
 8000740:	2301      	movne	r3, #1
 8000742:	2300      	moveq	r3, #0
 8000744:	b2db      	uxtb	r3, r3
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4603      	mov	r3, r0
 800075e:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <SD_disk_read+0x1c>
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d101      	bne.n	8000770 <SD_disk_read+0x20>
        return RES_PARERR;
 800076c:	2304      	movs	r3, #4
 800076e:	e010      	b.n	8000792 <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8000770:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <SD_disk_read+0x4c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <SD_disk_read+0x2c>
 8000778:	2303      	movs	r3, #3
 800077a:	e00a      	b.n	8000792 <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	68b8      	ldr	r0, [r7, #8]
 8000782:	f000 fc6f 	bl	8001064 <SD_ReadBlocks>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	bf14      	ite	ne
 800078c:	2301      	movne	r3, #1
 800078e:	2300      	moveq	r3, #0
 8000790:	b2db      	uxtb	r3, r3
}
 8000792:	4618      	mov	r0, r3
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	24001241 	.word	0x24001241

080007a0 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4603      	mov	r3, r0
 80007ae:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d102      	bne.n	80007bc <SD_disk_write+0x1c>
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d101      	bne.n	80007c0 <SD_disk_write+0x20>
 80007bc:	2304      	movs	r3, #4
 80007be:	e010      	b.n	80007e2 <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <SD_disk_write+0x4c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d101      	bne.n	80007cc <SD_disk_write+0x2c>
 80007c8:	2303      	movs	r3, #3
 80007ca:	e00a      	b.n	80007e2 <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	68b8      	ldr	r0, [r7, #8]
 80007d2:	f000 fd1b 	bl	800120c <SD_WriteBlocks>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	24001241 	.word	0x24001241

080007f0 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	603a      	str	r2, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	460b      	mov	r3, r1
 80007fe:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 8000806:	2304      	movs	r3, #4
 8000808:	e022      	b.n	8000850 <SD_disk_ioctl+0x60>

    switch (cmd) {
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d81e      	bhi.n	800084e <SD_disk_ioctl+0x5e>
 8000810:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <SD_disk_ioctl+0x28>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000829 	.word	0x08000829
 800081c:	08000839 	.word	0x08000839
 8000820:	0800082d 	.word	0x0800082d
 8000824:	08000845 	.word	0x08000845
    case CTRL_SYNC:
        return RES_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	e011      	b.n	8000850 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000832:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 8000834:	2300      	movs	r3, #0
 8000836:	e00b      	b.n	8000850 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800083e:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	e005      	b.n	8000850 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
        return RES_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 800084e:	2304      	movs	r3, #4
    }
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <sd_format>:
#include "ffconf.h"

char sd_path[4];
FATFS fs;

int sd_format(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	// Pre-mount required for legacy FatFS
	f_mount(&fs, sd_path, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	4908      	ldr	r1, [pc, #32]	@ (8000888 <sd_format+0x2c>)
 8000866:	4809      	ldr	r0, [pc, #36]	@ (800088c <sd_format+0x30>)
 8000868:	f009 ffcc 	bl	800a804 <f_mount>

	FRESULT res;
	//res = f_mkfs(sd_path, 1, 0);
	if (res != FR_OK) {
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d004      	beq.n	800087c <sd_format+0x20>
		printf("Format failed: f_mkfs returned %d\r\n", res);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <sd_format+0x34>)
 8000878:	f00a ffd0 	bl	800b81c <iprintf>
	}
		return res;
 800087c:	79fb      	ldrb	r3, [r7, #7]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	24000200 	.word	0x24000200
 800088c:	24000204 	.word	0x24000204
 8000890:	0800c5d4 	.word	0x0800c5d4

08000894 <sd_get_space_kb>:

int sd_get_space_kb(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 800089a:	f107 0208 	add.w	r2, r7, #8
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4814      	ldr	r0, [pc, #80]	@ (80008f4 <sd_get_space_kb+0x60>)
 80008a4:	f00a fde7 	bl	800b476 <f_getfree>
 80008a8:	4603      	mov	r3, r0
 80008aa:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80008ac:	7ffb      	ldrb	r3, [r7, #31]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <sd_get_space_kb+0x22>
 80008b2:	7ffb      	ldrb	r3, [r7, #31]
 80008b4:	e01a      	b.n	80008ec <sd_get_space_kb+0x58>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	3b02      	subs	r3, #2
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	8952      	ldrh	r2, [r2, #10]
 80008c0:	fb02 f303 	mul.w	r3, r2, r3
 80008c4:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	895b      	ldrh	r3, [r3, #10]
 80008ca:	461a      	mov	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	fb02 f303 	mul.w	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	085b      	lsrs	r3, r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
	printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	6939      	ldr	r1, [r7, #16]
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <sd_get_space_kb+0x64>)
 80008e6:	f00a ff99 	bl	800b81c <iprintf>
	return FR_OK;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	24000200 	.word	0x24000200
 80008f8:	0800c5f8 	.word	0x0800c5f8

080008fc <sd_mount>:

int sd_mount(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 8000902:	4840      	ldr	r0, [pc, #256]	@ (8000a04 <sd_mount+0x108>)
 8000904:	f00a fff2 	bl	800b8ec <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 8000908:	493f      	ldr	r1, [pc, #252]	@ (8000a08 <sd_mount+0x10c>)
 800090a:	4840      	ldr	r0, [pc, #256]	@ (8000a0c <sd_mount+0x110>)
 800090c:	f00a feb4 	bl	800b678 <FATFS_LinkDriver>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d004      	beq.n	8000920 <sd_mount+0x24>
		printf("FATFS_LinkDriver failed\n");
 8000916:	483e      	ldr	r0, [pc, #248]	@ (8000a10 <sd_mount+0x114>)
 8000918:	f00a ffe8 	bl	800b8ec <puts>
		return FR_DISK_ERR;
 800091c:	2301      	movs	r3, #1
 800091e:	e06d      	b.n	80009fc <sd_mount+0x100>
	}

	printf("Initializing disk...\r\n");
 8000920:	483c      	ldr	r0, [pc, #240]	@ (8000a14 <sd_mount+0x118>)
 8000922:	f00a ffe3 	bl	800b8ec <puts>
	DSTATUS stat = disk_initialize(0);
 8000926:	2000      	movs	r0, #0
 8000928:	f008 f98e 	bl	8008c48 <disk_initialize>
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
	if (stat != 0) {
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <sd_mount+0x4e>
		printf("disk_initialize failed: 0x%02X\n", stat);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	4619      	mov	r1, r3
 800093a:	4837      	ldr	r0, [pc, #220]	@ (8000a18 <sd_mount+0x11c>)
 800093c:	f00a ff6e 	bl	800b81c <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 8000940:	4836      	ldr	r0, [pc, #216]	@ (8000a1c <sd_mount+0x120>)
 8000942:	f00a ffd3 	bl	800b8ec <puts>
		return FR_NOT_READY;
 8000946:	2303      	movs	r3, #3
 8000948:	e058      	b.n	80009fc <sd_mount+0x100>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 800094a:	492f      	ldr	r1, [pc, #188]	@ (8000a08 <sd_mount+0x10c>)
 800094c:	4834      	ldr	r0, [pc, #208]	@ (8000a20 <sd_mount+0x124>)
 800094e:	f00a ff65 	bl	800b81c <iprintf>
	res = f_mount(&fs, sd_path, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	492c      	ldr	r1, [pc, #176]	@ (8000a08 <sd_mount+0x10c>)
 8000956:	4833      	ldr	r0, [pc, #204]	@ (8000a24 <sd_mount+0x128>)
 8000958:	f009 ff54 	bl	800a804 <f_mount>
 800095c:	4603      	mov	r3, r0
 800095e:	71bb      	strb	r3, [r7, #6]
	if (res == FR_OK)
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d113      	bne.n	800098e <sd_mount+0x92>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 8000966:	4928      	ldr	r1, [pc, #160]	@ (8000a08 <sd_mount+0x10c>)
 8000968:	482f      	ldr	r0, [pc, #188]	@ (8000a28 <sd_mount+0x12c>)
 800096a:	f00a ff57 	bl	800b81c <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 800096e:	f000 fa7b 	bl	8000e68 <sd_is_sdhc>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <sd_mount+0x80>
 8000978:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <sd_mount+0x130>)
 800097a:	e000      	b.n	800097e <sd_mount+0x82>
 800097c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <sd_mount+0x134>)
 800097e:	4619      	mov	r1, r3
 8000980:	482c      	ldr	r0, [pc, #176]	@ (8000a34 <sd_mount+0x138>)
 8000982:	f00a ff4b 	bl	800b81c <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 8000986:	f7ff ff85 	bl	8000894 <sd_get_space_kb>
		return FR_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e036      	b.n	80009fc <sd_mount+0x100>
	}

//	 Handle no filesystem by creating one
	if (res == FR_NO_FILESYSTEM)
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d12d      	bne.n	80009f0 <sd_mount+0xf4>
	{
		printf("No filesystem found on SD card. Attempting format...\r\nThis will create 32MB Partition (Most Probably)\r\n");
 8000994:	4828      	ldr	r0, [pc, #160]	@ (8000a38 <sd_mount+0x13c>)
 8000996:	f00a ffa9 	bl	800b8ec <puts>
		printf("If you need the full sized SD card, use the computer to format into FAT32\r\n");
 800099a:	4828      	ldr	r0, [pc, #160]	@ (8000a3c <sd_mount+0x140>)
 800099c:	f00a ffa6 	bl	800b8ec <puts>
		sd_format();
 80009a0:	f7ff ff5c 	bl	800085c <sd_format>

		printf("Retrying mount after format...\r\n");
 80009a4:	4826      	ldr	r0, [pc, #152]	@ (8000a40 <sd_mount+0x144>)
 80009a6:	f00a ffa1 	bl	800b8ec <puts>
		res = f_mount(&fs, sd_path, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	4916      	ldr	r1, [pc, #88]	@ (8000a08 <sd_mount+0x10c>)
 80009ae:	481d      	ldr	r0, [pc, #116]	@ (8000a24 <sd_mount+0x128>)
 80009b0:	f009 ff28 	bl	800a804 <f_mount>
 80009b4:	4603      	mov	r3, r0
 80009b6:	71bb      	strb	r3, [r7, #6]
		if (res == FR_OK) {
 80009b8:	79bb      	ldrb	r3, [r7, #6]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d111      	bne.n	80009e2 <sd_mount+0xe6>
			printf("SD card formatted and mounted successfully.\r\n");
 80009be:	4821      	ldr	r0, [pc, #132]	@ (8000a44 <sd_mount+0x148>)
 80009c0:	f00a ff94 	bl	800b8ec <puts>
			printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 80009c4:	f000 fa50 	bl	8000e68 <sd_is_sdhc>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <sd_mount+0xd6>
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <sd_mount+0x130>)
 80009d0:	e000      	b.n	80009d4 <sd_mount+0xd8>
 80009d2:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <sd_mount+0x134>)
 80009d4:	4619      	mov	r1, r3
 80009d6:	4817      	ldr	r0, [pc, #92]	@ (8000a34 <sd_mount+0x138>)
 80009d8:	f00a ff20 	bl	800b81c <iprintf>

			// Report capacity after format
			sd_get_space_kb();
 80009dc:	f7ff ff5a 	bl	8000894 <sd_get_space_kb>
 80009e0:	e004      	b.n	80009ec <sd_mount+0xf0>
		}
		else {
			printf("Mount failed even after format: %d\r\n", res);
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <sd_mount+0x14c>)
 80009e8:	f00a ff18 	bl	800b81c <iprintf>
		}
		return res;
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	e005      	b.n	80009fc <sd_mount+0x100>
	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	4619      	mov	r1, r3
 80009f4:	4815      	ldr	r0, [pc, #84]	@ (8000a4c <sd_mount+0x150>)
 80009f6:	f00a ff11 	bl	800b81c <iprintf>
	return res;
 80009fa:	79bb      	ldrb	r3, [r7, #6]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	0800c61c 	.word	0x0800c61c
 8000a08:	24000200 	.word	0x24000200
 8000a0c:	0800ca8c 	.word	0x0800ca8c
 8000a10:	0800c634 	.word	0x0800c634
 8000a14:	0800c64c 	.word	0x0800c64c
 8000a18:	0800c664 	.word	0x0800c664
 8000a1c:	0800c684 	.word	0x0800c684
 8000a20:	0800c6bc 	.word	0x0800c6bc
 8000a24:	24000204 	.word	0x24000204
 8000a28:	0800c6d8 	.word	0x0800c6d8
 8000a2c:	0800c700 	.word	0x0800c700
 8000a30:	0800c70c 	.word	0x0800c70c
 8000a34:	0800c714 	.word	0x0800c714
 8000a38:	0800c724 	.word	0x0800c724
 8000a3c:	0800c78c 	.word	0x0800c78c
 8000a40:	0800c7d8 	.word	0x0800c7d8
 8000a44:	0800c7f8 	.word	0x0800c7f8
 8000a48:	0800c828 	.word	0x0800c828
 8000a4c:	0800c850 	.word	0x0800c850

08000a50 <sd_read_file>:
	f_close(&file);
	printf("Appended %u bytes to %s\r\n", bw, filename);
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
}

int sd_read_file(const char *filename, char *buffer, UINT bufsize, UINT *bytes_read, uint32_t byte_offset) {
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8000a5e:	f844 0c3c 	str.w	r0, [r4, #-60]
 8000a62:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000a66:	f840 1c40 	str.w	r1, [r0, #-64]
 8000a6a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000a6e:	f841 2c44 	str.w	r2, [r1, #-68]
 8000a72:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000a76:	f842 3c48 	str.w	r3, [r2, #-72]
	FIL file;
	*bytes_read = 0;
 8000a7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a7e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]

	FRESULT res = f_open(&file, filename, FA_READ);
 8000a86:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4b71      	ldr	r3, [pc, #452]	@ (8000c54 <sd_read_file+0x204>)
 8000a8e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8000a92:	f103 0308 	add.w	r3, r3, #8
 8000a96:	443b      	add	r3, r7
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f009 fef6 	bl	800a890 <f_open>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f241 0247 	movw	r2, #4167	@ 0x1047
 8000aaa:	443a      	add	r2, r7
 8000aac:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK) {
 8000aae:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000ab2:	443b      	add	r3, r7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00c      	beq.n	8000ad4 <sd_read_file+0x84>
		printf("f_open failed with code: %d\r\n", res);
 8000aba:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000abe:	443b      	add	r3, r7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4864      	ldr	r0, [pc, #400]	@ (8000c58 <sd_read_file+0x208>)
 8000ac6:	f00a fea9 	bl	800b81c <iprintf>
		return res;
 8000aca:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000ace:	443b      	add	r3, r7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	e0b9      	b.n	8000c48 <sd_read_file+0x1f8>
	}
	if(byte_offset == 0x0){
 8000ad4:	f241 0358 	movw	r3, #4184	@ 0x1058
 8000ad8:	443b      	add	r3, r7
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d135      	bne.n	8000b4c <sd_read_file+0xfc>
		res = f_read(&file, buffer, bufsize - 1, bytes_read);
 8000ae0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ae4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000ae8:	1e5a      	subs	r2, r3, #1
 8000aea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000aee:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000af2:	4858      	ldr	r0, [pc, #352]	@ (8000c54 <sd_read_file+0x204>)
 8000af4:	f500 5082 	add.w	r0, r0, #4160	@ 0x1040
 8000af8:	f100 0008 	add.w	r0, r0, #8
 8000afc:	4438      	add	r0, r7
 8000afe:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000b02:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8000b06:	f00a f88b 	bl	800ac20 <f_read>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f241 0247 	movw	r2, #4167	@ 0x1047
 8000b10:	443a      	add	r2, r7
 8000b12:	7013      	strb	r3, [r2, #0]
		if (res != FR_OK) {
 8000b14:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000b18:	443b      	add	r3, r7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d058      	beq.n	8000bd2 <sd_read_file+0x182>
			printf("f_read failed with code: %d\r\n", res);
 8000b20:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000b24:	443b      	add	r3, r7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	484c      	ldr	r0, [pc, #304]	@ (8000c5c <sd_read_file+0x20c>)
 8000b2c:	f00a fe76 	bl	800b81c <iprintf>
			f_close(&file);
 8000b30:	4b48      	ldr	r3, [pc, #288]	@ (8000c54 <sd_read_file+0x204>)
 8000b32:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8000b36:	f103 0308 	add.w	r3, r3, #8
 8000b3a:	443b      	add	r3, r7
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f00a fa4c 	bl	800afda <f_close>
			return res;
 8000b42:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000b46:	443b      	add	r3, r7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	e07d      	b.n	8000c48 <sd_read_file+0x1f8>
		}
	}
	else{
		f_lseek(&file, byte_offset);
 8000b4c:	4b41      	ldr	r3, [pc, #260]	@ (8000c54 <sd_read_file+0x204>)
 8000b4e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8000b52:	f103 0308 	add.w	r3, r3, #8
 8000b56:	443b      	add	r3, r7
 8000b58:	f241 0258 	movw	r2, #4184	@ 0x1058
 8000b5c:	443a      	add	r2, r7
 8000b5e:	6811      	ldr	r1, [r2, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00a fa64 	bl	800b02e <f_lseek>
		res = f_read(&file, buffer, bufsize - 1, bytes_read);
 8000b66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b74:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000b78:	4836      	ldr	r0, [pc, #216]	@ (8000c54 <sd_read_file+0x204>)
 8000b7a:	f500 5082 	add.w	r0, r0, #4160	@ 0x1040
 8000b7e:	f100 0008 	add.w	r0, r0, #8
 8000b82:	4438      	add	r0, r7
 8000b84:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000b88:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8000b8c:	f00a f848 	bl	800ac20 <f_read>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f241 0247 	movw	r2, #4167	@ 0x1047
 8000b96:	443a      	add	r2, r7
 8000b98:	7013      	strb	r3, [r2, #0]
		if (res != FR_OK) {
 8000b9a:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000b9e:	443b      	add	r3, r7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d015      	beq.n	8000bd2 <sd_read_file+0x182>
			printf("f_read failed with code: %d\r\n", res);
 8000ba6:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000baa:	443b      	add	r3, r7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	482a      	ldr	r0, [pc, #168]	@ (8000c5c <sd_read_file+0x20c>)
 8000bb2:	f00a fe33 	bl	800b81c <iprintf>
			f_close(&file);
 8000bb6:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <sd_read_file+0x204>)
 8000bb8:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8000bbc:	f103 0308 	add.w	r3, r3, #8
 8000bc0:	443b      	add	r3, r7
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00a fa09 	bl	800afda <f_close>
			return res;
 8000bc8:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000bcc:	443b      	add	r3, r7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	e03a      	b.n	8000c48 <sd_read_file+0x1f8>
		}
	}


	buffer[*bytes_read] = '\0';
 8000bd2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bd6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000be0:	f852 2c40 	ldr.w	r2, [r2, #-64]
 8000be4:	4413      	add	r3, r2
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]

	res = f_close(&file);
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <sd_read_file+0x204>)
 8000bec:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8000bf0:	f103 0308 	add.w	r3, r3, #8
 8000bf4:	443b      	add	r3, r7
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00a f9ef 	bl	800afda <f_close>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f241 0247 	movw	r2, #4167	@ 0x1047
 8000c02:	443a      	add	r2, r7
 8000c04:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK) {
 8000c06:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000c0a:	443b      	add	r3, r7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00c      	beq.n	8000c2c <sd_read_file+0x1dc>
		printf("f_close failed with code: %d\r\n", res);
 8000c12:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000c16:	443b      	add	r3, r7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4810      	ldr	r0, [pc, #64]	@ (8000c60 <sd_read_file+0x210>)
 8000c1e:	f00a fdfd 	bl	800b81c <iprintf>
		return res;
 8000c22:	f241 0347 	movw	r3, #4167	@ 0x1047
 8000c26:	443b      	add	r3, r7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	e00d      	b.n	8000c48 <sd_read_file+0x1f8>
	}

	printf("Read %u bytes from %s\r\n", *bytes_read, filename);
 8000c2c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c30:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000c3a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <sd_read_file+0x214>)
 8000c42:	f00a fdeb 	bl	800b81c <iprintf>
	return FR_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	ffffefcc 	.word	0xffffefcc
 8000c58:	0800c8c8 	.word	0x0800c8c8
 8000c5c:	0800c8e8 	.word	0x0800c8e8
 8000c60:	0800c908 	.word	0x0800c908
 8000c64:	0800c928 	.word	0x0800c928

08000c68 <HAL_SPI_TxCpltCallback>:
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;
extern int dma_tx_done_spi2;
extern int dma_rx_done_spi2;

 void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
     if (hspi == &SD_SPI_HANDLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <HAL_SPI_TxCpltCallback+0x24>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d102      	bne.n	8000c7e <HAL_SPI_TxCpltCallback+0x16>
     {
         dma_tx_done = 1;
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_SPI_TxCpltCallback+0x28>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
     }
 }
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	24000088 	.word	0x24000088
 8000c90:	24001238 	.word	0x24001238

08000c94 <HAL_SPI_TxRxCpltCallback>:

 void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
     if (hspi == &hspi1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a06      	ldr	r2, [pc, #24]	@ (8000cb8 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d102      	bne.n	8000caa <HAL_SPI_TxRxCpltCallback+0x16>
     {
         dma_rx_done = 1;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_SPI_TxRxCpltCallback+0x28>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
     }
 }
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	24000088 	.word	0x24000088
 8000cbc:	2400123c 	.word	0x2400123c

08000cc0 <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8000cca:	1df9      	adds	r1, r7, #7
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <SD_TransmitByte+0x20>)
 8000cd4:	f006 fbea 	bl	80074ac <HAL_SPI_Transmit>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	24000088 	.word	0x24000088

08000ce4 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 8000cea:	23ff      	movs	r3, #255	@ 0xff
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8000cf2:	1dba      	adds	r2, r7, #6
 8000cf4:	1df9      	adds	r1, r7, #7
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <SD_ReceiveByte+0x2c>)
 8000d00:	f006 fdc2 	bl	8007888 <HAL_SPI_TransmitReceive>
    return data;
 8000d04:	79bb      	ldrb	r3, [r7, #6]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	24000088 	.word	0x24000088

08000d14 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <SD_TransmitBuffer+0x34>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <SD_TransmitBuffer+0x38>)
 8000d2e:	f007 f8e5 	bl	8007efc <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 8000d32:	bf00      	nop
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <SD_TransmitBuffer+0x34>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0fb      	beq.n	8000d34 <SD_TransmitBuffer+0x20>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24001238 	.word	0x24001238
 8000d4c:	24000088 	.word	0x24000088

08000d50 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	e007      	b.n	8000d72 <SD_ReceiveBuffer+0x22>
 8000d62:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <SD_ReceiveBuffer+0x50>)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	22ff      	movs	r2, #255	@ 0xff
 8000d6a:	701a      	strb	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	dbf3      	blt.n	8000d62 <SD_ReceiveBuffer+0x12>
    dma_rx_done = 0;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <SD_ReceiveBuffer+0x54>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4906      	ldr	r1, [pc, #24]	@ (8000da0 <SD_ReceiveBuffer+0x50>)
 8000d86:	4808      	ldr	r0, [pc, #32]	@ (8000da8 <SD_ReceiveBuffer+0x58>)
 8000d88:	f007 f9fa 	bl	8008180 <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 8000d8c:	bf00      	nop
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <SD_ReceiveBuffer+0x54>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0fb      	beq.n	8000d8e <SD_ReceiveBuffer+0x3e>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	24001244 	.word	0x24001244
 8000da4:	2400123c 	.word	0x2400123c
 8000da8:	24000088 	.word	0x24000088

08000dac <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8000db2:	f000 fe37 	bl	8001a24 <HAL_GetTick>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000dbc:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8000dbe:	f7ff ff91 	bl	8000ce4 <SD_ReceiveByte>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	2bff      	cmp	r3, #255	@ 0xff
 8000dca:	d101      	bne.n	8000dd0 <SD_WaitReady+0x24>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e006      	b.n	8000dde <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8000dd0:	f000 fe28 	bl	8001a24 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d8f0      	bhi.n	8000dbe <SD_WaitReady+0x12>
    return SD_ERROR;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	6039      	str	r1, [r7, #0]
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	4613      	mov	r3, r2
 8000df4:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 8000df6:	23ff      	movs	r3, #255	@ 0xff
 8000df8:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 8000dfa:	f7ff ffd7 	bl	8000dac <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff5a 	bl	8000cc0 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	0e1b      	lsrs	r3, r3, #24
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff54 	bl	8000cc0 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff4e 	bl	8000cc0 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff48 	bl	8000cc0 <SD_TransmitByte>
    SD_TransmitByte(arg);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff43 	bl	8000cc0 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff3f 	bl	8000cc0 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8000e42:	f7ff ff4f 	bl	8000ce4 <SD_ReceiveByte>
 8000e46:	4603      	mov	r3, r0
 8000e48:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8000e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da05      	bge.n	8000e5e <SD_SendCommand+0x78>
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f1      	bne.n	8000e42 <SD_SendCommand+0x5c>

    return response;
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
    return sdhc;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <sd_is_sdhc+0x14>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	24001240 	.word	0x24001240

08000e80 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 8000e86:	2201      	movs	r2, #1
 8000e88:	2110      	movs	r1, #16
 8000e8a:	4873      	ldr	r0, [pc, #460]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000e8c:	f003 ff6e 	bl	8004d6c <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e005      	b.n	8000ea2 <SD_SPI_Init+0x22>
 8000e96:	20ff      	movs	r0, #255	@ 0xff
 8000e98:	f7ff ff12 	bl	8000cc0 <SD_TransmitByte>
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	d9f6      	bls.n	8000e96 <SD_SPI_Init+0x16>

    SD_CS_LOW();
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	486a      	ldr	r0, [pc, #424]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000eae:	f003 ff5d 	bl	8004d6c <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8000eb2:	2295      	movs	r2, #149	@ 0x95
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ff95 	bl	8000de6 <SD_SendCommand>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	4864      	ldr	r0, [pc, #400]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000ec6:	f003 ff51 	bl	8004d6c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8000eca:	20ff      	movs	r0, #255	@ 0xff
 8000ecc:	f7ff fef8 	bl	8000cc0 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d001      	beq.n	8000eda <SD_SPI_Init+0x5a>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e0ba      	b.n	8001050 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 8000eda:	2200      	movs	r2, #0
 8000edc:	2110      	movs	r1, #16
 8000ede:	485e      	ldr	r0, [pc, #376]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000ee0:	f003 ff44 	bl	8004d6c <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8000ee4:	2287      	movs	r2, #135	@ 0x87
 8000ee6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000eea:	2008      	movs	r0, #8
 8000eec:	f7ff ff7b 	bl	8000de6 <SD_SendCommand>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e00c      	b.n	8000f14 <SD_SPI_Init+0x94>
 8000efa:	7bfc      	ldrb	r4, [r7, #15]
 8000efc:	f7ff fef2 	bl	8000ce4 <SD_ReceiveByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	f104 0310 	add.w	r3, r4, #16
 8000f08:	443b      	add	r3, r7
 8000f0a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	3301      	adds	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d9ef      	bls.n	8000efa <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	484e      	ldr	r0, [pc, #312]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000f20:	f003 ff24 	bl	8004d6c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8000f24:	20ff      	movs	r0, #255	@ 0xff
 8000f26:	f7ff fecb 	bl	8000cc0 <SD_TransmitByte>

    sdhc = 0;
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800105c <SD_SPI_Init+0x1dc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8000f30:	f000 fd78 	bl	8001a24 <HAL_GetTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000f3a:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d15a      	bne.n	8000ff8 <SD_SPI_Init+0x178>
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d157      	bne.n	8000ff8 <SD_SPI_Init+0x178>
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2baa      	cmp	r3, #170	@ 0xaa
 8000f4c:	d154      	bne.n	8000ff8 <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	4841      	ldr	r0, [pc, #260]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000f54:	f003 ff0a 	bl	8004d6c <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8000f58:	22ff      	movs	r2, #255	@ 0xff
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2037      	movs	r0, #55	@ 0x37
 8000f5e:	f7ff ff42 	bl	8000de6 <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8000f62:	22ff      	movs	r2, #255	@ 0xff
 8000f64:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f68:	2029      	movs	r0, #41	@ 0x29
 8000f6a:	f7ff ff3c 	bl	8000de6 <SD_SendCommand>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8000f72:	2201      	movs	r2, #1
 8000f74:	2110      	movs	r1, #16
 8000f76:	4838      	ldr	r0, [pc, #224]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000f78:	f003 fef8 	bl	8004d6c <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8000f7c:	20ff      	movs	r0, #255	@ 0xff
 8000f7e:	f7ff fe9f 	bl	8000cc0 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <SD_SPI_Init+0x114>
 8000f88:	f000 fd4c 	bl	8001a24 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d8dc      	bhi.n	8000f4e <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SD_SPI_Init+0x11e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e058      	b.n	8001050 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	482d      	ldr	r0, [pc, #180]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000fa4:	f003 fee2 	bl	8004d6c <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8000fa8:	22ff      	movs	r2, #255	@ 0xff
 8000faa:	2100      	movs	r1, #0
 8000fac:	203a      	movs	r0, #58	@ 0x3a
 8000fae:	f7ff ff1a 	bl	8000de6 <SD_SendCommand>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e00c      	b.n	8000fd6 <SD_SPI_Init+0x156>
 8000fbc:	7bfc      	ldrb	r4, [r7, #15]
 8000fbe:	f7ff fe91 	bl	8000ce4 <SD_ReceiveByte>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f104 0310 	add.w	r3, r4, #16
 8000fca:	443b      	add	r3, r7
 8000fcc:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d9ef      	bls.n	8000fbc <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	481d      	ldr	r0, [pc, #116]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000fe2:	f003 fec3 	bl	8004d6c <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8000fe6:	783b      	ldrb	r3, [r7, #0]
 8000fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d02a      	beq.n	8001046 <SD_SPI_Init+0x1c6>
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <SD_SPI_Init+0x1dc>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8000ff6:	e026      	b.n	8001046 <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	4816      	ldr	r0, [pc, #88]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8000ffe:	f003 feb5 	bl	8004d6c <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001002:	22ff      	movs	r2, #255	@ 0xff
 8001004:	2100      	movs	r1, #0
 8001006:	2037      	movs	r0, #55	@ 0x37
 8001008:	f7ff feed 	bl	8000de6 <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 800100c:	22ff      	movs	r2, #255	@ 0xff
 800100e:	2100      	movs	r1, #0
 8001010:	2029      	movs	r0, #41	@ 0x29
 8001012:	f7ff fee8 	bl	8000de6 <SD_SendCommand>
 8001016:	4603      	mov	r3, r0
 8001018:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 800101a:	2201      	movs	r2, #1
 800101c:	2110      	movs	r1, #16
 800101e:	480e      	ldr	r0, [pc, #56]	@ (8001058 <SD_SPI_Init+0x1d8>)
 8001020:	f003 fea4 	bl	8004d6c <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001024:	20ff      	movs	r0, #255	@ 0xff
 8001026:	f7ff fe4b 	bl	8000cc0 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <SD_SPI_Init+0x1bc>
 8001030:	f000 fcf8 	bl	8001a24 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	4293      	cmp	r3, r2
 800103a:	d8dd      	bhi.n	8000ff8 <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <SD_SPI_Init+0x1c8>
 8001042:	2301      	movs	r3, #1
 8001044:	e004      	b.n	8001050 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001046:	bf00      	nop
    }

    card_initialized = 1;
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <SD_SPI_Init+0x1e0>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	58020000 	.word	0x58020000
 800105c:	24001240 	.word	0x24001240
 8001060:	24001241 	.word	0x24001241

08001064 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <SD_ReadBlocks+0x16>
 8001076:	2301      	movs	r3, #1
 8001078:	e054      	b.n	8001124 <SD_ReadBlocks+0xc0>
    if (!sdhc) sector *= 512;
 800107a:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <SD_ReadBlocks+0xc8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <SD_ReadBlocks+0x24>
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d144      	bne.n	8001118 <SD_ReadBlocks+0xb4>
        SD_CS_LOW();
 800108e:	2200      	movs	r2, #0
 8001090:	2110      	movs	r1, #16
 8001092:	4827      	ldr	r0, [pc, #156]	@ (8001130 <SD_ReadBlocks+0xcc>)
 8001094:	f003 fe6a 	bl	8004d6c <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001098:	22ff      	movs	r2, #255	@ 0xff
 800109a:	68b9      	ldr	r1, [r7, #8]
 800109c:	2011      	movs	r0, #17
 800109e:	f7ff fea2 	bl	8000de6 <SD_SendCommand>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 80010a8:	2201      	movs	r2, #1
 80010aa:	2110      	movs	r1, #16
 80010ac:	4820      	ldr	r0, [pc, #128]	@ (8001130 <SD_ReadBlocks+0xcc>)
 80010ae:	f003 fe5d 	bl	8004d6c <HAL_GPIO_WritePin>
            return SD_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e036      	b.n	8001124 <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 80010b6:	f000 fcb5 	bl	8001a24 <HAL_GetTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	33c8      	adds	r3, #200	@ 0xc8
 80010be:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 80010c0:	f7ff fe10 	bl	8000ce4 <SD_ReceiveByte>
 80010c4:	4603      	mov	r3, r0
 80010c6:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 80010c8:	7cfb      	ldrb	r3, [r7, #19]
 80010ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80010cc:	d006      	beq.n	80010dc <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 80010ce:	f000 fca9 	bl	8001a24 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d8f2      	bhi.n	80010c0 <SD_ReadBlocks+0x5c>
 80010da:	e000      	b.n	80010de <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 80010dc:	bf00      	nop
        if (token != 0xFE) {
 80010de:	7cfb      	ldrb	r3, [r7, #19]
 80010e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80010e2:	d006      	beq.n	80010f2 <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 80010e4:	2201      	movs	r2, #1
 80010e6:	2110      	movs	r1, #16
 80010e8:	4811      	ldr	r0, [pc, #68]	@ (8001130 <SD_ReadBlocks+0xcc>)
 80010ea:	f003 fe3f 	bl	8004d6c <HAL_GPIO_WritePin>
            return SD_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e018      	b.n	8001124 <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 80010f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff fe2a 	bl	8000d50 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 80010fc:	f7ff fdf2 	bl	8000ce4 <SD_ReceiveByte>
        SD_ReceiveByte();
 8001100:	f7ff fdf0 	bl	8000ce4 <SD_ReceiveByte>
        SD_CS_HIGH();
 8001104:	2201      	movs	r2, #1
 8001106:	2110      	movs	r1, #16
 8001108:	4809      	ldr	r0, [pc, #36]	@ (8001130 <SD_ReadBlocks+0xcc>)
 800110a:	f003 fe2f 	bl	8004d6c <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 800110e:	20ff      	movs	r0, #255	@ 0xff
 8001110:	f7ff fdd6 	bl	8000cc0 <SD_TransmitByte>
        return SD_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	e005      	b.n	8001124 <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 f809 	bl	8001134 <SD_ReadMultiBlocks>
 8001122:	4603      	mov	r3, r0
    }
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	24001240 	.word	0x24001240
 8001130:	58020000 	.word	0x58020000

08001134 <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <SD_ReadMultiBlocks+0x16>
 8001146:	2301      	movs	r3, #1
 8001148:	e058      	b.n	80011fc <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <SD_ReadMultiBlocks+0xd0>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <SD_ReadMultiBlocks+0x24>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001158:	2200      	movs	r2, #0
 800115a:	2110      	movs	r1, #16
 800115c:	482a      	ldr	r0, [pc, #168]	@ (8001208 <SD_ReadMultiBlocks+0xd4>)
 800115e:	f003 fe05 	bl	8004d6c <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 8001162:	22ff      	movs	r2, #255	@ 0xff
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	2012      	movs	r0, #18
 8001168:	f7ff fe3d 	bl	8000de6 <SD_SendCommand>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d031      	beq.n	80011d6 <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 8001172:	2201      	movs	r2, #1
 8001174:	2110      	movs	r1, #16
 8001176:	4824      	ldr	r0, [pc, #144]	@ (8001208 <SD_ReadMultiBlocks+0xd4>)
 8001178:	f003 fdf8 	bl	8004d6c <HAL_GPIO_WritePin>
        return SD_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e03d      	b.n	80011fc <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001180:	f000 fc50 	bl	8001a24 <HAL_GetTick>
 8001184:	4603      	mov	r3, r0
 8001186:	33c8      	adds	r3, #200	@ 0xc8
 8001188:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 800118a:	f7ff fdab 	bl	8000ce4 <SD_ReceiveByte>
 800118e:	4603      	mov	r3, r0
 8001190:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001192:	7cfb      	ldrb	r3, [r7, #19]
 8001194:	2bfe      	cmp	r3, #254	@ 0xfe
 8001196:	d006      	beq.n	80011a6 <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 8001198:	f000 fc44 	bl	8001a24 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d8f2      	bhi.n	800118a <SD_ReadMultiBlocks+0x56>
 80011a4:	e000      	b.n	80011a8 <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 80011a6:	bf00      	nop

        if (token != 0xFE) {
 80011a8:	7cfb      	ldrb	r3, [r7, #19]
 80011aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80011ac:	d006      	beq.n	80011bc <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 80011ae:	2201      	movs	r2, #1
 80011b0:	2110      	movs	r1, #16
 80011b2:	4815      	ldr	r0, [pc, #84]	@ (8001208 <SD_ReadMultiBlocks+0xd4>)
 80011b4:	f003 fdda 	bl	8004d6c <HAL_GPIO_WritePin>
            return SD_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e01f      	b.n	80011fc <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 80011bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff fdc5 	bl	8000d50 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 80011c6:	f7ff fd8d 	bl	8000ce4 <SD_ReceiveByte>
        SD_ReceiveByte();
 80011ca:	f7ff fd8b 	bl	8000ce4 <SD_ReceiveByte>

        buff += 512;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011d4:	60fb      	str	r3, [r7, #12]
    while (count--) {
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1cf      	bne.n	8001180 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 80011e0:	22ff      	movs	r2, #255	@ 0xff
 80011e2:	2100      	movs	r1, #0
 80011e4:	200c      	movs	r0, #12
 80011e6:	f7ff fdfe 	bl	8000de6 <SD_SendCommand>
    SD_CS_HIGH();
 80011ea:	2201      	movs	r2, #1
 80011ec:	2110      	movs	r1, #16
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <SD_ReadMultiBlocks+0xd4>)
 80011f0:	f003 fdbc 	bl	8004d6c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 80011f4:	20ff      	movs	r0, #255	@ 0xff
 80011f6:	f7ff fd63 	bl	8000cc0 <SD_TransmitByte>

    return SD_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24001240 	.word	0x24001240
 8001208:	58020000 	.word	0x58020000

0800120c <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <SD_WriteBlocks+0x16>
 800121e:	2301      	movs	r3, #1
 8001220:	e051      	b.n	80012c6 <SD_WriteBlocks+0xba>
    if (!sdhc) sector *= 512;
 8001222:	4b2b      	ldr	r3, [pc, #172]	@ (80012d0 <SD_WriteBlocks+0xc4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <SD_WriteBlocks+0x24>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	025b      	lsls	r3, r3, #9
 800122e:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d141      	bne.n	80012ba <SD_WriteBlocks+0xae>
        SD_CS_LOW();
 8001236:	2200      	movs	r2, #0
 8001238:	2110      	movs	r1, #16
 800123a:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <SD_WriteBlocks+0xc8>)
 800123c:	f003 fd96 	bl	8004d6c <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8001240:	22ff      	movs	r2, #255	@ 0xff
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	2018      	movs	r0, #24
 8001246:	f7ff fdce 	bl	8000de6 <SD_SendCommand>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 8001250:	2201      	movs	r2, #1
 8001252:	2110      	movs	r1, #16
 8001254:	481f      	ldr	r0, [pc, #124]	@ (80012d4 <SD_WriteBlocks+0xc8>)
 8001256:	f003 fd89 	bl	8004d6c <HAL_GPIO_WritePin>
            return SD_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e033      	b.n	80012c6 <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 800125e:	20fe      	movs	r0, #254	@ 0xfe
 8001260:	f7ff fd2e 	bl	8000cc0 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 8001264:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff fd53 	bl	8000d14 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 800126e:	20ff      	movs	r0, #255	@ 0xff
 8001270:	f7ff fd26 	bl	8000cc0 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001274:	20ff      	movs	r0, #255	@ 0xff
 8001276:	f7ff fd23 	bl	8000cc0 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 800127a:	f7ff fd33 	bl	8000ce4 <SD_ReceiveByte>
 800127e:	4603      	mov	r3, r0
 8001280:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	f003 031f 	and.w	r3, r3, #31
 8001288:	2b05      	cmp	r3, #5
 800128a:	d006      	beq.n	800129a <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 800128c:	2201      	movs	r2, #1
 800128e:	2110      	movs	r1, #16
 8001290:	4810      	ldr	r0, [pc, #64]	@ (80012d4 <SD_WriteBlocks+0xc8>)
 8001292:	f003 fd6b 	bl	8004d6c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e015      	b.n	80012c6 <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 800129a:	bf00      	nop
 800129c:	f7ff fd22 	bl	8000ce4 <SD_ReceiveByte>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0fa      	beq.n	800129c <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 80012a6:	2201      	movs	r2, #1
 80012a8:	2110      	movs	r1, #16
 80012aa:	480a      	ldr	r0, [pc, #40]	@ (80012d4 <SD_WriteBlocks+0xc8>)
 80012ac:	f003 fd5e 	bl	8004d6c <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 80012b0:	20ff      	movs	r0, #255	@ 0xff
 80012b2:	f7ff fd05 	bl	8000cc0 <SD_TransmitByte>

        return SD_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e005      	b.n	80012c6 <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f80a 	bl	80012d8 <SD_WriteMultiBlocks>
 80012c4:	4603      	mov	r3, r0
    }
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24001240 	.word	0x24001240
 80012d4:	58020000 	.word	0x58020000

080012d8 <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <SD_WriteMultiBlocks+0x16>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e059      	b.n	80013a2 <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 80012ee:	4b2f      	ldr	r3, [pc, #188]	@ (80013ac <SD_WriteMultiBlocks+0xd4>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <SD_WriteMultiBlocks+0x24>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	025b      	lsls	r3, r3, #9
 80012fa:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 80012fc:	2200      	movs	r2, #0
 80012fe:	2110      	movs	r1, #16
 8001300:	482b      	ldr	r0, [pc, #172]	@ (80013b0 <SD_WriteMultiBlocks+0xd8>)
 8001302:	f003 fd33 	bl	8004d6c <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 8001306:	22ff      	movs	r2, #255	@ 0xff
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	2019      	movs	r0, #25
 800130c:	f7ff fd6b 	bl	8000de6 <SD_SendCommand>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d02e      	beq.n	8001374 <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 8001316:	2201      	movs	r2, #1
 8001318:	2110      	movs	r1, #16
 800131a:	4825      	ldr	r0, [pc, #148]	@ (80013b0 <SD_WriteMultiBlocks+0xd8>)
 800131c:	f003 fd26 	bl	8004d6c <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e03e      	b.n	80013a2 <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 8001324:	20fc      	movs	r0, #252	@ 0xfc
 8001326:	f7ff fccb 	bl	8000cc0 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 800132a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff fcf0 	bl	8000d14 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 8001334:	20ff      	movs	r0, #255	@ 0xff
 8001336:	f7ff fcc3 	bl	8000cc0 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 800133a:	20ff      	movs	r0, #255	@ 0xff
 800133c:	f7ff fcc0 	bl	8000cc0 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001340:	f7ff fcd0 	bl	8000ce4 <SD_ReceiveByte>
 8001344:	4603      	mov	r3, r0
 8001346:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	2b05      	cmp	r3, #5
 8001350:	d006      	beq.n	8001360 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 8001352:	2201      	movs	r2, #1
 8001354:	2110      	movs	r1, #16
 8001356:	4816      	ldr	r0, [pc, #88]	@ (80013b0 <SD_WriteMultiBlocks+0xd8>)
 8001358:	f003 fd08 	bl	8004d6c <HAL_GPIO_WritePin>
            return SD_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e020      	b.n	80013a2 <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8001360:	bf00      	nop
 8001362:	f7ff fcbf 	bl	8000ce4 <SD_ReceiveByte>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0fa      	beq.n	8001362 <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001372:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1e5a      	subs	r2, r3, #1
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1d2      	bne.n	8001324 <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 800137e:	20fd      	movs	r0, #253	@ 0xfd
 8001380:	f7ff fc9e 	bl	8000cc0 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8001384:	bf00      	nop
 8001386:	f7ff fcad 	bl	8000ce4 <SD_ReceiveByte>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0fa      	beq.n	8001386 <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 8001390:	2201      	movs	r2, #1
 8001392:	2110      	movs	r1, #16
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <SD_WriteMultiBlocks+0xd8>)
 8001396:	f003 fce9 	bl	8004d6c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 800139a:	20ff      	movs	r0, #255	@ 0xff
 800139c:	f7ff fc90 	bl	8000cc0 <SD_TransmitByte>

    return SD_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	24001240 	.word	0x24001240
 80013b0:	58020000 	.word	0x58020000

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_MspInit+0x30>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c0:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_MspInit+0x30>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_MspInit+0x30>)
 80013cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	58024400 	.word	0x58024400

080013e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0b8      	sub	sp, #224	@ 0xe0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	22b8      	movs	r2, #184	@ 0xb8
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00a fb4f 	bl	800baac <memset>
  if(hspi->Instance==SPI1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a57      	ldr	r2, [pc, #348]	@ (8001570 <HAL_SPI_MspInit+0x188>)
 8001414:	4293      	cmp	r3, r2
 8001416:	f040 80a7 	bne.w	8001568 <HAL_SPI_MspInit+0x180>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800141a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001426:	2300      	movs	r3, #0
 8001428:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fc14 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800143a:	f7ff f95b 	bl	80006f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143e:	4b4d      	ldr	r3, [pc, #308]	@ (8001574 <HAL_SPI_MspInit+0x18c>)
 8001440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001444:	4a4b      	ldr	r2, [pc, #300]	@ (8001574 <HAL_SPI_MspInit+0x18c>)
 8001446:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800144a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800144e:	4b49      	ldr	r3, [pc, #292]	@ (8001574 <HAL_SPI_MspInit+0x18c>)
 8001450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001454:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b45      	ldr	r3, [pc, #276]	@ (8001574 <HAL_SPI_MspInit+0x18c>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	4a44      	ldr	r2, [pc, #272]	@ (8001574 <HAL_SPI_MspInit+0x18c>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146c:	4b41      	ldr	r3, [pc, #260]	@ (8001574 <HAL_SPI_MspInit+0x18c>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800147a:	23e0      	movs	r3, #224	@ 0xe0
 800147c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001492:	2305      	movs	r3, #5
 8001494:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800149c:	4619      	mov	r1, r3
 800149e:	4836      	ldr	r0, [pc, #216]	@ (8001578 <HAL_SPI_MspInit+0x190>)
 80014a0:	f003 fabc 	bl	8004a1c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80014a4:	4b35      	ldr	r3, [pc, #212]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014a6:	4a36      	ldr	r2, [pc, #216]	@ (8001580 <HAL_SPI_MspInit+0x198>)
 80014a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80014aa:	4b34      	ldr	r3, [pc, #208]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014ac:	2225      	movs	r2, #37	@ 0x25
 80014ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b0:	4b32      	ldr	r3, [pc, #200]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b6:	4b31      	ldr	r3, [pc, #196]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014bc:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ca:	4b2c      	ldr	r3, [pc, #176]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80014d0:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014d6:	4b29      	ldr	r3, [pc, #164]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014dc:	4b27      	ldr	r3, [pc, #156]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80014e2:	4826      	ldr	r0, [pc, #152]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014e4:	f000 fc56 	bl	8001d94 <HAL_DMA_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80014ee:	f7ff f901 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a21      	ldr	r2, [pc, #132]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014f6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80014f8:	4a20      	ldr	r2, [pc, #128]	@ (800157c <HAL_SPI_MspInit+0x194>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001500:	4a21      	ldr	r2, [pc, #132]	@ (8001588 <HAL_SPI_MspInit+0x1a0>)
 8001502:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001506:	2226      	movs	r2, #38	@ 0x26
 8001508:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 800150c:	2240      	movs	r2, #64	@ 0x40
 800150e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001536:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800153c:	4811      	ldr	r0, [pc, #68]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 800153e:	f000 fc29 	bl	8001d94 <HAL_DMA_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001548:	f7ff f8d4 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001550:	679a      	str	r2, [r3, #120]	@ 0x78
 8001552:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <HAL_SPI_MspInit+0x19c>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2023      	movs	r0, #35	@ 0x23
 800155e:	f000 fb6c 	bl	8001c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001562:	2023      	movs	r0, #35	@ 0x23
 8001564:	f000 fb83 	bl	8001c6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001568:	bf00      	nop
 800156a:	37e0      	adds	r7, #224	@ 0xe0
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40013000 	.word	0x40013000
 8001574:	58024400 	.word	0x58024400
 8001578:	58020000 	.word	0x58020000
 800157c:	24000110 	.word	0x24000110
 8001580:	40020010 	.word	0x40020010
 8001584:	24000188 	.word	0x24000188
 8001588:	40020028 	.word	0x40020028

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <NMI_Handler+0x4>

08001594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <MemManage_Handler+0x4>

080015a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e2:	f000 fa0b 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <DMA1_Stream0_IRQHandler+0x10>)
 80015f2:	f001 fef5 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	24000110 	.word	0x24000110

08001600 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <DMA1_Stream1_IRQHandler+0x10>)
 8001606:	f001 feeb 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	24000188 	.word	0x24000188

08001614 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <SPI1_IRQHandler+0x10>)
 800161a:	f006 ff69 	bl	80084f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	24000088 	.word	0x24000088

08001628 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e00a      	b.n	8001650 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800163a:	f3af 8000 	nop.w
 800163e:	4601      	mov	r1, r0
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	b2ca      	uxtb	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf0      	blt.n	800163a <_read+0x12>
  }

  return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e009      	b.n	8001688 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf1      	blt.n	8001674 <_write+0x12>
  }
  return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_close>:

int _close(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c2:	605a      	str	r2, [r3, #4]
  return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_isatty>:

int _isatty(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f00a fa08 	bl	800bb48 <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	24050000 	.word	0x24050000
 8001764:	00000400 	.word	0x00000400
 8001768:	24001444 	.word	0x24001444
 800176c:	240015d0 	.word	0x240015d0

08001770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001774:	4b3e      	ldr	r3, [pc, #248]	@ (8001870 <SystemInit+0x100>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177a:	4a3d      	ldr	r2, [pc, #244]	@ (8001870 <SystemInit+0x100>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001784:	4b3b      	ldr	r3, [pc, #236]	@ (8001874 <SystemInit+0x104>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	2b06      	cmp	r3, #6
 800178e:	d807      	bhi.n	80017a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001790:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <SystemInit+0x104>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 030f 	bic.w	r3, r3, #15
 8001798:	4a36      	ldr	r2, [pc, #216]	@ (8001874 <SystemInit+0x104>)
 800179a:	f043 0307 	orr.w	r3, r3, #7
 800179e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017a0:	4b35      	ldr	r3, [pc, #212]	@ (8001878 <SystemInit+0x108>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a34      	ldr	r2, [pc, #208]	@ (8001878 <SystemInit+0x108>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017ac:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <SystemInit+0x108>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017b2:	4b31      	ldr	r3, [pc, #196]	@ (8001878 <SystemInit+0x108>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4930      	ldr	r1, [pc, #192]	@ (8001878 <SystemInit+0x108>)
 80017b8:	4b30      	ldr	r3, [pc, #192]	@ (800187c <SystemInit+0x10c>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017be:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <SystemInit+0x104>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <SystemInit+0x104>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 030f 	bic.w	r3, r3, #15
 80017d2:	4a28      	ldr	r2, [pc, #160]	@ (8001874 <SystemInit+0x104>)
 80017d4:	f043 0307 	orr.w	r3, r3, #7
 80017d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017da:	4b27      	ldr	r3, [pc, #156]	@ (8001878 <SystemInit+0x108>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017e0:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <SystemInit+0x108>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017e6:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <SystemInit+0x108>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <SystemInit+0x108>)
 80017ee:	4a24      	ldr	r2, [pc, #144]	@ (8001880 <SystemInit+0x110>)
 80017f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017f2:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <SystemInit+0x108>)
 80017f4:	4a23      	ldr	r2, [pc, #140]	@ (8001884 <SystemInit+0x114>)
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <SystemInit+0x108>)
 80017fa:	4a23      	ldr	r2, [pc, #140]	@ (8001888 <SystemInit+0x118>)
 80017fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <SystemInit+0x108>)
 8001800:	2200      	movs	r2, #0
 8001802:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001804:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <SystemInit+0x108>)
 8001806:	4a20      	ldr	r2, [pc, #128]	@ (8001888 <SystemInit+0x118>)
 8001808:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800180a:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <SystemInit+0x108>)
 800180c:	2200      	movs	r2, #0
 800180e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <SystemInit+0x108>)
 8001812:	4a1d      	ldr	r2, [pc, #116]	@ (8001888 <SystemInit+0x118>)
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001816:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <SystemInit+0x108>)
 8001818:	2200      	movs	r2, #0
 800181a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <SystemInit+0x108>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a15      	ldr	r2, [pc, #84]	@ (8001878 <SystemInit+0x108>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001828:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <SystemInit+0x108>)
 800182a:	2200      	movs	r2, #0
 800182c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <SystemInit+0x108>)
 8001830:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d113      	bne.n	8001864 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <SystemInit+0x108>)
 800183e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001842:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <SystemInit+0x108>)
 8001844:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001848:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800184c:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <SystemInit+0x11c>)
 800184e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001852:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <SystemInit+0x108>)
 8001856:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800185a:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <SystemInit+0x108>)
 800185c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001860:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	52002000 	.word	0x52002000
 8001878:	58024400 	.word	0x58024400
 800187c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001880:	02020200 	.word	0x02020200
 8001884:	01ff0000 	.word	0x01ff0000
 8001888:	01010280 	.word	0x01010280
 800188c:	52004000 	.word	0x52004000

08001890 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001894:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <ExitRun0Mode+0x2c>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <ExitRun0Mode+0x2c>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80018a0:	bf00      	nop
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <ExitRun0Mode+0x2c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f9      	beq.n	80018a2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	58024800 	.word	0x58024800

080018c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80018fc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80018c4:	f7ff ffe4 	bl	8001890 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018c8:	f7ff ff52 	bl	8001770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	@ (8001904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f00a f92f 	bl	800bb54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f6:	f7fe fd5b 	bl	80003b0 <main>
  bx  lr
 80018fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001900:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001904:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001908:	0800cb7c 	.word	0x0800cb7c
  ldr r2, =_sbss
 800190c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001910:	240015cc 	.word	0x240015cc

08001914 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC3_IRQHandler>
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191e:	2003      	movs	r0, #3
 8001920:	f000 f980 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001924:	f004 f820 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_Init+0x68>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	4913      	ldr	r1, [pc, #76]	@ (8001984 <HAL_Init+0x6c>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <HAL_Init+0x68>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <HAL_Init+0x6c>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	4a0b      	ldr	r2, [pc, #44]	@ (8001988 <HAL_Init+0x70>)
 800195a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800195c:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <HAL_Init+0x74>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001962:	200f      	movs	r0, #15
 8001964:	f000 f814 	bl	8001990 <HAL_InitTick>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e002      	b.n	8001978 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001972:	f7ff fd1f 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	58024400 	.word	0x58024400
 8001984:	0800caa0 	.word	0x0800caa0
 8001988:	24000004 	.word	0x24000004
 800198c:	24000000 	.word	0x24000000

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001998:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <HAL_InitTick+0x60>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e021      	b.n	80019e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_InitTick+0x64>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <HAL_InitTick+0x60>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f965 	bl	8001c8a <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f92f 	bl	8001c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	@ (80019f8 <HAL_InitTick+0x68>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2400000c 	.word	0x2400000c
 80019f4:	24000000 	.word	0x24000000
 80019f8:	24000008 	.word	0x24000008

080019fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_IncTick+0x20>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_IncTick+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <HAL_IncTick+0x24>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2400000c 	.word	0x2400000c
 8001a20:	24001448 	.word	0x24001448

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	@ (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	24001448 	.word	0x24001448

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff ffee 	bl	8001a24 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d005      	beq.n	8001a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <HAL_Delay+0x44>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a62:	bf00      	nop
 8001a64:	f7ff ffde 	bl	8001a24 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f7      	bhi.n	8001a64 <HAL_Delay+0x28>
  {
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2400000c 	.word	0x2400000c

08001a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00
 8001ac8:	05fa0000 	.word	0x05fa0000

08001acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db0b      	blt.n	8001b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4907      	ldr	r1, [pc, #28]	@ (8001b20 <__NVIC_EnableIRQ+0x38>)
 8001b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	2001      	movs	r0, #1
 8001b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db0a      	blt.n	8001b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	490c      	ldr	r1, [pc, #48]	@ (8001b70 <__NVIC_SetPriority+0x4c>)
 8001b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b4c:	e00a      	b.n	8001b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4908      	ldr	r1, [pc, #32]	@ (8001b74 <__NVIC_SetPriority+0x50>)
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	3b04      	subs	r3, #4
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	761a      	strb	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	@ 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf28      	it	cs
 8001b96:	2304      	movcs	r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d902      	bls.n	8001ba8 <NVIC_EncodePriority+0x30>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b03      	subs	r3, #3
 8001ba6:	e000      	b.n	8001baa <NVIC_EncodePriority+0x32>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	4313      	orrs	r3, r2
         );
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	@ 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bf0:	d301      	bcc.n	8001bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00f      	b.n	8001c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <SysTick_Config+0x40>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfe:	210f      	movs	r1, #15
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f7ff ff8e 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <SysTick_Config+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <SysTick_Config+0x40>)
 8001c10:	2207      	movs	r2, #7
 8001c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	e000e010 	.word	0xe000e010

08001c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff29 	bl	8001a84 <__NVIC_SetPriorityGrouping>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff40 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff90 	bl	8001b78 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5f 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff33 	bl	8001ae8 <__NVIC_EnableIRQ>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffa4 	bl	8001be0 <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ca8:	f3bf 8f5f 	dmb	sy
}
 8001cac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <HAL_MPU_Disable+0x28>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	4a06      	ldr	r2, [pc, #24]	@ (8001ccc <HAL_MPU_Disable+0x28>)
 8001cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cba:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_MPU_Disable+0x2c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00
 8001cd0:	e000ed90 	.word	0xe000ed90

08001cd4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <HAL_MPU_Enable+0x38>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_MPU_Enable+0x3c>)
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <HAL_MPU_Enable+0x3c>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf2:	f3bf 8f4f 	dsb	sy
}
 8001cf6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf8:	f3bf 8f6f 	isb	sy
}
 8001cfc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed90 	.word	0xe000ed90
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	785a      	ldrb	r2, [r3, #1]
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <HAL_MPU_ConfigRegion+0x7c>)
 8001d22:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_MPU_ConfigRegion+0x7c>)
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_MPU_ConfigRegion+0x7c>)
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d30:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <HAL_MPU_ConfigRegion+0x7c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7b1b      	ldrb	r3, [r3, #12]
 8001d3c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7adb      	ldrb	r3, [r3, #11]
 8001d42:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7a9b      	ldrb	r3, [r3, #10]
 8001d4a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7b5b      	ldrb	r3, [r3, #13]
 8001d52:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7b9b      	ldrb	r3, [r3, #14]
 8001d5a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7bdb      	ldrb	r3, [r3, #15]
 8001d62:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7a5b      	ldrb	r3, [r3, #9]
 8001d6a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7a1b      	ldrb	r3, [r3, #8]
 8001d72:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d74:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	7812      	ldrb	r2, [r2, #0]
 8001d7a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d7e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d80:	6113      	str	r3, [r2, #16]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed90 	.word	0xe000ed90

08001d94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff fe42 	bl	8001a24 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e312      	b.n	80023d2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a66      	ldr	r2, [pc, #408]	@ (8001f4c <HAL_DMA_Init+0x1b8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d04a      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a65      	ldr	r2, [pc, #404]	@ (8001f50 <HAL_DMA_Init+0x1bc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d045      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a63      	ldr	r2, [pc, #396]	@ (8001f54 <HAL_DMA_Init+0x1c0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d040      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a62      	ldr	r2, [pc, #392]	@ (8001f58 <HAL_DMA_Init+0x1c4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d03b      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a60      	ldr	r2, [pc, #384]	@ (8001f5c <HAL_DMA_Init+0x1c8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d036      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f60 <HAL_DMA_Init+0x1cc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d031      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a5d      	ldr	r2, [pc, #372]	@ (8001f64 <HAL_DMA_Init+0x1d0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02c      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f68 <HAL_DMA_Init+0x1d4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d027      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5a      	ldr	r2, [pc, #360]	@ (8001f6c <HAL_DMA_Init+0x1d8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d022      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a59      	ldr	r2, [pc, #356]	@ (8001f70 <HAL_DMA_Init+0x1dc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d01d      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a57      	ldr	r2, [pc, #348]	@ (8001f74 <HAL_DMA_Init+0x1e0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d018      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a56      	ldr	r2, [pc, #344]	@ (8001f78 <HAL_DMA_Init+0x1e4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a54      	ldr	r2, [pc, #336]	@ (8001f7c <HAL_DMA_Init+0x1e8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00e      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a53      	ldr	r2, [pc, #332]	@ (8001f80 <HAL_DMA_Init+0x1ec>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a51      	ldr	r2, [pc, #324]	@ (8001f84 <HAL_DMA_Init+0x1f0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_DMA_Init+0xb8>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a50      	ldr	r2, [pc, #320]	@ (8001f88 <HAL_DMA_Init+0x1f4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_DMA_Init+0xbc>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_DMA_Init+0xbe>
 8001e50:	2300      	movs	r3, #0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 813c 	beq.w	80020d0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a37      	ldr	r2, [pc, #220]	@ (8001f4c <HAL_DMA_Init+0x1b8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d04a      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a36      	ldr	r2, [pc, #216]	@ (8001f50 <HAL_DMA_Init+0x1bc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d045      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a34      	ldr	r2, [pc, #208]	@ (8001f54 <HAL_DMA_Init+0x1c0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d040      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a33      	ldr	r2, [pc, #204]	@ (8001f58 <HAL_DMA_Init+0x1c4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d03b      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a31      	ldr	r2, [pc, #196]	@ (8001f5c <HAL_DMA_Init+0x1c8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d036      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a30      	ldr	r2, [pc, #192]	@ (8001f60 <HAL_DMA_Init+0x1cc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d031      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2e      	ldr	r2, [pc, #184]	@ (8001f64 <HAL_DMA_Init+0x1d0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d02c      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f68 <HAL_DMA_Init+0x1d4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d027      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f6c <HAL_DMA_Init+0x1d8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d022      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f70 <HAL_DMA_Init+0x1dc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d01d      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a28      	ldr	r2, [pc, #160]	@ (8001f74 <HAL_DMA_Init+0x1e0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d018      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a27      	ldr	r2, [pc, #156]	@ (8001f78 <HAL_DMA_Init+0x1e4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a25      	ldr	r2, [pc, #148]	@ (8001f7c <HAL_DMA_Init+0x1e8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00e      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a24      	ldr	r2, [pc, #144]	@ (8001f80 <HAL_DMA_Init+0x1ec>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a22      	ldr	r2, [pc, #136]	@ (8001f84 <HAL_DMA_Init+0x1f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_DMA_Init+0x174>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a21      	ldr	r2, [pc, #132]	@ (8001f88 <HAL_DMA_Init+0x1f4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d108      	bne.n	8001f1a <HAL_DMA_Init+0x186>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e007      	b.n	8001f2a <HAL_DMA_Init+0x196>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f2a:	e02f      	b.n	8001f8c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f2c:	f7ff fd7a 	bl	8001a24 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d928      	bls.n	8001f8c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2203      	movs	r2, #3
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e242      	b.n	80023d2 <HAL_DMA_Init+0x63e>
 8001f4c:	40020010 	.word	0x40020010
 8001f50:	40020028 	.word	0x40020028
 8001f54:	40020040 	.word	0x40020040
 8001f58:	40020058 	.word	0x40020058
 8001f5c:	40020070 	.word	0x40020070
 8001f60:	40020088 	.word	0x40020088
 8001f64:	400200a0 	.word	0x400200a0
 8001f68:	400200b8 	.word	0x400200b8
 8001f6c:	40020410 	.word	0x40020410
 8001f70:	40020428 	.word	0x40020428
 8001f74:	40020440 	.word	0x40020440
 8001f78:	40020458 	.word	0x40020458
 8001f7c:	40020470 	.word	0x40020470
 8001f80:	40020488 	.word	0x40020488
 8001f84:	400204a0 	.word	0x400204a0
 8001f88:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1c8      	bne.n	8001f2c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4b83      	ldr	r3, [pc, #524]	@ (80021b4 <HAL_DMA_Init+0x420>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001fb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b28      	cmp	r3, #40	@ 0x28
 8001ff6:	d903      	bls.n	8002000 <HAL_DMA_Init+0x26c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ffe:	d91f      	bls.n	8002040 <HAL_DMA_Init+0x2ac>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b3e      	cmp	r3, #62	@ 0x3e
 8002006:	d903      	bls.n	8002010 <HAL_DMA_Init+0x27c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b42      	cmp	r3, #66	@ 0x42
 800200e:	d917      	bls.n	8002040 <HAL_DMA_Init+0x2ac>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b46      	cmp	r3, #70	@ 0x46
 8002016:	d903      	bls.n	8002020 <HAL_DMA_Init+0x28c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b48      	cmp	r3, #72	@ 0x48
 800201e:	d90f      	bls.n	8002040 <HAL_DMA_Init+0x2ac>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b4e      	cmp	r3, #78	@ 0x4e
 8002026:	d903      	bls.n	8002030 <HAL_DMA_Init+0x29c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b52      	cmp	r3, #82	@ 0x52
 800202e:	d907      	bls.n	8002040 <HAL_DMA_Init+0x2ac>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b73      	cmp	r3, #115	@ 0x73
 8002036:	d905      	bls.n	8002044 <HAL_DMA_Init+0x2b0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b77      	cmp	r3, #119	@ 0x77
 800203e:	d801      	bhi.n	8002044 <HAL_DMA_Init+0x2b0>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_DMA_Init+0x2b2>
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002050:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f023 0307 	bic.w	r3, r3, #7
 8002068:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	2b04      	cmp	r3, #4
 800207a:	d117      	bne.n	80020ac <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00e      	beq.n	80020ac <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f002 fb3a 	bl	8004708 <DMA_CheckFifoParam>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2240      	movs	r2, #64	@ 0x40
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e192      	b.n	80023d2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f002 fa75 	bl	80045a4 <DMA_CalcBaseAndBitshift>
 80020ba:	4603      	mov	r3, r0
 80020bc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	223f      	movs	r2, #63	@ 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	e0c8      	b.n	8002262 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a38      	ldr	r2, [pc, #224]	@ (80021b8 <HAL_DMA_Init+0x424>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d022      	beq.n	8002120 <HAL_DMA_Init+0x38c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a37      	ldr	r2, [pc, #220]	@ (80021bc <HAL_DMA_Init+0x428>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01d      	beq.n	8002120 <HAL_DMA_Init+0x38c>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a35      	ldr	r2, [pc, #212]	@ (80021c0 <HAL_DMA_Init+0x42c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d018      	beq.n	8002120 <HAL_DMA_Init+0x38c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a34      	ldr	r2, [pc, #208]	@ (80021c4 <HAL_DMA_Init+0x430>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_Init+0x38c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a32      	ldr	r2, [pc, #200]	@ (80021c8 <HAL_DMA_Init+0x434>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_DMA_Init+0x38c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a31      	ldr	r2, [pc, #196]	@ (80021cc <HAL_DMA_Init+0x438>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_DMA_Init+0x38c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2f      	ldr	r2, [pc, #188]	@ (80021d0 <HAL_DMA_Init+0x43c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_Init+0x38c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2e      	ldr	r2, [pc, #184]	@ (80021d4 <HAL_DMA_Init+0x440>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Init+0x390>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_DMA_Init+0x392>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8092 	beq.w	8002250 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a21      	ldr	r2, [pc, #132]	@ (80021b8 <HAL_DMA_Init+0x424>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d021      	beq.n	800217a <HAL_DMA_Init+0x3e6>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a20      	ldr	r2, [pc, #128]	@ (80021bc <HAL_DMA_Init+0x428>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d01c      	beq.n	800217a <HAL_DMA_Init+0x3e6>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1e      	ldr	r2, [pc, #120]	@ (80021c0 <HAL_DMA_Init+0x42c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d017      	beq.n	800217a <HAL_DMA_Init+0x3e6>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1d      	ldr	r2, [pc, #116]	@ (80021c4 <HAL_DMA_Init+0x430>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d012      	beq.n	800217a <HAL_DMA_Init+0x3e6>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1b      	ldr	r2, [pc, #108]	@ (80021c8 <HAL_DMA_Init+0x434>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00d      	beq.n	800217a <HAL_DMA_Init+0x3e6>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1a      	ldr	r2, [pc, #104]	@ (80021cc <HAL_DMA_Init+0x438>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d008      	beq.n	800217a <HAL_DMA_Init+0x3e6>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <HAL_DMA_Init+0x43c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d003      	beq.n	800217a <HAL_DMA_Init+0x3e6>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <HAL_DMA_Init+0x440>)
 8002178:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_DMA_Init+0x444>)
 8002196:	4013      	ands	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b40      	cmp	r3, #64	@ 0x40
 80021a0:	d01c      	beq.n	80021dc <HAL_DMA_Init+0x448>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b80      	cmp	r3, #128	@ 0x80
 80021a8:	d102      	bne.n	80021b0 <HAL_DMA_Init+0x41c>
 80021aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021ae:	e016      	b.n	80021de <HAL_DMA_Init+0x44a>
 80021b0:	2300      	movs	r3, #0
 80021b2:	e014      	b.n	80021de <HAL_DMA_Init+0x44a>
 80021b4:	fe10803f 	.word	0xfe10803f
 80021b8:	58025408 	.word	0x58025408
 80021bc:	5802541c 	.word	0x5802541c
 80021c0:	58025430 	.word	0x58025430
 80021c4:	58025444 	.word	0x58025444
 80021c8:	58025458 	.word	0x58025458
 80021cc:	5802546c 	.word	0x5802546c
 80021d0:	58025480 	.word	0x58025480
 80021d4:	58025494 	.word	0x58025494
 80021d8:	fffe000f 	.word	0xfffe000f
 80021dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68d2      	ldr	r2, [r2, #12]
 80021e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800220c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b6e      	ldr	r3, [pc, #440]	@ (80023dc <HAL_DMA_Init+0x648>)
 8002224:	4413      	add	r3, r2
 8002226:	4a6e      	ldr	r2, [pc, #440]	@ (80023e0 <HAL_DMA_Init+0x64c>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	009a      	lsls	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f002 f9b5 	bl	80045a4 <DMA_CalcBaseAndBitshift>
 800223a:	4603      	mov	r3, r0
 800223c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2201      	movs	r2, #1
 8002248:	409a      	lsls	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	e008      	b.n	8002262 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2240      	movs	r2, #64	@ 0x40
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0b7      	b.n	80023d2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a5f      	ldr	r2, [pc, #380]	@ (80023e4 <HAL_DMA_Init+0x650>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d072      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a5d      	ldr	r2, [pc, #372]	@ (80023e8 <HAL_DMA_Init+0x654>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d06d      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a5c      	ldr	r2, [pc, #368]	@ (80023ec <HAL_DMA_Init+0x658>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d068      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a5a      	ldr	r2, [pc, #360]	@ (80023f0 <HAL_DMA_Init+0x65c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d063      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a59      	ldr	r2, [pc, #356]	@ (80023f4 <HAL_DMA_Init+0x660>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d05e      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a57      	ldr	r2, [pc, #348]	@ (80023f8 <HAL_DMA_Init+0x664>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d059      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a56      	ldr	r2, [pc, #344]	@ (80023fc <HAL_DMA_Init+0x668>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d054      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a54      	ldr	r2, [pc, #336]	@ (8002400 <HAL_DMA_Init+0x66c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04f      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a53      	ldr	r2, [pc, #332]	@ (8002404 <HAL_DMA_Init+0x670>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d04a      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a51      	ldr	r2, [pc, #324]	@ (8002408 <HAL_DMA_Init+0x674>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d045      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a50      	ldr	r2, [pc, #320]	@ (800240c <HAL_DMA_Init+0x678>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d040      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002410 <HAL_DMA_Init+0x67c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d03b      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a4d      	ldr	r2, [pc, #308]	@ (8002414 <HAL_DMA_Init+0x680>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d036      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002418 <HAL_DMA_Init+0x684>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d031      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a4a      	ldr	r2, [pc, #296]	@ (800241c <HAL_DMA_Init+0x688>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d02c      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a48      	ldr	r2, [pc, #288]	@ (8002420 <HAL_DMA_Init+0x68c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d027      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a47      	ldr	r2, [pc, #284]	@ (8002424 <HAL_DMA_Init+0x690>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d022      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a45      	ldr	r2, [pc, #276]	@ (8002428 <HAL_DMA_Init+0x694>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01d      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a44      	ldr	r2, [pc, #272]	@ (800242c <HAL_DMA_Init+0x698>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d018      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a42      	ldr	r2, [pc, #264]	@ (8002430 <HAL_DMA_Init+0x69c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a41      	ldr	r2, [pc, #260]	@ (8002434 <HAL_DMA_Init+0x6a0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00e      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a3f      	ldr	r2, [pc, #252]	@ (8002438 <HAL_DMA_Init+0x6a4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a3e      	ldr	r2, [pc, #248]	@ (800243c <HAL_DMA_Init+0x6a8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_DMA_Init+0x5be>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a3c      	ldr	r2, [pc, #240]	@ (8002440 <HAL_DMA_Init+0x6ac>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_DMA_Init+0x5c2>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_DMA_Init+0x5c4>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d032      	beq.n	80023c2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f002 fa4f 	bl	8004800 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b80      	cmp	r3, #128	@ 0x80
 8002368:	d102      	bne.n	8002370 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002384:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_DMA_Init+0x61c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b08      	cmp	r3, #8
 8002394:	d80c      	bhi.n	80023b0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f002 facc 	bl	8004934 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	e008      	b.n	80023c2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	a7fdabf8 	.word	0xa7fdabf8
 80023e0:	cccccccd 	.word	0xcccccccd
 80023e4:	40020010 	.word	0x40020010
 80023e8:	40020028 	.word	0x40020028
 80023ec:	40020040 	.word	0x40020040
 80023f0:	40020058 	.word	0x40020058
 80023f4:	40020070 	.word	0x40020070
 80023f8:	40020088 	.word	0x40020088
 80023fc:	400200a0 	.word	0x400200a0
 8002400:	400200b8 	.word	0x400200b8
 8002404:	40020410 	.word	0x40020410
 8002408:	40020428 	.word	0x40020428
 800240c:	40020440 	.word	0x40020440
 8002410:	40020458 	.word	0x40020458
 8002414:	40020470 	.word	0x40020470
 8002418:	40020488 	.word	0x40020488
 800241c:	400204a0 	.word	0x400204a0
 8002420:	400204b8 	.word	0x400204b8
 8002424:	58025408 	.word	0x58025408
 8002428:	5802541c 	.word	0x5802541c
 800242c:	58025430 	.word	0x58025430
 8002430:	58025444 	.word	0x58025444
 8002434:	58025458 	.word	0x58025458
 8002438:	5802546c 	.word	0x5802546c
 800243c:	58025480 	.word	0x58025480
 8002440:	58025494 	.word	0x58025494

08002444 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e226      	b.n	80028ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_DMA_Start_IT+0x2a>
 800246a:	2302      	movs	r3, #2
 800246c:	e21f      	b.n	80028ae <HAL_DMA_Start_IT+0x46a>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	f040 820a 	bne.w	8002898 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a68      	ldr	r2, [pc, #416]	@ (8002638 <HAL_DMA_Start_IT+0x1f4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d04a      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a66      	ldr	r2, [pc, #408]	@ (800263c <HAL_DMA_Start_IT+0x1f8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d045      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a65      	ldr	r2, [pc, #404]	@ (8002640 <HAL_DMA_Start_IT+0x1fc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d040      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a63      	ldr	r2, [pc, #396]	@ (8002644 <HAL_DMA_Start_IT+0x200>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d03b      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a62      	ldr	r2, [pc, #392]	@ (8002648 <HAL_DMA_Start_IT+0x204>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d036      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a60      	ldr	r2, [pc, #384]	@ (800264c <HAL_DMA_Start_IT+0x208>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d031      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002650 <HAL_DMA_Start_IT+0x20c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d02c      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002654 <HAL_DMA_Start_IT+0x210>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d027      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002658 <HAL_DMA_Start_IT+0x214>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5a      	ldr	r2, [pc, #360]	@ (800265c <HAL_DMA_Start_IT+0x218>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01d      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a59      	ldr	r2, [pc, #356]	@ (8002660 <HAL_DMA_Start_IT+0x21c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d018      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a57      	ldr	r2, [pc, #348]	@ (8002664 <HAL_DMA_Start_IT+0x220>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <HAL_DMA_Start_IT+0x224>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00e      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a54      	ldr	r2, [pc, #336]	@ (800266c <HAL_DMA_Start_IT+0x228>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a53      	ldr	r2, [pc, #332]	@ (8002670 <HAL_DMA_Start_IT+0x22c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_DMA_Start_IT+0xee>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a51      	ldr	r2, [pc, #324]	@ (8002674 <HAL_DMA_Start_IT+0x230>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d108      	bne.n	8002544 <HAL_DMA_Start_IT+0x100>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e007      	b.n	8002554 <HAL_DMA_Start_IT+0x110>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f001 fe76 	bl	800424c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a34      	ldr	r2, [pc, #208]	@ (8002638 <HAL_DMA_Start_IT+0x1f4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d04a      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a33      	ldr	r2, [pc, #204]	@ (800263c <HAL_DMA_Start_IT+0x1f8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d045      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a31      	ldr	r2, [pc, #196]	@ (8002640 <HAL_DMA_Start_IT+0x1fc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d040      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a30      	ldr	r2, [pc, #192]	@ (8002644 <HAL_DMA_Start_IT+0x200>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d03b      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2e      	ldr	r2, [pc, #184]	@ (8002648 <HAL_DMA_Start_IT+0x204>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d036      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2d      	ldr	r2, [pc, #180]	@ (800264c <HAL_DMA_Start_IT+0x208>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002650 <HAL_DMA_Start_IT+0x20c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d02c      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002654 <HAL_DMA_Start_IT+0x210>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d027      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a28      	ldr	r2, [pc, #160]	@ (8002658 <HAL_DMA_Start_IT+0x214>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d022      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a27      	ldr	r2, [pc, #156]	@ (800265c <HAL_DMA_Start_IT+0x218>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d01d      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a25      	ldr	r2, [pc, #148]	@ (8002660 <HAL_DMA_Start_IT+0x21c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d018      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a24      	ldr	r2, [pc, #144]	@ (8002664 <HAL_DMA_Start_IT+0x220>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a22      	ldr	r2, [pc, #136]	@ (8002668 <HAL_DMA_Start_IT+0x224>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a21      	ldr	r2, [pc, #132]	@ (800266c <HAL_DMA_Start_IT+0x228>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <HAL_DMA_Start_IT+0x22c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_DMA_Start_IT+0x1bc>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <HAL_DMA_Start_IT+0x230>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_DMA_Start_IT+0x1c0>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_DMA_Start_IT+0x1c2>
 8002604:	2300      	movs	r3, #0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d036      	beq.n	8002678 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 021e 	bic.w	r2, r3, #30
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0216 	orr.w	r2, r2, #22
 800261c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d03e      	beq.n	80026a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0208 	orr.w	r2, r2, #8
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e035      	b.n	80026a4 <HAL_DMA_Start_IT+0x260>
 8002638:	40020010 	.word	0x40020010
 800263c:	40020028 	.word	0x40020028
 8002640:	40020040 	.word	0x40020040
 8002644:	40020058 	.word	0x40020058
 8002648:	40020070 	.word	0x40020070
 800264c:	40020088 	.word	0x40020088
 8002650:	400200a0 	.word	0x400200a0
 8002654:	400200b8 	.word	0x400200b8
 8002658:	40020410 	.word	0x40020410
 800265c:	40020428 	.word	0x40020428
 8002660:	40020440 	.word	0x40020440
 8002664:	40020458 	.word	0x40020458
 8002668:	40020470 	.word	0x40020470
 800266c:	40020488 	.word	0x40020488
 8002670:	400204a0 	.word	0x400204a0
 8002674:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 020e 	bic.w	r2, r3, #14
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 020a 	orr.w	r2, r2, #10
 800268a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0204 	orr.w	r2, r2, #4
 80026a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a83      	ldr	r2, [pc, #524]	@ (80028b8 <HAL_DMA_Start_IT+0x474>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d072      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a82      	ldr	r2, [pc, #520]	@ (80028bc <HAL_DMA_Start_IT+0x478>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d06d      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a80      	ldr	r2, [pc, #512]	@ (80028c0 <HAL_DMA_Start_IT+0x47c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d068      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7f      	ldr	r2, [pc, #508]	@ (80028c4 <HAL_DMA_Start_IT+0x480>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d063      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a7d      	ldr	r2, [pc, #500]	@ (80028c8 <HAL_DMA_Start_IT+0x484>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d05e      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7c      	ldr	r2, [pc, #496]	@ (80028cc <HAL_DMA_Start_IT+0x488>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d059      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a7a      	ldr	r2, [pc, #488]	@ (80028d0 <HAL_DMA_Start_IT+0x48c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d054      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a79      	ldr	r2, [pc, #484]	@ (80028d4 <HAL_DMA_Start_IT+0x490>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d04f      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a77      	ldr	r2, [pc, #476]	@ (80028d8 <HAL_DMA_Start_IT+0x494>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d04a      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a76      	ldr	r2, [pc, #472]	@ (80028dc <HAL_DMA_Start_IT+0x498>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d045      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a74      	ldr	r2, [pc, #464]	@ (80028e0 <HAL_DMA_Start_IT+0x49c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d040      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a73      	ldr	r2, [pc, #460]	@ (80028e4 <HAL_DMA_Start_IT+0x4a0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d03b      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a71      	ldr	r2, [pc, #452]	@ (80028e8 <HAL_DMA_Start_IT+0x4a4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d036      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a70      	ldr	r2, [pc, #448]	@ (80028ec <HAL_DMA_Start_IT+0x4a8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d031      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6e      	ldr	r2, [pc, #440]	@ (80028f0 <HAL_DMA_Start_IT+0x4ac>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02c      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6d      	ldr	r2, [pc, #436]	@ (80028f4 <HAL_DMA_Start_IT+0x4b0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d027      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6b      	ldr	r2, [pc, #428]	@ (80028f8 <HAL_DMA_Start_IT+0x4b4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d022      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6a      	ldr	r2, [pc, #424]	@ (80028fc <HAL_DMA_Start_IT+0x4b8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d01d      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a68      	ldr	r2, [pc, #416]	@ (8002900 <HAL_DMA_Start_IT+0x4bc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d018      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a67      	ldr	r2, [pc, #412]	@ (8002904 <HAL_DMA_Start_IT+0x4c0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d013      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a65      	ldr	r2, [pc, #404]	@ (8002908 <HAL_DMA_Start_IT+0x4c4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00e      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a64      	ldr	r2, [pc, #400]	@ (800290c <HAL_DMA_Start_IT+0x4c8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d009      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a62      	ldr	r2, [pc, #392]	@ (8002910 <HAL_DMA_Start_IT+0x4cc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <HAL_DMA_Start_IT+0x350>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a61      	ldr	r2, [pc, #388]	@ (8002914 <HAL_DMA_Start_IT+0x4d0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d101      	bne.n	8002798 <HAL_DMA_Start_IT+0x354>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_DMA_Start_IT+0x356>
 8002798:	2300      	movs	r3, #0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01a      	beq.n	80027d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a37      	ldr	r2, [pc, #220]	@ (80028b8 <HAL_DMA_Start_IT+0x474>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d04a      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a36      	ldr	r2, [pc, #216]	@ (80028bc <HAL_DMA_Start_IT+0x478>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d045      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a34      	ldr	r2, [pc, #208]	@ (80028c0 <HAL_DMA_Start_IT+0x47c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d040      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a33      	ldr	r2, [pc, #204]	@ (80028c4 <HAL_DMA_Start_IT+0x480>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d03b      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a31      	ldr	r2, [pc, #196]	@ (80028c8 <HAL_DMA_Start_IT+0x484>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d036      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a30      	ldr	r2, [pc, #192]	@ (80028cc <HAL_DMA_Start_IT+0x488>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d031      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2e      	ldr	r2, [pc, #184]	@ (80028d0 <HAL_DMA_Start_IT+0x48c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d02c      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2d      	ldr	r2, [pc, #180]	@ (80028d4 <HAL_DMA_Start_IT+0x490>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d027      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2b      	ldr	r2, [pc, #172]	@ (80028d8 <HAL_DMA_Start_IT+0x494>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d022      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2a      	ldr	r2, [pc, #168]	@ (80028dc <HAL_DMA_Start_IT+0x498>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d01d      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a28      	ldr	r2, [pc, #160]	@ (80028e0 <HAL_DMA_Start_IT+0x49c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d018      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a27      	ldr	r2, [pc, #156]	@ (80028e4 <HAL_DMA_Start_IT+0x4a0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a25      	ldr	r2, [pc, #148]	@ (80028e8 <HAL_DMA_Start_IT+0x4a4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a24      	ldr	r2, [pc, #144]	@ (80028ec <HAL_DMA_Start_IT+0x4a8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a22      	ldr	r2, [pc, #136]	@ (80028f0 <HAL_DMA_Start_IT+0x4ac>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_DMA_Start_IT+0x430>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a21      	ldr	r2, [pc, #132]	@ (80028f4 <HAL_DMA_Start_IT+0x4b0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d108      	bne.n	8002886 <HAL_DMA_Start_IT+0x442>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e012      	b.n	80028ac <HAL_DMA_Start_IT+0x468>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e009      	b.n	80028ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40020010 	.word	0x40020010
 80028bc:	40020028 	.word	0x40020028
 80028c0:	40020040 	.word	0x40020040
 80028c4:	40020058 	.word	0x40020058
 80028c8:	40020070 	.word	0x40020070
 80028cc:	40020088 	.word	0x40020088
 80028d0:	400200a0 	.word	0x400200a0
 80028d4:	400200b8 	.word	0x400200b8
 80028d8:	40020410 	.word	0x40020410
 80028dc:	40020428 	.word	0x40020428
 80028e0:	40020440 	.word	0x40020440
 80028e4:	40020458 	.word	0x40020458
 80028e8:	40020470 	.word	0x40020470
 80028ec:	40020488 	.word	0x40020488
 80028f0:	400204a0 	.word	0x400204a0
 80028f4:	400204b8 	.word	0x400204b8
 80028f8:	58025408 	.word	0x58025408
 80028fc:	5802541c 	.word	0x5802541c
 8002900:	58025430 	.word	0x58025430
 8002904:	58025444 	.word	0x58025444
 8002908:	58025458 	.word	0x58025458
 800290c:	5802546c 	.word	0x5802546c
 8002910:	58025480 	.word	0x58025480
 8002914:	58025494 	.word	0x58025494

08002918 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff f880 	bl	8001a24 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e2dc      	b.n	8002eea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d008      	beq.n	800294e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2280      	movs	r2, #128	@ 0x80
 8002940:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e2cd      	b.n	8002eea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a76      	ldr	r2, [pc, #472]	@ (8002b2c <HAL_DMA_Abort+0x214>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d04a      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a74      	ldr	r2, [pc, #464]	@ (8002b30 <HAL_DMA_Abort+0x218>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d045      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a73      	ldr	r2, [pc, #460]	@ (8002b34 <HAL_DMA_Abort+0x21c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d040      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a71      	ldr	r2, [pc, #452]	@ (8002b38 <HAL_DMA_Abort+0x220>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d03b      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a70      	ldr	r2, [pc, #448]	@ (8002b3c <HAL_DMA_Abort+0x224>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d036      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a6e      	ldr	r2, [pc, #440]	@ (8002b40 <HAL_DMA_Abort+0x228>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d031      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6d      	ldr	r2, [pc, #436]	@ (8002b44 <HAL_DMA_Abort+0x22c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d02c      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6b      	ldr	r2, [pc, #428]	@ (8002b48 <HAL_DMA_Abort+0x230>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d027      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a6a      	ldr	r2, [pc, #424]	@ (8002b4c <HAL_DMA_Abort+0x234>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a68      	ldr	r2, [pc, #416]	@ (8002b50 <HAL_DMA_Abort+0x238>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01d      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a67      	ldr	r2, [pc, #412]	@ (8002b54 <HAL_DMA_Abort+0x23c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d018      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a65      	ldr	r2, [pc, #404]	@ (8002b58 <HAL_DMA_Abort+0x240>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a64      	ldr	r2, [pc, #400]	@ (8002b5c <HAL_DMA_Abort+0x244>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00e      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a62      	ldr	r2, [pc, #392]	@ (8002b60 <HAL_DMA_Abort+0x248>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d009      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a61      	ldr	r2, [pc, #388]	@ (8002b64 <HAL_DMA_Abort+0x24c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d004      	beq.n	80029ee <HAL_DMA_Abort+0xd6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002b68 <HAL_DMA_Abort+0x250>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_DMA_Abort+0xda>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_DMA_Abort+0xdc>
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 021e 	bic.w	r2, r2, #30
 8002a06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e00a      	b.n	8002a36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 020e 	bic.w	r2, r2, #14
 8002a2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b2c <HAL_DMA_Abort+0x214>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d072      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a3a      	ldr	r2, [pc, #232]	@ (8002b30 <HAL_DMA_Abort+0x218>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d06d      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a39      	ldr	r2, [pc, #228]	@ (8002b34 <HAL_DMA_Abort+0x21c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d068      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a37      	ldr	r2, [pc, #220]	@ (8002b38 <HAL_DMA_Abort+0x220>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d063      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a36      	ldr	r2, [pc, #216]	@ (8002b3c <HAL_DMA_Abort+0x224>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d05e      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a34      	ldr	r2, [pc, #208]	@ (8002b40 <HAL_DMA_Abort+0x228>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d059      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a33      	ldr	r2, [pc, #204]	@ (8002b44 <HAL_DMA_Abort+0x22c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d054      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a31      	ldr	r2, [pc, #196]	@ (8002b48 <HAL_DMA_Abort+0x230>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d04f      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a30      	ldr	r2, [pc, #192]	@ (8002b4c <HAL_DMA_Abort+0x234>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d04a      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2e      	ldr	r2, [pc, #184]	@ (8002b50 <HAL_DMA_Abort+0x238>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d045      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b54 <HAL_DMA_Abort+0x23c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d040      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8002b58 <HAL_DMA_Abort+0x240>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d03b      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b5c <HAL_DMA_Abort+0x244>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d036      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a28      	ldr	r2, [pc, #160]	@ (8002b60 <HAL_DMA_Abort+0x248>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d031      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a27      	ldr	r2, [pc, #156]	@ (8002b64 <HAL_DMA_Abort+0x24c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d02c      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a25      	ldr	r2, [pc, #148]	@ (8002b68 <HAL_DMA_Abort+0x250>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d027      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a24      	ldr	r2, [pc, #144]	@ (8002b6c <HAL_DMA_Abort+0x254>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a22      	ldr	r2, [pc, #136]	@ (8002b70 <HAL_DMA_Abort+0x258>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01d      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a21      	ldr	r2, [pc, #132]	@ (8002b74 <HAL_DMA_Abort+0x25c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d018      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <HAL_DMA_Abort+0x260>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1e      	ldr	r2, [pc, #120]	@ (8002b7c <HAL_DMA_Abort+0x264>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00e      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <HAL_DMA_Abort+0x268>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1b      	ldr	r2, [pc, #108]	@ (8002b84 <HAL_DMA_Abort+0x26c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_DMA_Abort+0x20e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a19      	ldr	r2, [pc, #100]	@ (8002b88 <HAL_DMA_Abort+0x270>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d132      	bne.n	8002b8c <HAL_DMA_Abort+0x274>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e031      	b.n	8002b8e <HAL_DMA_Abort+0x276>
 8002b2a:	bf00      	nop
 8002b2c:	40020010 	.word	0x40020010
 8002b30:	40020028 	.word	0x40020028
 8002b34:	40020040 	.word	0x40020040
 8002b38:	40020058 	.word	0x40020058
 8002b3c:	40020070 	.word	0x40020070
 8002b40:	40020088 	.word	0x40020088
 8002b44:	400200a0 	.word	0x400200a0
 8002b48:	400200b8 	.word	0x400200b8
 8002b4c:	40020410 	.word	0x40020410
 8002b50:	40020428 	.word	0x40020428
 8002b54:	40020440 	.word	0x40020440
 8002b58:	40020458 	.word	0x40020458
 8002b5c:	40020470 	.word	0x40020470
 8002b60:	40020488 	.word	0x40020488
 8002b64:	400204a0 	.word	0x400204a0
 8002b68:	400204b8 	.word	0x400204b8
 8002b6c:	58025408 	.word	0x58025408
 8002b70:	5802541c 	.word	0x5802541c
 8002b74:	58025430 	.word	0x58025430
 8002b78:	58025444 	.word	0x58025444
 8002b7c:	58025458 	.word	0x58025458
 8002b80:	5802546c 	.word	0x5802546c
 8002b84:	58025480 	.word	0x58025480
 8002b88:	58025494 	.word	0x58025494
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8002d5c <HAL_DMA_Abort+0x444>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d04a      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8002d60 <HAL_DMA_Abort+0x448>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d045      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a6a      	ldr	r2, [pc, #424]	@ (8002d64 <HAL_DMA_Abort+0x44c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d040      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a68      	ldr	r2, [pc, #416]	@ (8002d68 <HAL_DMA_Abort+0x450>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d03b      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a67      	ldr	r2, [pc, #412]	@ (8002d6c <HAL_DMA_Abort+0x454>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d036      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a65      	ldr	r2, [pc, #404]	@ (8002d70 <HAL_DMA_Abort+0x458>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d031      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a64      	ldr	r2, [pc, #400]	@ (8002d74 <HAL_DMA_Abort+0x45c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d02c      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a62      	ldr	r2, [pc, #392]	@ (8002d78 <HAL_DMA_Abort+0x460>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d027      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a61      	ldr	r2, [pc, #388]	@ (8002d7c <HAL_DMA_Abort+0x464>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d022      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a5f      	ldr	r2, [pc, #380]	@ (8002d80 <HAL_DMA_Abort+0x468>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01d      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002d84 <HAL_DMA_Abort+0x46c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d018      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5c      	ldr	r2, [pc, #368]	@ (8002d88 <HAL_DMA_Abort+0x470>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8002d8c <HAL_DMA_Abort+0x474>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00e      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a59      	ldr	r2, [pc, #356]	@ (8002d90 <HAL_DMA_Abort+0x478>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a58      	ldr	r2, [pc, #352]	@ (8002d94 <HAL_DMA_Abort+0x47c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_DMA_Abort+0x32a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a56      	ldr	r2, [pc, #344]	@ (8002d98 <HAL_DMA_Abort+0x480>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <HAL_DMA_Abort+0x33c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e007      	b.n	8002c64 <HAL_DMA_Abort+0x34c>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c64:	e013      	b.n	8002c8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c66:	f7fe fedd 	bl	8001a24 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d90c      	bls.n	8002c8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e12d      	b.n	8002eea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e5      	bne.n	8002c66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d5c <HAL_DMA_Abort+0x444>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d04a      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8002d60 <HAL_DMA_Abort+0x448>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d045      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d64 <HAL_DMA_Abort+0x44c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d040      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002d68 <HAL_DMA_Abort+0x450>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d03b      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a29      	ldr	r2, [pc, #164]	@ (8002d6c <HAL_DMA_Abort+0x454>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d036      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a27      	ldr	r2, [pc, #156]	@ (8002d70 <HAL_DMA_Abort+0x458>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d031      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a26      	ldr	r2, [pc, #152]	@ (8002d74 <HAL_DMA_Abort+0x45c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d02c      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a24      	ldr	r2, [pc, #144]	@ (8002d78 <HAL_DMA_Abort+0x460>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d027      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <HAL_DMA_Abort+0x464>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a21      	ldr	r2, [pc, #132]	@ (8002d80 <HAL_DMA_Abort+0x468>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01d      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a20      	ldr	r2, [pc, #128]	@ (8002d84 <HAL_DMA_Abort+0x46c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d018      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <HAL_DMA_Abort+0x470>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <HAL_DMA_Abort+0x474>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00e      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1b      	ldr	r2, [pc, #108]	@ (8002d90 <HAL_DMA_Abort+0x478>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d009      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d94 <HAL_DMA_Abort+0x47c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d004      	beq.n	8002d3a <HAL_DMA_Abort+0x422>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a18      	ldr	r2, [pc, #96]	@ (8002d98 <HAL_DMA_Abort+0x480>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_DMA_Abort+0x426>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_DMA_Abort+0x428>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d02b      	beq.n	8002d9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	223f      	movs	r2, #63	@ 0x3f
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	e02a      	b.n	8002db2 <HAL_DMA_Abort+0x49a>
 8002d5c:	40020010 	.word	0x40020010
 8002d60:	40020028 	.word	0x40020028
 8002d64:	40020040 	.word	0x40020040
 8002d68:	40020058 	.word	0x40020058
 8002d6c:	40020070 	.word	0x40020070
 8002d70:	40020088 	.word	0x40020088
 8002d74:	400200a0 	.word	0x400200a0
 8002d78:	400200b8 	.word	0x400200b8
 8002d7c:	40020410 	.word	0x40020410
 8002d80:	40020428 	.word	0x40020428
 8002d84:	40020440 	.word	0x40020440
 8002d88:	40020458 	.word	0x40020458
 8002d8c:	40020470 	.word	0x40020470
 8002d90:	40020488 	.word	0x40020488
 8002d94:	400204a0 	.word	0x400204a0
 8002d98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	2201      	movs	r2, #1
 8002dac:	409a      	lsls	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a4f      	ldr	r2, [pc, #316]	@ (8002ef4 <HAL_DMA_Abort+0x5dc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d072      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ef8 <HAL_DMA_Abort+0x5e0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d06d      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a4c      	ldr	r2, [pc, #304]	@ (8002efc <HAL_DMA_Abort+0x5e4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d068      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8002f00 <HAL_DMA_Abort+0x5e8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d063      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a49      	ldr	r2, [pc, #292]	@ (8002f04 <HAL_DMA_Abort+0x5ec>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d05e      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a47      	ldr	r2, [pc, #284]	@ (8002f08 <HAL_DMA_Abort+0x5f0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d059      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a46      	ldr	r2, [pc, #280]	@ (8002f0c <HAL_DMA_Abort+0x5f4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d054      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a44      	ldr	r2, [pc, #272]	@ (8002f10 <HAL_DMA_Abort+0x5f8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d04f      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a43      	ldr	r2, [pc, #268]	@ (8002f14 <HAL_DMA_Abort+0x5fc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04a      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a41      	ldr	r2, [pc, #260]	@ (8002f18 <HAL_DMA_Abort+0x600>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d045      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a40      	ldr	r2, [pc, #256]	@ (8002f1c <HAL_DMA_Abort+0x604>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d040      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3e      	ldr	r2, [pc, #248]	@ (8002f20 <HAL_DMA_Abort+0x608>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d03b      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f24 <HAL_DMA_Abort+0x60c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d036      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3b      	ldr	r2, [pc, #236]	@ (8002f28 <HAL_DMA_Abort+0x610>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a3a      	ldr	r2, [pc, #232]	@ (8002f2c <HAL_DMA_Abort+0x614>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d02c      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a38      	ldr	r2, [pc, #224]	@ (8002f30 <HAL_DMA_Abort+0x618>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d027      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a37      	ldr	r2, [pc, #220]	@ (8002f34 <HAL_DMA_Abort+0x61c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a35      	ldr	r2, [pc, #212]	@ (8002f38 <HAL_DMA_Abort+0x620>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a34      	ldr	r2, [pc, #208]	@ (8002f3c <HAL_DMA_Abort+0x624>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d018      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a32      	ldr	r2, [pc, #200]	@ (8002f40 <HAL_DMA_Abort+0x628>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a31      	ldr	r2, [pc, #196]	@ (8002f44 <HAL_DMA_Abort+0x62c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2f      	ldr	r2, [pc, #188]	@ (8002f48 <HAL_DMA_Abort+0x630>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2e      	ldr	r2, [pc, #184]	@ (8002f4c <HAL_DMA_Abort+0x634>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_Abort+0x58a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f50 <HAL_DMA_Abort+0x638>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DMA_Abort+0x58e>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_DMA_Abort+0x590>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d015      	beq.n	8002ed8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002eb4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ed6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40020010 	.word	0x40020010
 8002ef8:	40020028 	.word	0x40020028
 8002efc:	40020040 	.word	0x40020040
 8002f00:	40020058 	.word	0x40020058
 8002f04:	40020070 	.word	0x40020070
 8002f08:	40020088 	.word	0x40020088
 8002f0c:	400200a0 	.word	0x400200a0
 8002f10:	400200b8 	.word	0x400200b8
 8002f14:	40020410 	.word	0x40020410
 8002f18:	40020428 	.word	0x40020428
 8002f1c:	40020440 	.word	0x40020440
 8002f20:	40020458 	.word	0x40020458
 8002f24:	40020470 	.word	0x40020470
 8002f28:	40020488 	.word	0x40020488
 8002f2c:	400204a0 	.word	0x400204a0
 8002f30:	400204b8 	.word	0x400204b8
 8002f34:	58025408 	.word	0x58025408
 8002f38:	5802541c 	.word	0x5802541c
 8002f3c:	58025430 	.word	0x58025430
 8002f40:	58025444 	.word	0x58025444
 8002f44:	58025458 	.word	0x58025458
 8002f48:	5802546c 	.word	0x5802546c
 8002f4c:	58025480 	.word	0x58025480
 8002f50:	58025494 	.word	0x58025494

08002f54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e237      	b.n	80033d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d004      	beq.n	8002f7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2280      	movs	r2, #128	@ 0x80
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e22c      	b.n	80033d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a5c      	ldr	r2, [pc, #368]	@ (80030f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d04a      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80030f8 <HAL_DMA_Abort_IT+0x1a4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d045      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a59      	ldr	r2, [pc, #356]	@ (80030fc <HAL_DMA_Abort_IT+0x1a8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d040      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a58      	ldr	r2, [pc, #352]	@ (8003100 <HAL_DMA_Abort_IT+0x1ac>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d03b      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a56      	ldr	r2, [pc, #344]	@ (8003104 <HAL_DMA_Abort_IT+0x1b0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d036      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a55      	ldr	r2, [pc, #340]	@ (8003108 <HAL_DMA_Abort_IT+0x1b4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d031      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a53      	ldr	r2, [pc, #332]	@ (800310c <HAL_DMA_Abort_IT+0x1b8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02c      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a52      	ldr	r2, [pc, #328]	@ (8003110 <HAL_DMA_Abort_IT+0x1bc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d027      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a50      	ldr	r2, [pc, #320]	@ (8003114 <HAL_DMA_Abort_IT+0x1c0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a4f      	ldr	r2, [pc, #316]	@ (8003118 <HAL_DMA_Abort_IT+0x1c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d01d      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800311c <HAL_DMA_Abort_IT+0x1c8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d018      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a4c      	ldr	r2, [pc, #304]	@ (8003120 <HAL_DMA_Abort_IT+0x1cc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d013      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8003124 <HAL_DMA_Abort_IT+0x1d0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00e      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a49      	ldr	r2, [pc, #292]	@ (8003128 <HAL_DMA_Abort_IT+0x1d4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a47      	ldr	r2, [pc, #284]	@ (800312c <HAL_DMA_Abort_IT+0x1d8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_DMA_Abort_IT+0xc8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a46      	ldr	r2, [pc, #280]	@ (8003130 <HAL_DMA_Abort_IT+0x1dc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Abort_IT+0xcc>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_DMA_Abort_IT+0xce>
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8086 	beq.w	8003134 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2204      	movs	r2, #4
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2f      	ldr	r2, [pc, #188]	@ (80030f4 <HAL_DMA_Abort_IT+0x1a0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d04a      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2e      	ldr	r2, [pc, #184]	@ (80030f8 <HAL_DMA_Abort_IT+0x1a4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d045      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2c      	ldr	r2, [pc, #176]	@ (80030fc <HAL_DMA_Abort_IT+0x1a8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d040      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2b      	ldr	r2, [pc, #172]	@ (8003100 <HAL_DMA_Abort_IT+0x1ac>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d03b      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a29      	ldr	r2, [pc, #164]	@ (8003104 <HAL_DMA_Abort_IT+0x1b0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d036      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a28      	ldr	r2, [pc, #160]	@ (8003108 <HAL_DMA_Abort_IT+0x1b4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d031      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a26      	ldr	r2, [pc, #152]	@ (800310c <HAL_DMA_Abort_IT+0x1b8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d02c      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a25      	ldr	r2, [pc, #148]	@ (8003110 <HAL_DMA_Abort_IT+0x1bc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d027      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a23      	ldr	r2, [pc, #140]	@ (8003114 <HAL_DMA_Abort_IT+0x1c0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d022      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a22      	ldr	r2, [pc, #136]	@ (8003118 <HAL_DMA_Abort_IT+0x1c4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d01d      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a20      	ldr	r2, [pc, #128]	@ (800311c <HAL_DMA_Abort_IT+0x1c8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d018      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003120 <HAL_DMA_Abort_IT+0x1cc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <HAL_DMA_Abort_IT+0x1d0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00e      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003128 <HAL_DMA_Abort_IT+0x1d4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1a      	ldr	r2, [pc, #104]	@ (800312c <HAL_DMA_Abort_IT+0x1d8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a19      	ldr	r2, [pc, #100]	@ (8003130 <HAL_DMA_Abort_IT+0x1dc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d108      	bne.n	80030e2 <HAL_DMA_Abort_IT+0x18e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e178      	b.n	80033d4 <HAL_DMA_Abort_IT+0x480>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e16f      	b.n	80033d4 <HAL_DMA_Abort_IT+0x480>
 80030f4:	40020010 	.word	0x40020010
 80030f8:	40020028 	.word	0x40020028
 80030fc:	40020040 	.word	0x40020040
 8003100:	40020058 	.word	0x40020058
 8003104:	40020070 	.word	0x40020070
 8003108:	40020088 	.word	0x40020088
 800310c:	400200a0 	.word	0x400200a0
 8003110:	400200b8 	.word	0x400200b8
 8003114:	40020410 	.word	0x40020410
 8003118:	40020428 	.word	0x40020428
 800311c:	40020440 	.word	0x40020440
 8003120:	40020458 	.word	0x40020458
 8003124:	40020470 	.word	0x40020470
 8003128:	40020488 	.word	0x40020488
 800312c:	400204a0 	.word	0x400204a0
 8003130:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 020e 	bic.w	r2, r2, #14
 8003142:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6c      	ldr	r2, [pc, #432]	@ (80032fc <HAL_DMA_Abort_IT+0x3a8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d04a      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6b      	ldr	r2, [pc, #428]	@ (8003300 <HAL_DMA_Abort_IT+0x3ac>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d045      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a69      	ldr	r2, [pc, #420]	@ (8003304 <HAL_DMA_Abort_IT+0x3b0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d040      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a68      	ldr	r2, [pc, #416]	@ (8003308 <HAL_DMA_Abort_IT+0x3b4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d03b      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a66      	ldr	r2, [pc, #408]	@ (800330c <HAL_DMA_Abort_IT+0x3b8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d036      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a65      	ldr	r2, [pc, #404]	@ (8003310 <HAL_DMA_Abort_IT+0x3bc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d031      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a63      	ldr	r2, [pc, #396]	@ (8003314 <HAL_DMA_Abort_IT+0x3c0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d02c      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a62      	ldr	r2, [pc, #392]	@ (8003318 <HAL_DMA_Abort_IT+0x3c4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d027      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a60      	ldr	r2, [pc, #384]	@ (800331c <HAL_DMA_Abort_IT+0x3c8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d022      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003320 <HAL_DMA_Abort_IT+0x3cc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d01d      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003324 <HAL_DMA_Abort_IT+0x3d0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d018      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003328 <HAL_DMA_Abort_IT+0x3d4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d013      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a5a      	ldr	r2, [pc, #360]	@ (800332c <HAL_DMA_Abort_IT+0x3d8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00e      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a59      	ldr	r2, [pc, #356]	@ (8003330 <HAL_DMA_Abort_IT+0x3dc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d009      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a57      	ldr	r2, [pc, #348]	@ (8003334 <HAL_DMA_Abort_IT+0x3e0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x290>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a56      	ldr	r2, [pc, #344]	@ (8003338 <HAL_DMA_Abort_IT+0x3e4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d108      	bne.n	80031f6 <HAL_DMA_Abort_IT+0x2a2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e007      	b.n	8003206 <HAL_DMA_Abort_IT+0x2b2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3c      	ldr	r2, [pc, #240]	@ (80032fc <HAL_DMA_Abort_IT+0x3a8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d072      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a3a      	ldr	r2, [pc, #232]	@ (8003300 <HAL_DMA_Abort_IT+0x3ac>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d06d      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a39      	ldr	r2, [pc, #228]	@ (8003304 <HAL_DMA_Abort_IT+0x3b0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d068      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a37      	ldr	r2, [pc, #220]	@ (8003308 <HAL_DMA_Abort_IT+0x3b4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d063      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a36      	ldr	r2, [pc, #216]	@ (800330c <HAL_DMA_Abort_IT+0x3b8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d05e      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a34      	ldr	r2, [pc, #208]	@ (8003310 <HAL_DMA_Abort_IT+0x3bc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d059      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a33      	ldr	r2, [pc, #204]	@ (8003314 <HAL_DMA_Abort_IT+0x3c0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d054      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a31      	ldr	r2, [pc, #196]	@ (8003318 <HAL_DMA_Abort_IT+0x3c4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d04f      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a30      	ldr	r2, [pc, #192]	@ (800331c <HAL_DMA_Abort_IT+0x3c8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d04a      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2e      	ldr	r2, [pc, #184]	@ (8003320 <HAL_DMA_Abort_IT+0x3cc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d045      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2d      	ldr	r2, [pc, #180]	@ (8003324 <HAL_DMA_Abort_IT+0x3d0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d040      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a2b      	ldr	r2, [pc, #172]	@ (8003328 <HAL_DMA_Abort_IT+0x3d4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d03b      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2a      	ldr	r2, [pc, #168]	@ (800332c <HAL_DMA_Abort_IT+0x3d8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d036      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a28      	ldr	r2, [pc, #160]	@ (8003330 <HAL_DMA_Abort_IT+0x3dc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d031      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a27      	ldr	r2, [pc, #156]	@ (8003334 <HAL_DMA_Abort_IT+0x3e0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d02c      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a25      	ldr	r2, [pc, #148]	@ (8003338 <HAL_DMA_Abort_IT+0x3e4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d027      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a24      	ldr	r2, [pc, #144]	@ (800333c <HAL_DMA_Abort_IT+0x3e8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a22      	ldr	r2, [pc, #136]	@ (8003340 <HAL_DMA_Abort_IT+0x3ec>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a21      	ldr	r2, [pc, #132]	@ (8003344 <HAL_DMA_Abort_IT+0x3f0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <HAL_DMA_Abort_IT+0x3f4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_DMA_Abort_IT+0x3f8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003350 <HAL_DMA_Abort_IT+0x3fc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003354 <HAL_DMA_Abort_IT+0x400>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x3a2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a19      	ldr	r2, [pc, #100]	@ (8003358 <HAL_DMA_Abort_IT+0x404>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d132      	bne.n	800335c <HAL_DMA_Abort_IT+0x408>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e031      	b.n	800335e <HAL_DMA_Abort_IT+0x40a>
 80032fa:	bf00      	nop
 80032fc:	40020010 	.word	0x40020010
 8003300:	40020028 	.word	0x40020028
 8003304:	40020040 	.word	0x40020040
 8003308:	40020058 	.word	0x40020058
 800330c:	40020070 	.word	0x40020070
 8003310:	40020088 	.word	0x40020088
 8003314:	400200a0 	.word	0x400200a0
 8003318:	400200b8 	.word	0x400200b8
 800331c:	40020410 	.word	0x40020410
 8003320:	40020428 	.word	0x40020428
 8003324:	40020440 	.word	0x40020440
 8003328:	40020458 	.word	0x40020458
 800332c:	40020470 	.word	0x40020470
 8003330:	40020488 	.word	0x40020488
 8003334:	400204a0 	.word	0x400204a0
 8003338:	400204b8 	.word	0x400204b8
 800333c:	58025408 	.word	0x58025408
 8003340:	5802541c 	.word	0x5802541c
 8003344:	58025430 	.word	0x58025430
 8003348:	58025444 	.word	0x58025444
 800334c:	58025458 	.word	0x58025458
 8003350:	5802546c 	.word	0x5802546c
 8003354:	58025480 	.word	0x58025480
 8003358:	58025494 	.word	0x58025494
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d028      	beq.n	80033b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003370:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003390:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop

080033e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	@ 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033ec:	4b67      	ldr	r3, [pc, #412]	@ (800358c <HAL_DMA_IRQHandler+0x1ac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a67      	ldr	r2, [pc, #412]	@ (8003590 <HAL_DMA_IRQHandler+0x1b0>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0a9b      	lsrs	r3, r3, #10
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a5f      	ldr	r2, [pc, #380]	@ (8003594 <HAL_DMA_IRQHandler+0x1b4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d04a      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a5d      	ldr	r2, [pc, #372]	@ (8003598 <HAL_DMA_IRQHandler+0x1b8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d045      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a5c      	ldr	r2, [pc, #368]	@ (800359c <HAL_DMA_IRQHandler+0x1bc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d040      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a5a      	ldr	r2, [pc, #360]	@ (80035a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d03b      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a59      	ldr	r2, [pc, #356]	@ (80035a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d036      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a57      	ldr	r2, [pc, #348]	@ (80035a8 <HAL_DMA_IRQHandler+0x1c8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d031      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a56      	ldr	r2, [pc, #344]	@ (80035ac <HAL_DMA_IRQHandler+0x1cc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d02c      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a54      	ldr	r2, [pc, #336]	@ (80035b0 <HAL_DMA_IRQHandler+0x1d0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d027      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a53      	ldr	r2, [pc, #332]	@ (80035b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d022      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a51      	ldr	r2, [pc, #324]	@ (80035b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01d      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a50      	ldr	r2, [pc, #320]	@ (80035bc <HAL_DMA_IRQHandler+0x1dc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d018      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a4e      	ldr	r2, [pc, #312]	@ (80035c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a4d      	ldr	r2, [pc, #308]	@ (80035c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00e      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a4b      	ldr	r2, [pc, #300]	@ (80035c8 <HAL_DMA_IRQHandler+0x1e8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4a      	ldr	r2, [pc, #296]	@ (80035cc <HAL_DMA_IRQHandler+0x1ec>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xd2>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a48      	ldr	r2, [pc, #288]	@ (80035d0 <HAL_DMA_IRQHandler+0x1f0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_DMA_IRQHandler+0xd6>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_DMA_IRQHandler+0xd8>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 842b 	beq.w	8003d14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	2208      	movs	r2, #8
 80034c8:	409a      	lsls	r2, r3
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80a2 	beq.w	8003618 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003594 <HAL_DMA_IRQHandler+0x1b4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04a      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003598 <HAL_DMA_IRQHandler+0x1b8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d045      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2b      	ldr	r2, [pc, #172]	@ (800359c <HAL_DMA_IRQHandler+0x1bc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d040      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2a      	ldr	r2, [pc, #168]	@ (80035a0 <HAL_DMA_IRQHandler+0x1c0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03b      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a28      	ldr	r2, [pc, #160]	@ (80035a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d036      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a27      	ldr	r2, [pc, #156]	@ (80035a8 <HAL_DMA_IRQHandler+0x1c8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d031      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a25      	ldr	r2, [pc, #148]	@ (80035ac <HAL_DMA_IRQHandler+0x1cc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02c      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a24      	ldr	r2, [pc, #144]	@ (80035b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a22      	ldr	r2, [pc, #136]	@ (80035b4 <HAL_DMA_IRQHandler+0x1d4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a21      	ldr	r2, [pc, #132]	@ (80035b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01d      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1f      	ldr	r2, [pc, #124]	@ (80035bc <HAL_DMA_IRQHandler+0x1dc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1e      	ldr	r2, [pc, #120]	@ (80035c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1c      	ldr	r2, [pc, #112]	@ (80035c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1b      	ldr	r2, [pc, #108]	@ (80035c8 <HAL_DMA_IRQHandler+0x1e8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <HAL_DMA_IRQHandler+0x1ec>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_DMA_IRQHandler+0x194>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a18      	ldr	r2, [pc, #96]	@ (80035d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d12f      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x1f4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	e02e      	b.n	80035e8 <HAL_DMA_IRQHandler+0x208>
 800358a:	bf00      	nop
 800358c:	24000000 	.word	0x24000000
 8003590:	1b4e81b5 	.word	0x1b4e81b5
 8003594:	40020010 	.word	0x40020010
 8003598:	40020028 	.word	0x40020028
 800359c:	40020040 	.word	0x40020040
 80035a0:	40020058 	.word	0x40020058
 80035a4:	40020070 	.word	0x40020070
 80035a8:	40020088 	.word	0x40020088
 80035ac:	400200a0 	.word	0x400200a0
 80035b0:	400200b8 	.word	0x400200b8
 80035b4:	40020410 	.word	0x40020410
 80035b8:	40020428 	.word	0x40020428
 80035bc:	40020440 	.word	0x40020440
 80035c0:	40020458 	.word	0x40020458
 80035c4:	40020470 	.word	0x40020470
 80035c8:	40020488 	.word	0x40020488
 80035cc:	400204a0 	.word	0x400204a0
 80035d0:	400204b8 	.word	0x400204b8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bf14      	ite	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	2300      	moveq	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0204 	bic.w	r2, r2, #4
 80035fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2208      	movs	r2, #8
 8003606:	409a      	lsls	r2, r3
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	fa22 f303 	lsr.w	r3, r2, r3
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d06e      	beq.n	800370c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a69      	ldr	r2, [pc, #420]	@ (80037d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d04a      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a67      	ldr	r2, [pc, #412]	@ (80037dc <HAL_DMA_IRQHandler+0x3fc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d045      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a66      	ldr	r2, [pc, #408]	@ (80037e0 <HAL_DMA_IRQHandler+0x400>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d040      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a64      	ldr	r2, [pc, #400]	@ (80037e4 <HAL_DMA_IRQHandler+0x404>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d03b      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a63      	ldr	r2, [pc, #396]	@ (80037e8 <HAL_DMA_IRQHandler+0x408>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d036      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a61      	ldr	r2, [pc, #388]	@ (80037ec <HAL_DMA_IRQHandler+0x40c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d031      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a60      	ldr	r2, [pc, #384]	@ (80037f0 <HAL_DMA_IRQHandler+0x410>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d02c      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5e      	ldr	r2, [pc, #376]	@ (80037f4 <HAL_DMA_IRQHandler+0x414>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d027      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a5d      	ldr	r2, [pc, #372]	@ (80037f8 <HAL_DMA_IRQHandler+0x418>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a5b      	ldr	r2, [pc, #364]	@ (80037fc <HAL_DMA_IRQHandler+0x41c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01d      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a5a      	ldr	r2, [pc, #360]	@ (8003800 <HAL_DMA_IRQHandler+0x420>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d018      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a58      	ldr	r2, [pc, #352]	@ (8003804 <HAL_DMA_IRQHandler+0x424>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a57      	ldr	r2, [pc, #348]	@ (8003808 <HAL_DMA_IRQHandler+0x428>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a55      	ldr	r2, [pc, #340]	@ (800380c <HAL_DMA_IRQHandler+0x42c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a54      	ldr	r2, [pc, #336]	@ (8003810 <HAL_DMA_IRQHandler+0x430>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ee>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a52      	ldr	r2, [pc, #328]	@ (8003814 <HAL_DMA_IRQHandler+0x434>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d10a      	bne.n	80036e4 <HAL_DMA_IRQHandler+0x304>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	e003      	b.n	80036ec <HAL_DMA_IRQHandler+0x30c>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2201      	movs	r2, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003704:	f043 0202 	orr.w	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2204      	movs	r2, #4
 8003716:	409a      	lsls	r2, r3
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 808f 	beq.w	8003840 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2c      	ldr	r2, [pc, #176]	@ (80037d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d04a      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2a      	ldr	r2, [pc, #168]	@ (80037dc <HAL_DMA_IRQHandler+0x3fc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d045      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a29      	ldr	r2, [pc, #164]	@ (80037e0 <HAL_DMA_IRQHandler+0x400>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d040      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a27      	ldr	r2, [pc, #156]	@ (80037e4 <HAL_DMA_IRQHandler+0x404>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d03b      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a26      	ldr	r2, [pc, #152]	@ (80037e8 <HAL_DMA_IRQHandler+0x408>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d036      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a24      	ldr	r2, [pc, #144]	@ (80037ec <HAL_DMA_IRQHandler+0x40c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d031      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a23      	ldr	r2, [pc, #140]	@ (80037f0 <HAL_DMA_IRQHandler+0x410>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d02c      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a21      	ldr	r2, [pc, #132]	@ (80037f4 <HAL_DMA_IRQHandler+0x414>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d027      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a20      	ldr	r2, [pc, #128]	@ (80037f8 <HAL_DMA_IRQHandler+0x418>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1e      	ldr	r2, [pc, #120]	@ (80037fc <HAL_DMA_IRQHandler+0x41c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01d      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1d      	ldr	r2, [pc, #116]	@ (8003800 <HAL_DMA_IRQHandler+0x420>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d018      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1b      	ldr	r2, [pc, #108]	@ (8003804 <HAL_DMA_IRQHandler+0x424>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1a      	ldr	r2, [pc, #104]	@ (8003808 <HAL_DMA_IRQHandler+0x428>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a18      	ldr	r2, [pc, #96]	@ (800380c <HAL_DMA_IRQHandler+0x42c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a17      	ldr	r2, [pc, #92]	@ (8003810 <HAL_DMA_IRQHandler+0x430>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3e2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a15      	ldr	r2, [pc, #84]	@ (8003814 <HAL_DMA_IRQHandler+0x434>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d12a      	bne.n	8003818 <HAL_DMA_IRQHandler+0x438>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e023      	b.n	8003820 <HAL_DMA_IRQHandler+0x440>
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	2204      	movs	r2, #4
 800382e:	409a      	lsls	r2, r3
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003838:	f043 0204 	orr.w	r2, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2210      	movs	r2, #16
 800384a:	409a      	lsls	r2, r3
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a6 	beq.w	80039a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a85      	ldr	r2, [pc, #532]	@ (8003a70 <HAL_DMA_IRQHandler+0x690>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d04a      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a83      	ldr	r2, [pc, #524]	@ (8003a74 <HAL_DMA_IRQHandler+0x694>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d045      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a82      	ldr	r2, [pc, #520]	@ (8003a78 <HAL_DMA_IRQHandler+0x698>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d040      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a80      	ldr	r2, [pc, #512]	@ (8003a7c <HAL_DMA_IRQHandler+0x69c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d03b      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a7f      	ldr	r2, [pc, #508]	@ (8003a80 <HAL_DMA_IRQHandler+0x6a0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d036      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7d      	ldr	r2, [pc, #500]	@ (8003a84 <HAL_DMA_IRQHandler+0x6a4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d031      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7c      	ldr	r2, [pc, #496]	@ (8003a88 <HAL_DMA_IRQHandler+0x6a8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d02c      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7a      	ldr	r2, [pc, #488]	@ (8003a8c <HAL_DMA_IRQHandler+0x6ac>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d027      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a79      	ldr	r2, [pc, #484]	@ (8003a90 <HAL_DMA_IRQHandler+0x6b0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d022      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a77      	ldr	r2, [pc, #476]	@ (8003a94 <HAL_DMA_IRQHandler+0x6b4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01d      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a76      	ldr	r2, [pc, #472]	@ (8003a98 <HAL_DMA_IRQHandler+0x6b8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d018      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a74      	ldr	r2, [pc, #464]	@ (8003a9c <HAL_DMA_IRQHandler+0x6bc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a73      	ldr	r2, [pc, #460]	@ (8003aa0 <HAL_DMA_IRQHandler+0x6c0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00e      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a71      	ldr	r2, [pc, #452]	@ (8003aa4 <HAL_DMA_IRQHandler+0x6c4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a70      	ldr	r2, [pc, #448]	@ (8003aa8 <HAL_DMA_IRQHandler+0x6c8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x516>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6e      	ldr	r2, [pc, #440]	@ (8003aac <HAL_DMA_IRQHandler+0x6cc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10a      	bne.n	800390c <HAL_DMA_IRQHandler+0x52c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e009      	b.n	8003920 <HAL_DMA_IRQHandler+0x540>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf14      	ite	ne
 800391a:	2301      	movne	r3, #1
 800391c:	2300      	moveq	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d03e      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	2210      	movs	r2, #16
 800392e:	409a      	lsls	r2, r3
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d024      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8003960:	e01f      	b.n	80039a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01b      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
 8003972:	e016      	b.n	80039a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d107      	bne.n	8003992 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0208 	bic.w	r2, r2, #8
 8003990:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	2220      	movs	r2, #32
 80039ac:	409a      	lsls	r2, r3
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8110 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003a70 <HAL_DMA_IRQHandler+0x690>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d04a      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a74 <HAL_DMA_IRQHandler+0x694>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d045      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a29      	ldr	r2, [pc, #164]	@ (8003a78 <HAL_DMA_IRQHandler+0x698>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d040      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a28      	ldr	r2, [pc, #160]	@ (8003a7c <HAL_DMA_IRQHandler+0x69c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d03b      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a26      	ldr	r2, [pc, #152]	@ (8003a80 <HAL_DMA_IRQHandler+0x6a0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d036      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a25      	ldr	r2, [pc, #148]	@ (8003a84 <HAL_DMA_IRQHandler+0x6a4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d031      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a23      	ldr	r2, [pc, #140]	@ (8003a88 <HAL_DMA_IRQHandler+0x6a8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d02c      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a22      	ldr	r2, [pc, #136]	@ (8003a8c <HAL_DMA_IRQHandler+0x6ac>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d027      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a20      	ldr	r2, [pc, #128]	@ (8003a90 <HAL_DMA_IRQHandler+0x6b0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d022      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1f      	ldr	r2, [pc, #124]	@ (8003a94 <HAL_DMA_IRQHandler+0x6b4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d01d      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <HAL_DMA_IRQHandler+0x6b8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d018      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a9c <HAL_DMA_IRQHandler+0x6bc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <HAL_DMA_IRQHandler+0x6c0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a19      	ldr	r2, [pc, #100]	@ (8003aa4 <HAL_DMA_IRQHandler+0x6c4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a17      	ldr	r2, [pc, #92]	@ (8003aa8 <HAL_DMA_IRQHandler+0x6c8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x678>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a16      	ldr	r2, [pc, #88]	@ (8003aac <HAL_DMA_IRQHandler+0x6cc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d12b      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x6d0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf14      	ite	ne
 8003a66:	2301      	movne	r3, #1
 8003a68:	2300      	moveq	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	e02a      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x6e4>
 8003a6e:	bf00      	nop
 8003a70:	40020010 	.word	0x40020010
 8003a74:	40020028 	.word	0x40020028
 8003a78:	40020040 	.word	0x40020040
 8003a7c:	40020058 	.word	0x40020058
 8003a80:	40020070 	.word	0x40020070
 8003a84:	40020088 	.word	0x40020088
 8003a88:	400200a0 	.word	0x400200a0
 8003a8c:	400200b8 	.word	0x400200b8
 8003a90:	40020410 	.word	0x40020410
 8003a94:	40020428 	.word	0x40020428
 8003a98:	40020440 	.word	0x40020440
 8003a9c:	40020458 	.word	0x40020458
 8003aa0:	40020470 	.word	0x40020470
 8003aa4:	40020488 	.word	0x40020488
 8003aa8:	400204a0 	.word	0x400204a0
 8003aac:	400204b8 	.word	0x400204b8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bf14      	ite	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	2300      	moveq	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8087 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d139      	bne.n	8003b5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0216 	bic.w	r2, r2, #22
 8003af4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <HAL_DMA_IRQHandler+0x736>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0208 	bic.w	r2, r2, #8
 8003b24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	223f      	movs	r2, #63	@ 0x3f
 8003b30:	409a      	lsls	r2, r3
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 834a 	beq.w	80041e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
          }
          return;
 8003b58:	e344      	b.n	80041e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d018      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d108      	bne.n	8003b88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d02c      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
 8003b86:	e027      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d023      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4798      	blx	r3
 8003b98:	e01e      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0210 	bic.w	r2, r2, #16
 8003bb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8306 	beq.w	80041ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8088 	beq.w	8003d00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a7a      	ldr	r2, [pc, #488]	@ (8003de8 <HAL_DMA_IRQHandler+0xa08>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d04a      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a79      	ldr	r2, [pc, #484]	@ (8003dec <HAL_DMA_IRQHandler+0xa0c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d045      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a77      	ldr	r2, [pc, #476]	@ (8003df0 <HAL_DMA_IRQHandler+0xa10>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d040      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a76      	ldr	r2, [pc, #472]	@ (8003df4 <HAL_DMA_IRQHandler+0xa14>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d03b      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a74      	ldr	r2, [pc, #464]	@ (8003df8 <HAL_DMA_IRQHandler+0xa18>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d036      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a73      	ldr	r2, [pc, #460]	@ (8003dfc <HAL_DMA_IRQHandler+0xa1c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d031      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a71      	ldr	r2, [pc, #452]	@ (8003e00 <HAL_DMA_IRQHandler+0xa20>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d02c      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a70      	ldr	r2, [pc, #448]	@ (8003e04 <HAL_DMA_IRQHandler+0xa24>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d027      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e08 <HAL_DMA_IRQHandler+0xa28>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d022      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6d      	ldr	r2, [pc, #436]	@ (8003e0c <HAL_DMA_IRQHandler+0xa2c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d01d      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a6b      	ldr	r2, [pc, #428]	@ (8003e10 <HAL_DMA_IRQHandler+0xa30>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d018      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6a      	ldr	r2, [pc, #424]	@ (8003e14 <HAL_DMA_IRQHandler+0xa34>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a68      	ldr	r2, [pc, #416]	@ (8003e18 <HAL_DMA_IRQHandler+0xa38>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00e      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a67      	ldr	r2, [pc, #412]	@ (8003e1c <HAL_DMA_IRQHandler+0xa3c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d009      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a65      	ldr	r2, [pc, #404]	@ (8003e20 <HAL_DMA_IRQHandler+0xa40>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x8b8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a64      	ldr	r2, [pc, #400]	@ (8003e24 <HAL_DMA_IRQHandler+0xa44>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d108      	bne.n	8003caa <HAL_DMA_IRQHandler+0x8ca>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e007      	b.n	8003cba <HAL_DMA_IRQHandler+0x8da>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d307      	bcc.n	8003cd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f2      	bne.n	8003cba <HAL_DMA_IRQHandler+0x8da>
 8003cd4:	e000      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003cd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003cee:	e003      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8272 	beq.w	80041ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
 8003d12:	e26c      	b.n	80041ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a43      	ldr	r2, [pc, #268]	@ (8003e28 <HAL_DMA_IRQHandler+0xa48>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d022      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x984>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a42      	ldr	r2, [pc, #264]	@ (8003e2c <HAL_DMA_IRQHandler+0xa4c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d01d      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x984>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a40      	ldr	r2, [pc, #256]	@ (8003e30 <HAL_DMA_IRQHandler+0xa50>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d018      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x984>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a3f      	ldr	r2, [pc, #252]	@ (8003e34 <HAL_DMA_IRQHandler+0xa54>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x984>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3d      	ldr	r2, [pc, #244]	@ (8003e38 <HAL_DMA_IRQHandler+0xa58>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00e      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x984>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e3c <HAL_DMA_IRQHandler+0xa5c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d009      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x984>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3a      	ldr	r2, [pc, #232]	@ (8003e40 <HAL_DMA_IRQHandler+0xa60>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x984>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a39      	ldr	r2, [pc, #228]	@ (8003e44 <HAL_DMA_IRQHandler+0xa64>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x988>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_DMA_IRQHandler+0x98a>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 823f 	beq.w	80041ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2204      	movs	r2, #4
 8003d82:	409a      	lsls	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80cd 	beq.w	8003f28 <HAL_DMA_IRQHandler+0xb48>
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80c7 	beq.w	8003f28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	2204      	movs	r2, #4
 8003da4:	409a      	lsls	r2, r3
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d049      	beq.n	8003e48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8210 	beq.w	80041e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dd0:	e20a      	b.n	80041e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8206 	beq.w	80041e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003de4:	e200      	b.n	80041e8 <HAL_DMA_IRQHandler+0xe08>
 8003de6:	bf00      	nop
 8003de8:	40020010 	.word	0x40020010
 8003dec:	40020028 	.word	0x40020028
 8003df0:	40020040 	.word	0x40020040
 8003df4:	40020058 	.word	0x40020058
 8003df8:	40020070 	.word	0x40020070
 8003dfc:	40020088 	.word	0x40020088
 8003e00:	400200a0 	.word	0x400200a0
 8003e04:	400200b8 	.word	0x400200b8
 8003e08:	40020410 	.word	0x40020410
 8003e0c:	40020428 	.word	0x40020428
 8003e10:	40020440 	.word	0x40020440
 8003e14:	40020458 	.word	0x40020458
 8003e18:	40020470 	.word	0x40020470
 8003e1c:	40020488 	.word	0x40020488
 8003e20:	400204a0 	.word	0x400204a0
 8003e24:	400204b8 	.word	0x400204b8
 8003e28:	58025408 	.word	0x58025408
 8003e2c:	5802541c 	.word	0x5802541c
 8003e30:	58025430 	.word	0x58025430
 8003e34:	58025444 	.word	0x58025444
 8003e38:	58025458 	.word	0x58025458
 8003e3c:	5802546c 	.word	0x5802546c
 8003e40:	58025480 	.word	0x58025480
 8003e44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d160      	bne.n	8003f14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7f      	ldr	r2, [pc, #508]	@ (8004054 <HAL_DMA_IRQHandler+0xc74>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d04a      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7d      	ldr	r2, [pc, #500]	@ (8004058 <HAL_DMA_IRQHandler+0xc78>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d045      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800405c <HAL_DMA_IRQHandler+0xc7c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d040      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a7a      	ldr	r2, [pc, #488]	@ (8004060 <HAL_DMA_IRQHandler+0xc80>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d03b      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a79      	ldr	r2, [pc, #484]	@ (8004064 <HAL_DMA_IRQHandler+0xc84>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d036      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a77      	ldr	r2, [pc, #476]	@ (8004068 <HAL_DMA_IRQHandler+0xc88>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d031      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a76      	ldr	r2, [pc, #472]	@ (800406c <HAL_DMA_IRQHandler+0xc8c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d02c      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a74      	ldr	r2, [pc, #464]	@ (8004070 <HAL_DMA_IRQHandler+0xc90>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d027      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a73      	ldr	r2, [pc, #460]	@ (8004074 <HAL_DMA_IRQHandler+0xc94>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a71      	ldr	r2, [pc, #452]	@ (8004078 <HAL_DMA_IRQHandler+0xc98>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a70      	ldr	r2, [pc, #448]	@ (800407c <HAL_DMA_IRQHandler+0xc9c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8004080 <HAL_DMA_IRQHandler+0xca0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6d      	ldr	r2, [pc, #436]	@ (8004084 <HAL_DMA_IRQHandler+0xca4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8004088 <HAL_DMA_IRQHandler+0xca8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6a      	ldr	r2, [pc, #424]	@ (800408c <HAL_DMA_IRQHandler+0xcac>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xb12>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	@ (8004090 <HAL_DMA_IRQHandler+0xcb0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <HAL_DMA_IRQHandler+0xb24>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0208 	bic.w	r2, r2, #8
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e007      	b.n	8003f14 <HAL_DMA_IRQHandler+0xb34>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0204 	bic.w	r2, r2, #4
 8003f12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8165 	beq.w	80041e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f26:	e15f      	b.n	80041e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2202      	movs	r2, #2
 8003f32:	409a      	lsls	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80c5 	beq.w	80040c8 <HAL_DMA_IRQHandler+0xce8>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80bf 	beq.w	80040c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2202      	movs	r2, #2
 8003f54:	409a      	lsls	r2, r3
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d018      	beq.n	8003f96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 813a 	beq.w	80041ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f80:	e134      	b.n	80041ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8130 	beq.w	80041ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f94:	e12a      	b.n	80041ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f040 8089 	bne.w	80040b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <HAL_DMA_IRQHandler+0xc74>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d04a      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a29      	ldr	r2, [pc, #164]	@ (8004058 <HAL_DMA_IRQHandler+0xc78>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d045      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a28      	ldr	r2, [pc, #160]	@ (800405c <HAL_DMA_IRQHandler+0xc7c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d040      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	@ (8004060 <HAL_DMA_IRQHandler+0xc80>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d03b      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <HAL_DMA_IRQHandler+0xc84>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d036      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	@ (8004068 <HAL_DMA_IRQHandler+0xc88>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_DMA_IRQHandler+0xc8c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d02c      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a20      	ldr	r2, [pc, #128]	@ (8004070 <HAL_DMA_IRQHandler+0xc90>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d027      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8004074 <HAL_DMA_IRQHandler+0xc94>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1d      	ldr	r2, [pc, #116]	@ (8004078 <HAL_DMA_IRQHandler+0xc98>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01d      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <HAL_DMA_IRQHandler+0xc9c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1a      	ldr	r2, [pc, #104]	@ (8004080 <HAL_DMA_IRQHandler+0xca0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a19      	ldr	r2, [pc, #100]	@ (8004084 <HAL_DMA_IRQHandler+0xca4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a17      	ldr	r2, [pc, #92]	@ (8004088 <HAL_DMA_IRQHandler+0xca8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a16      	ldr	r2, [pc, #88]	@ (800408c <HAL_DMA_IRQHandler+0xcac>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_IRQHandler+0xc62>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <HAL_DMA_IRQHandler+0xcb0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d128      	bne.n	8004094 <HAL_DMA_IRQHandler+0xcb4>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0214 	bic.w	r2, r2, #20
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e027      	b.n	80040a4 <HAL_DMA_IRQHandler+0xcc4>
 8004054:	40020010 	.word	0x40020010
 8004058:	40020028 	.word	0x40020028
 800405c:	40020040 	.word	0x40020040
 8004060:	40020058 	.word	0x40020058
 8004064:	40020070 	.word	0x40020070
 8004068:	40020088 	.word	0x40020088
 800406c:	400200a0 	.word	0x400200a0
 8004070:	400200b8 	.word	0x400200b8
 8004074:	40020410 	.word	0x40020410
 8004078:	40020428 	.word	0x40020428
 800407c:	40020440 	.word	0x40020440
 8004080:	40020458 	.word	0x40020458
 8004084:	40020470 	.word	0x40020470
 8004088:	40020488 	.word	0x40020488
 800408c:	400204a0 	.word	0x400204a0
 8004090:	400204b8 	.word	0x400204b8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 020a 	bic.w	r2, r2, #10
 80040a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8097 	beq.w	80041ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040c6:	e091      	b.n	80041ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2208      	movs	r2, #8
 80040d2:	409a      	lsls	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8088 	beq.w	80041ee <HAL_DMA_IRQHandler+0xe0e>
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8082 	beq.w	80041ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a41      	ldr	r2, [pc, #260]	@ (80041f4 <HAL_DMA_IRQHandler+0xe14>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d04a      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a3f      	ldr	r2, [pc, #252]	@ (80041f8 <HAL_DMA_IRQHandler+0xe18>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d045      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a3e      	ldr	r2, [pc, #248]	@ (80041fc <HAL_DMA_IRQHandler+0xe1c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d040      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a3c      	ldr	r2, [pc, #240]	@ (8004200 <HAL_DMA_IRQHandler+0xe20>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d03b      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a3b      	ldr	r2, [pc, #236]	@ (8004204 <HAL_DMA_IRQHandler+0xe24>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d036      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a39      	ldr	r2, [pc, #228]	@ (8004208 <HAL_DMA_IRQHandler+0xe28>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a38      	ldr	r2, [pc, #224]	@ (800420c <HAL_DMA_IRQHandler+0xe2c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d02c      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a36      	ldr	r2, [pc, #216]	@ (8004210 <HAL_DMA_IRQHandler+0xe30>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d027      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a35      	ldr	r2, [pc, #212]	@ (8004214 <HAL_DMA_IRQHandler+0xe34>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a33      	ldr	r2, [pc, #204]	@ (8004218 <HAL_DMA_IRQHandler+0xe38>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a32      	ldr	r2, [pc, #200]	@ (800421c <HAL_DMA_IRQHandler+0xe3c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a30      	ldr	r2, [pc, #192]	@ (8004220 <HAL_DMA_IRQHandler+0xe40>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2f      	ldr	r2, [pc, #188]	@ (8004224 <HAL_DMA_IRQHandler+0xe44>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2d      	ldr	r2, [pc, #180]	@ (8004228 <HAL_DMA_IRQHandler+0xe48>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2c      	ldr	r2, [pc, #176]	@ (800422c <HAL_DMA_IRQHandler+0xe4c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_DMA_IRQHandler+0xdaa>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2a      	ldr	r2, [pc, #168]	@ (8004230 <HAL_DMA_IRQHandler+0xe50>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d108      	bne.n	800419c <HAL_DMA_IRQHandler+0xdbc>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 021c 	bic.w	r2, r2, #28
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e007      	b.n	80041ac <HAL_DMA_IRQHandler+0xdcc>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 020e 	bic.w	r2, r2, #14
 80041aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	2201      	movs	r2, #1
 80041b6:	409a      	lsls	r2, r3
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
 80041e2:	e004      	b.n	80041ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80041e4:	bf00      	nop
 80041e6:	e002      	b.n	80041ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041e8:	bf00      	nop
 80041ea:	e000      	b.n	80041ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041ee:	3728      	adds	r7, #40	@ 0x28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40020010 	.word	0x40020010
 80041f8:	40020028 	.word	0x40020028
 80041fc:	40020040 	.word	0x40020040
 8004200:	40020058 	.word	0x40020058
 8004204:	40020070 	.word	0x40020070
 8004208:	40020088 	.word	0x40020088
 800420c:	400200a0 	.word	0x400200a0
 8004210:	400200b8 	.word	0x400200b8
 8004214:	40020410 	.word	0x40020410
 8004218:	40020428 	.word	0x40020428
 800421c:	40020440 	.word	0x40020440
 8004220:	40020458 	.word	0x40020458
 8004224:	40020470 	.word	0x40020470
 8004228:	40020488 	.word	0x40020488
 800422c:	400204a0 	.word	0x400204a0
 8004230:	400204b8 	.word	0x400204b8

08004234 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004264:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a7f      	ldr	r2, [pc, #508]	@ (8004468 <DMA_SetConfig+0x21c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d072      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a7d      	ldr	r2, [pc, #500]	@ (800446c <DMA_SetConfig+0x220>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d06d      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a7c      	ldr	r2, [pc, #496]	@ (8004470 <DMA_SetConfig+0x224>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d068      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7a      	ldr	r2, [pc, #488]	@ (8004474 <DMA_SetConfig+0x228>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d063      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a79      	ldr	r2, [pc, #484]	@ (8004478 <DMA_SetConfig+0x22c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d05e      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a77      	ldr	r2, [pc, #476]	@ (800447c <DMA_SetConfig+0x230>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d059      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a76      	ldr	r2, [pc, #472]	@ (8004480 <DMA_SetConfig+0x234>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d054      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a74      	ldr	r2, [pc, #464]	@ (8004484 <DMA_SetConfig+0x238>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d04f      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a73      	ldr	r2, [pc, #460]	@ (8004488 <DMA_SetConfig+0x23c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a71      	ldr	r2, [pc, #452]	@ (800448c <DMA_SetConfig+0x240>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a70      	ldr	r2, [pc, #448]	@ (8004490 <DMA_SetConfig+0x244>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004494 <DMA_SetConfig+0x248>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004498 <DMA_SetConfig+0x24c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6b      	ldr	r2, [pc, #428]	@ (800449c <DMA_SetConfig+0x250>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6a      	ldr	r2, [pc, #424]	@ (80044a0 <DMA_SetConfig+0x254>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a68      	ldr	r2, [pc, #416]	@ (80044a4 <DMA_SetConfig+0x258>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a67      	ldr	r2, [pc, #412]	@ (80044a8 <DMA_SetConfig+0x25c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a65      	ldr	r2, [pc, #404]	@ (80044ac <DMA_SetConfig+0x260>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a64      	ldr	r2, [pc, #400]	@ (80044b0 <DMA_SetConfig+0x264>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a62      	ldr	r2, [pc, #392]	@ (80044b4 <DMA_SetConfig+0x268>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a61      	ldr	r2, [pc, #388]	@ (80044b8 <DMA_SetConfig+0x26c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a5f      	ldr	r2, [pc, #380]	@ (80044bc <DMA_SetConfig+0x270>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5e      	ldr	r2, [pc, #376]	@ (80044c0 <DMA_SetConfig+0x274>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5c      	ldr	r2, [pc, #368]	@ (80044c4 <DMA_SetConfig+0x278>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <DMA_SetConfig+0x10e>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <DMA_SetConfig+0x110>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00d      	beq.n	800437c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004368:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800437a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a39      	ldr	r2, [pc, #228]	@ (8004468 <DMA_SetConfig+0x21c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d04a      	beq.n	800441c <DMA_SetConfig+0x1d0>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a38      	ldr	r2, [pc, #224]	@ (800446c <DMA_SetConfig+0x220>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d045      	beq.n	800441c <DMA_SetConfig+0x1d0>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a36      	ldr	r2, [pc, #216]	@ (8004470 <DMA_SetConfig+0x224>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d040      	beq.n	800441c <DMA_SetConfig+0x1d0>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a35      	ldr	r2, [pc, #212]	@ (8004474 <DMA_SetConfig+0x228>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d03b      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a33      	ldr	r2, [pc, #204]	@ (8004478 <DMA_SetConfig+0x22c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d036      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a32      	ldr	r2, [pc, #200]	@ (800447c <DMA_SetConfig+0x230>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d031      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <DMA_SetConfig+0x234>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02c      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004484 <DMA_SetConfig+0x238>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d027      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004488 <DMA_SetConfig+0x23c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d022      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2c      	ldr	r2, [pc, #176]	@ (800448c <DMA_SetConfig+0x240>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d01d      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004490 <DMA_SetConfig+0x244>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a29      	ldr	r2, [pc, #164]	@ (8004494 <DMA_SetConfig+0x248>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a27      	ldr	r2, [pc, #156]	@ (8004498 <DMA_SetConfig+0x24c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a26      	ldr	r2, [pc, #152]	@ (800449c <DMA_SetConfig+0x250>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <DMA_SetConfig+0x1d0>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a24      	ldr	r2, [pc, #144]	@ (80044a0 <DMA_SetConfig+0x254>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <DMA_SetConfig+0x1d0>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a23      	ldr	r2, [pc, #140]	@ (80044a4 <DMA_SetConfig+0x258>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <DMA_SetConfig+0x1d4>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <DMA_SetConfig+0x1d6>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d059      	beq.n	80044da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	223f      	movs	r2, #63	@ 0x3f
 8004430:	409a      	lsls	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004444:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b40      	cmp	r3, #64	@ 0x40
 8004454:	d138      	bne.n	80044c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004466:	e086      	b.n	8004576 <DMA_SetConfig+0x32a>
 8004468:	40020010 	.word	0x40020010
 800446c:	40020028 	.word	0x40020028
 8004470:	40020040 	.word	0x40020040
 8004474:	40020058 	.word	0x40020058
 8004478:	40020070 	.word	0x40020070
 800447c:	40020088 	.word	0x40020088
 8004480:	400200a0 	.word	0x400200a0
 8004484:	400200b8 	.word	0x400200b8
 8004488:	40020410 	.word	0x40020410
 800448c:	40020428 	.word	0x40020428
 8004490:	40020440 	.word	0x40020440
 8004494:	40020458 	.word	0x40020458
 8004498:	40020470 	.word	0x40020470
 800449c:	40020488 	.word	0x40020488
 80044a0:	400204a0 	.word	0x400204a0
 80044a4:	400204b8 	.word	0x400204b8
 80044a8:	58025408 	.word	0x58025408
 80044ac:	5802541c 	.word	0x5802541c
 80044b0:	58025430 	.word	0x58025430
 80044b4:	58025444 	.word	0x58025444
 80044b8:	58025458 	.word	0x58025458
 80044bc:	5802546c 	.word	0x5802546c
 80044c0:	58025480 	.word	0x58025480
 80044c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]
}
 80044d8:	e04d      	b.n	8004576 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a29      	ldr	r2, [pc, #164]	@ (8004584 <DMA_SetConfig+0x338>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d022      	beq.n	800452a <DMA_SetConfig+0x2de>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a27      	ldr	r2, [pc, #156]	@ (8004588 <DMA_SetConfig+0x33c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01d      	beq.n	800452a <DMA_SetConfig+0x2de>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a26      	ldr	r2, [pc, #152]	@ (800458c <DMA_SetConfig+0x340>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d018      	beq.n	800452a <DMA_SetConfig+0x2de>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a24      	ldr	r2, [pc, #144]	@ (8004590 <DMA_SetConfig+0x344>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <DMA_SetConfig+0x2de>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <DMA_SetConfig+0x348>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <DMA_SetConfig+0x2de>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a21      	ldr	r2, [pc, #132]	@ (8004598 <DMA_SetConfig+0x34c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <DMA_SetConfig+0x2de>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a20      	ldr	r2, [pc, #128]	@ (800459c <DMA_SetConfig+0x350>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <DMA_SetConfig+0x2de>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1e      	ldr	r2, [pc, #120]	@ (80045a0 <DMA_SetConfig+0x354>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <DMA_SetConfig+0x2e2>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <DMA_SetConfig+0x2e4>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2201      	movs	r2, #1
 800453e:	409a      	lsls	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d108      	bne.n	8004566 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	60da      	str	r2, [r3, #12]
}
 8004564:	e007      	b.n	8004576 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	58025408 	.word	0x58025408
 8004588:	5802541c 	.word	0x5802541c
 800458c:	58025430 	.word	0x58025430
 8004590:	58025444 	.word	0x58025444
 8004594:	58025458 	.word	0x58025458
 8004598:	5802546c 	.word	0x5802546c
 800459c:	58025480 	.word	0x58025480
 80045a0:	58025494 	.word	0x58025494

080045a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a42      	ldr	r2, [pc, #264]	@ (80046bc <DMA_CalcBaseAndBitshift+0x118>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d04a      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a41      	ldr	r2, [pc, #260]	@ (80046c0 <DMA_CalcBaseAndBitshift+0x11c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d045      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3f      	ldr	r2, [pc, #252]	@ (80046c4 <DMA_CalcBaseAndBitshift+0x120>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d040      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3e      	ldr	r2, [pc, #248]	@ (80046c8 <DMA_CalcBaseAndBitshift+0x124>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d03b      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3c      	ldr	r2, [pc, #240]	@ (80046cc <DMA_CalcBaseAndBitshift+0x128>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d036      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3b      	ldr	r2, [pc, #236]	@ (80046d0 <DMA_CalcBaseAndBitshift+0x12c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d031      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a39      	ldr	r2, [pc, #228]	@ (80046d4 <DMA_CalcBaseAndBitshift+0x130>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d02c      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a38      	ldr	r2, [pc, #224]	@ (80046d8 <DMA_CalcBaseAndBitshift+0x134>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d027      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a36      	ldr	r2, [pc, #216]	@ (80046dc <DMA_CalcBaseAndBitshift+0x138>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d022      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a35      	ldr	r2, [pc, #212]	@ (80046e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d01d      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a33      	ldr	r2, [pc, #204]	@ (80046e4 <DMA_CalcBaseAndBitshift+0x140>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d018      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a32      	ldr	r2, [pc, #200]	@ (80046e8 <DMA_CalcBaseAndBitshift+0x144>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d013      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a30      	ldr	r2, [pc, #192]	@ (80046ec <DMA_CalcBaseAndBitshift+0x148>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00e      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2f      	ldr	r2, [pc, #188]	@ (80046f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d009      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2d      	ldr	r2, [pc, #180]	@ (80046f4 <DMA_CalcBaseAndBitshift+0x150>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2c      	ldr	r2, [pc, #176]	@ (80046f8 <DMA_CalcBaseAndBitshift+0x154>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <DMA_CalcBaseAndBitshift+0xac>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <DMA_CalcBaseAndBitshift+0xae>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d024      	beq.n	80046a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3b10      	subs	r3, #16
 800465e:	4a27      	ldr	r2, [pc, #156]	@ (80046fc <DMA_CalcBaseAndBitshift+0x158>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	4a24      	ldr	r2, [pc, #144]	@ (8004700 <DMA_CalcBaseAndBitshift+0x15c>)
 8004670:	5cd3      	ldrb	r3, [r2, r3]
 8004672:	461a      	mov	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d908      	bls.n	8004690 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	4b1f      	ldr	r3, [pc, #124]	@ (8004704 <DMA_CalcBaseAndBitshift+0x160>)
 8004686:	4013      	ands	r3, r2
 8004688:	1d1a      	adds	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	659a      	str	r2, [r3, #88]	@ 0x58
 800468e:	e00d      	b.n	80046ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	4b1b      	ldr	r3, [pc, #108]	@ (8004704 <DMA_CalcBaseAndBitshift+0x160>)
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6593      	str	r3, [r2, #88]	@ 0x58
 800469e:	e005      	b.n	80046ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40020010 	.word	0x40020010
 80046c0:	40020028 	.word	0x40020028
 80046c4:	40020040 	.word	0x40020040
 80046c8:	40020058 	.word	0x40020058
 80046cc:	40020070 	.word	0x40020070
 80046d0:	40020088 	.word	0x40020088
 80046d4:	400200a0 	.word	0x400200a0
 80046d8:	400200b8 	.word	0x400200b8
 80046dc:	40020410 	.word	0x40020410
 80046e0:	40020428 	.word	0x40020428
 80046e4:	40020440 	.word	0x40020440
 80046e8:	40020458 	.word	0x40020458
 80046ec:	40020470 	.word	0x40020470
 80046f0:	40020488 	.word	0x40020488
 80046f4:	400204a0 	.word	0x400204a0
 80046f8:	400204b8 	.word	0x400204b8
 80046fc:	aaaaaaab 	.word	0xaaaaaaab
 8004700:	0800cab0 	.word	0x0800cab0
 8004704:	fffffc00 	.word	0xfffffc00

08004708 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d120      	bne.n	800475e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	2b03      	cmp	r3, #3
 8004722:	d858      	bhi.n	80047d6 <DMA_CheckFifoParam+0xce>
 8004724:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <DMA_CheckFifoParam+0x24>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	0800473d 	.word	0x0800473d
 8004730:	0800474f 	.word	0x0800474f
 8004734:	0800473d 	.word	0x0800473d
 8004738:	080047d7 	.word	0x080047d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d048      	beq.n	80047da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800474c:	e045      	b.n	80047da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004756:	d142      	bne.n	80047de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800475c:	e03f      	b.n	80047de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004766:	d123      	bne.n	80047b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	2b03      	cmp	r3, #3
 800476e:	d838      	bhi.n	80047e2 <DMA_CheckFifoParam+0xda>
 8004770:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <DMA_CheckFifoParam+0x70>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	08004789 	.word	0x08004789
 800477c:	0800478f 	.word	0x0800478f
 8004780:	08004789 	.word	0x08004789
 8004784:	080047a1 	.word	0x080047a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
        break;
 800478c:	e030      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d025      	beq.n	80047e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800479e:	e022      	b.n	80047e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047a8:	d11f      	bne.n	80047ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047ae:	e01c      	b.n	80047ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d902      	bls.n	80047be <DMA_CheckFifoParam+0xb6>
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d003      	beq.n	80047c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80047bc:	e018      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
        break;
 80047c2:	e015      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00e      	beq.n	80047ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
    break;
 80047d4:	e00b      	b.n	80047ee <DMA_CheckFifoParam+0xe6>
        break;
 80047d6:	bf00      	nop
 80047d8:	e00a      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047da:	bf00      	nop
 80047dc:	e008      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047de:	bf00      	nop
 80047e0:	e006      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047e2:	bf00      	nop
 80047e4:	e004      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
    break;
 80047ee:	bf00      	nop
    }
  }

  return status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop

08004800 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a38      	ldr	r2, [pc, #224]	@ (80048f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a36      	ldr	r2, [pc, #216]	@ (80048f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01d      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a35      	ldr	r2, [pc, #212]	@ (80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a33      	ldr	r2, [pc, #204]	@ (8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a32      	ldr	r2, [pc, #200]	@ (8004904 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	@ (8004908 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2f      	ldr	r2, [pc, #188]	@ (800490c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2d      	ldr	r2, [pc, #180]	@ (8004910 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d101      	bne.n	8004862 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01a      	beq.n	800489e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3b08      	subs	r3, #8
 8004870:	4a28      	ldr	r2, [pc, #160]	@ (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4b26      	ldr	r3, [pc, #152]	@ (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a24      	ldr	r2, [pc, #144]	@ (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800488c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800489c:	e024      	b.n	80048e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	3b10      	subs	r3, #16
 80048a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d806      	bhi.n	80048c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004928 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d902      	bls.n	80048c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3308      	adds	r3, #8
 80048c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4b18      	ldr	r3, [pc, #96]	@ (800492c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a16      	ldr	r2, [pc, #88]	@ (8004930 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80048d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2201      	movs	r2, #1
 80048e2:	409a      	lsls	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	58025408 	.word	0x58025408
 80048f8:	5802541c 	.word	0x5802541c
 80048fc:	58025430 	.word	0x58025430
 8004900:	58025444 	.word	0x58025444
 8004904:	58025458 	.word	0x58025458
 8004908:	5802546c 	.word	0x5802546c
 800490c:	58025480 	.word	0x58025480
 8004910:	58025494 	.word	0x58025494
 8004914:	cccccccd 	.word	0xcccccccd
 8004918:	16009600 	.word	0x16009600
 800491c:	58025880 	.word	0x58025880
 8004920:	aaaaaaab 	.word	0xaaaaaaab
 8004924:	400204b8 	.word	0x400204b8
 8004928:	4002040f 	.word	0x4002040f
 800492c:	10008200 	.word	0x10008200
 8004930:	40020880 	.word	0x40020880

08004934 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d04a      	beq.n	80049e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d847      	bhi.n	80049e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a25      	ldr	r2, [pc, #148]	@ (80049ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d022      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a24      	ldr	r2, [pc, #144]	@ (80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01d      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a22      	ldr	r2, [pc, #136]	@ (80049f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a21      	ldr	r2, [pc, #132]	@ (80049f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1f      	ldr	r2, [pc, #124]	@ (80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1e      	ldr	r2, [pc, #120]	@ (8004a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1c      	ldr	r2, [pc, #112]	@ (8004a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80049a4:	2300      	movs	r3, #0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4b17      	ldr	r3, [pc, #92]	@ (8004a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	461a      	mov	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a15      	ldr	r2, [pc, #84]	@ (8004a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80049bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80049be:	e009      	b.n	80049d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	461a      	mov	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a11      	ldr	r2, [pc, #68]	@ (8004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80049d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	2201      	movs	r2, #1
 80049da:	409a      	lsls	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	58025408 	.word	0x58025408
 80049f0:	5802541c 	.word	0x5802541c
 80049f4:	58025430 	.word	0x58025430
 80049f8:	58025444 	.word	0x58025444
 80049fc:	58025458 	.word	0x58025458
 8004a00:	5802546c 	.word	0x5802546c
 8004a04:	58025480 	.word	0x58025480
 8004a08:	58025494 	.word	0x58025494
 8004a0c:	1600963f 	.word	0x1600963f
 8004a10:	58025940 	.word	0x58025940
 8004a14:	1000823f 	.word	0x1000823f
 8004a18:	40020940 	.word	0x40020940

08004a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	@ 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004a2a:	4b86      	ldr	r3, [pc, #536]	@ (8004c44 <HAL_GPIO_Init+0x228>)
 8004a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a2e:	e18c      	b.n	8004d4a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	2101      	movs	r1, #1
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 817e 	beq.w	8004d44 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d005      	beq.n	8004a60 <HAL_GPIO_Init+0x44>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d130      	bne.n	8004ac2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a96:	2201      	movs	r2, #1
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f003 0201 	and.w	r2, r3, #1
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d017      	beq.n	8004afe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	2203      	movs	r2, #3
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d123      	bne.n	8004b52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	08da      	lsrs	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3208      	adds	r2, #8
 8004b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	220f      	movs	r2, #15
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	08da      	lsrs	r2, r3, #3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3208      	adds	r2, #8
 8004b4c:	69b9      	ldr	r1, [r7, #24]
 8004b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43db      	mvns	r3, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4013      	ands	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0203 	and.w	r2, r3, #3
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80d8 	beq.w	8004d44 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b94:	4b2c      	ldr	r3, [pc, #176]	@ (8004c48 <HAL_GPIO_Init+0x22c>)
 8004b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c48 <HAL_GPIO_Init+0x22c>)
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ba4:	4b28      	ldr	r3, [pc, #160]	@ (8004c48 <HAL_GPIO_Init+0x22c>)
 8004ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bb2:	4a26      	ldr	r2, [pc, #152]	@ (8004c4c <HAL_GPIO_Init+0x230>)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	3302      	adds	r3, #2
 8004bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	220f      	movs	r2, #15
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <HAL_GPIO_Init+0x234>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d04a      	beq.n	8004c74 <HAL_GPIO_Init+0x258>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c54 <HAL_GPIO_Init+0x238>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02b      	beq.n	8004c3e <HAL_GPIO_Init+0x222>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <HAL_GPIO_Init+0x23c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d025      	beq.n	8004c3a <HAL_GPIO_Init+0x21e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c5c <HAL_GPIO_Init+0x240>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01f      	beq.n	8004c36 <HAL_GPIO_Init+0x21a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	@ (8004c60 <HAL_GPIO_Init+0x244>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d019      	beq.n	8004c32 <HAL_GPIO_Init+0x216>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a18      	ldr	r2, [pc, #96]	@ (8004c64 <HAL_GPIO_Init+0x248>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_GPIO_Init+0x212>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a17      	ldr	r2, [pc, #92]	@ (8004c68 <HAL_GPIO_Init+0x24c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00d      	beq.n	8004c2a <HAL_GPIO_Init+0x20e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a16      	ldr	r2, [pc, #88]	@ (8004c6c <HAL_GPIO_Init+0x250>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <HAL_GPIO_Init+0x20a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a15      	ldr	r2, [pc, #84]	@ (8004c70 <HAL_GPIO_Init+0x254>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_GPIO_Init+0x206>
 8004c1e:	2309      	movs	r3, #9
 8004c20:	e029      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c22:	230a      	movs	r3, #10
 8004c24:	e027      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c26:	2307      	movs	r3, #7
 8004c28:	e025      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	e023      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c2e:	2305      	movs	r3, #5
 8004c30:	e021      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c32:	2304      	movs	r3, #4
 8004c34:	e01f      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c36:	2303      	movs	r3, #3
 8004c38:	e01d      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e01b      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e019      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c42:	bf00      	nop
 8004c44:	58000080 	.word	0x58000080
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	58000400 	.word	0x58000400
 8004c50:	58020000 	.word	0x58020000
 8004c54:	58020400 	.word	0x58020400
 8004c58:	58020800 	.word	0x58020800
 8004c5c:	58020c00 	.word	0x58020c00
 8004c60:	58021000 	.word	0x58021000
 8004c64:	58021400 	.word	0x58021400
 8004c68:	58021800 	.word	0x58021800
 8004c6c:	58021c00 	.word	0x58021c00
 8004c70:	58022400 	.word	0x58022400
 8004c74:	2300      	movs	r3, #0
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	f002 0203 	and.w	r2, r2, #3
 8004c7c:	0092      	lsls	r2, r2, #2
 8004c7e:	4093      	lsls	r3, r2
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c86:	4938      	ldr	r1, [pc, #224]	@ (8004d68 <HAL_GPIO_Init+0x34c>)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004cba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ce8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	3301      	adds	r3, #1
 8004d48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f47f ae6b 	bne.w	8004a30 <HAL_GPIO_Init+0x14>
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	3724      	adds	r7, #36	@ 0x24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	58000400 	.word	0x58000400

08004d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d7c:	787b      	ldrb	r3, [r7, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d82:	887a      	ldrh	r2, [r7, #2]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d88:	e003      	b.n	8004d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d8a:	887b      	ldrh	r3, [r7, #2]
 8004d8c:	041a      	lsls	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	619a      	str	r2, [r3, #24]
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004db0:	887a      	ldrh	r2, [r7, #2]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4013      	ands	r3, r2
 8004db6:	041a      	lsls	r2, r3, #16
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	43d9      	mvns	r1, r3
 8004dbc:	887b      	ldrh	r3, [r7, #2]
 8004dbe:	400b      	ands	r3, r1
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	619a      	str	r2, [r3, #24]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ddc:	4b19      	ldr	r3, [pc, #100]	@ (8004e44 <HAL_PWREx_ConfigSupply+0x70>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d00a      	beq.n	8004dfe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004de8:	4b16      	ldr	r3, [pc, #88]	@ (8004e44 <HAL_PWREx_ConfigSupply+0x70>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e01f      	b.n	8004e3a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e01d      	b.n	8004e3a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004dfe:	4b11      	ldr	r3, [pc, #68]	@ (8004e44 <HAL_PWREx_ConfigSupply+0x70>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f023 0207 	bic.w	r2, r3, #7
 8004e06:	490f      	ldr	r1, [pc, #60]	@ (8004e44 <HAL_PWREx_ConfigSupply+0x70>)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e0e:	f7fc fe09 	bl	8001a24 <HAL_GetTick>
 8004e12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e14:	e009      	b.n	8004e2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e16:	f7fc fe05 	bl	8001a24 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e24:	d901      	bls.n	8004e2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e007      	b.n	8004e3a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <HAL_PWREx_ConfigSupply+0x70>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e36:	d1ee      	bne.n	8004e16 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	58024800 	.word	0x58024800

08004e48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08c      	sub	sp, #48	@ 0x30
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e3c8      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8087 	beq.w	8004f76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e68:	4b88      	ldr	r3, [pc, #544]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e72:	4b86      	ldr	r3, [pc, #536]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e76:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7a:	2b10      	cmp	r3, #16
 8004e7c:	d007      	beq.n	8004e8e <HAL_RCC_OscConfig+0x46>
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	2b18      	cmp	r3, #24
 8004e82:	d110      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x5e>
 8004e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d10b      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06c      	beq.n	8004f74 <HAL_RCC_OscConfig+0x12c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d168      	bne.n	8004f74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e3a2      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eae:	d106      	bne.n	8004ebe <HAL_RCC_OscConfig+0x76>
 8004eb0:	4b76      	ldr	r3, [pc, #472]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a75      	ldr	r2, [pc, #468]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	e02e      	b.n	8004f1c <HAL_RCC_OscConfig+0xd4>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x98>
 8004ec6:	4b71      	ldr	r3, [pc, #452]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a70      	ldr	r2, [pc, #448]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6d      	ldr	r2, [pc, #436]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004ed8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e01d      	b.n	8004f1c <HAL_RCC_OscConfig+0xd4>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCC_OscConfig+0xbc>
 8004eea:	4b68      	ldr	r3, [pc, #416]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a67      	ldr	r2, [pc, #412]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	4b65      	ldr	r3, [pc, #404]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a64      	ldr	r2, [pc, #400]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e00b      	b.n	8004f1c <HAL_RCC_OscConfig+0xd4>
 8004f04:	4b61      	ldr	r3, [pc, #388]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a60      	ldr	r2, [pc, #384]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4b5e      	ldr	r3, [pc, #376]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5d      	ldr	r2, [pc, #372]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d013      	beq.n	8004f4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fc fd7e 	bl	8001a24 <HAL_GetTick>
 8004f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f2c:	f7fc fd7a 	bl	8001a24 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	@ 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e356      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f3e:	4b53      	ldr	r3, [pc, #332]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0xe4>
 8004f4a:	e014      	b.n	8004f76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fc fd6a 	bl	8001a24 <HAL_GetTick>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f54:	f7fc fd66 	bl	8001a24 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b64      	cmp	r3, #100	@ 0x64
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e342      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f66:	4b49      	ldr	r3, [pc, #292]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x10c>
 8004f72:	e000      	b.n	8004f76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 808c 	beq.w	800509c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f84:	4b41      	ldr	r3, [pc, #260]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_RCC_OscConfig+0x162>
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	2b18      	cmp	r3, #24
 8004f9e:	d137      	bne.n	8005010 <HAL_RCC_OscConfig+0x1c8>
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d132      	bne.n	8005010 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004faa:	4b38      	ldr	r3, [pc, #224]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x17a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e314      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fc2:	4b32      	ldr	r3, [pc, #200]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 0219 	bic.w	r2, r3, #25
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	492f      	ldr	r1, [pc, #188]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fc fd26 	bl	8001a24 <HAL_GetTick>
 8004fd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fdc:	f7fc fd22 	bl	8001a24 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e2fe      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fee:	4b27      	ldr	r3, [pc, #156]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b24      	ldr	r3, [pc, #144]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	061b      	lsls	r3, r3, #24
 8005008:	4920      	ldr	r1, [pc, #128]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 800500a:	4313      	orrs	r3, r2
 800500c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800500e:	e045      	b.n	800509c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d026      	beq.n	8005066 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005018:	4b1c      	ldr	r3, [pc, #112]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f023 0219 	bic.w	r2, r3, #25
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4919      	ldr	r1, [pc, #100]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502a:	f7fc fcfb 	bl	8001a24 <HAL_GetTick>
 800502e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005032:	f7fc fcf7 	bl	8001a24 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e2d3      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005044:	4b11      	ldr	r3, [pc, #68]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005050:	4b0e      	ldr	r3, [pc, #56]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	490b      	ldr	r1, [pc, #44]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
 8005064:	e01a      	b.n	800509c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005066:	4b09      	ldr	r3, [pc, #36]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a08      	ldr	r2, [pc, #32]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fc fcd7 	bl	8001a24 <HAL_GetTick>
 8005076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005078:	e00a      	b.n	8005090 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800507a:	f7fc fcd3 	bl	8001a24 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d903      	bls.n	8005090 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e2af      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
 800508c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005090:	4b96      	ldr	r3, [pc, #600]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1ee      	bne.n	800507a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d06a      	beq.n	800517e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a8:	4b90      	ldr	r3, [pc, #576]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050b0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050b2:	4b8e      	ldr	r3, [pc, #568]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d007      	beq.n	80050ce <HAL_RCC_OscConfig+0x286>
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b18      	cmp	r3, #24
 80050c2:	d11b      	bne.n	80050fc <HAL_RCC_OscConfig+0x2b4>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d116      	bne.n	80050fc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050ce:	4b87      	ldr	r3, [pc, #540]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_RCC_OscConfig+0x29e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	2b80      	cmp	r3, #128	@ 0x80
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e282      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050e6:	4b81      	ldr	r3, [pc, #516]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	061b      	lsls	r3, r3, #24
 80050f4:	497d      	ldr	r1, [pc, #500]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050fa:	e040      	b.n	800517e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d023      	beq.n	800514c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005104:	4b79      	ldr	r3, [pc, #484]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a78      	ldr	r2, [pc, #480]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 800510a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800510e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fc fc88 	bl	8001a24 <HAL_GetTick>
 8005114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005118:	f7fc fc84 	bl	8001a24 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e260      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800512a:	4b70      	ldr	r3, [pc, #448]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005136:	4b6d      	ldr	r3, [pc, #436]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	061b      	lsls	r3, r3, #24
 8005144:	4969      	ldr	r1, [pc, #420]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005146:	4313      	orrs	r3, r2
 8005148:	60cb      	str	r3, [r1, #12]
 800514a:	e018      	b.n	800517e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800514c:	4b67      	ldr	r3, [pc, #412]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a66      	ldr	r2, [pc, #408]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fc fc64 	bl	8001a24 <HAL_GetTick>
 800515c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005160:	f7fc fc60 	bl	8001a24 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e23c      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005172:	4b5e      	ldr	r3, [pc, #376]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d036      	beq.n	80051f8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d019      	beq.n	80051c6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005192:	4b56      	ldr	r3, [pc, #344]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005196:	4a55      	ldr	r2, [pc, #340]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519e:	f7fc fc41 	bl	8001a24 <HAL_GetTick>
 80051a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a6:	f7fc fc3d 	bl	8001a24 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e219      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051b8:	4b4c      	ldr	r3, [pc, #304]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80051ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x35e>
 80051c4:	e018      	b.n	80051f8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c6:	4b49      	ldr	r3, [pc, #292]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80051c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ca:	4a48      	ldr	r2, [pc, #288]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d2:	f7fc fc27 	bl	8001a24 <HAL_GetTick>
 80051d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051da:	f7fc fc23 	bl	8001a24 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e1ff      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051ec:	4b3f      	ldr	r3, [pc, #252]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80051ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f0      	bne.n	80051da <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d036      	beq.n	8005272 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d019      	beq.n	8005240 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800520c:	4b37      	ldr	r3, [pc, #220]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a36      	ldr	r2, [pc, #216]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005212:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005216:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005218:	f7fc fc04 	bl	8001a24 <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005220:	f7fc fc00 	bl	8001a24 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e1dc      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005232:	4b2e      	ldr	r3, [pc, #184]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x3d8>
 800523e:	e018      	b.n	8005272 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005240:	4b2a      	ldr	r3, [pc, #168]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a29      	ldr	r2, [pc, #164]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005246:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800524a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800524c:	f7fc fbea 	bl	8001a24 <HAL_GetTick>
 8005250:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005254:	f7fc fbe6 	bl	8001a24 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e1c2      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005266:	4b21      	ldr	r3, [pc, #132]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8086 	beq.w	800538c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005280:	4b1b      	ldr	r3, [pc, #108]	@ (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1a      	ldr	r2, [pc, #104]	@ (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800528a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800528c:	f7fc fbca 	bl	8001a24 <HAL_GetTick>
 8005290:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005294:	f7fc fbc6 	bl	8001a24 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	@ 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e1a2      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052a6:	4b12      	ldr	r3, [pc, #72]	@ (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d106      	bne.n	80052c8 <HAL_RCC_OscConfig+0x480>
 80052ba:	4b0c      	ldr	r3, [pc, #48]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052be:	4a0b      	ldr	r2, [pc, #44]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c6:	e032      	b.n	800532e <HAL_RCC_OscConfig+0x4e6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d111      	bne.n	80052f4 <HAL_RCC_OscConfig+0x4ac>
 80052d0:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	4a05      	ldr	r2, [pc, #20]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	6713      	str	r3, [r2, #112]	@ 0x70
 80052dc:	4b03      	ldr	r3, [pc, #12]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	4a02      	ldr	r2, [pc, #8]	@ (80052ec <HAL_RCC_OscConfig+0x4a4>)
 80052e2:	f023 0304 	bic.w	r3, r3, #4
 80052e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e8:	e021      	b.n	800532e <HAL_RCC_OscConfig+0x4e6>
 80052ea:	bf00      	nop
 80052ec:	58024400 	.word	0x58024400
 80052f0:	58024800 	.word	0x58024800
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b05      	cmp	r3, #5
 80052fa:	d10c      	bne.n	8005316 <HAL_RCC_OscConfig+0x4ce>
 80052fc:	4b83      	ldr	r3, [pc, #524]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005300:	4a82      	ldr	r2, [pc, #520]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005302:	f043 0304 	orr.w	r3, r3, #4
 8005306:	6713      	str	r3, [r2, #112]	@ 0x70
 8005308:	4b80      	ldr	r3, [pc, #512]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530c:	4a7f      	ldr	r2, [pc, #508]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	6713      	str	r3, [r2, #112]	@ 0x70
 8005314:	e00b      	b.n	800532e <HAL_RCC_OscConfig+0x4e6>
 8005316:	4b7d      	ldr	r3, [pc, #500]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	4a7c      	ldr	r2, [pc, #496]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	6713      	str	r3, [r2, #112]	@ 0x70
 8005322:	4b7a      	ldr	r3, [pc, #488]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005326:	4a79      	ldr	r2, [pc, #484]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005328:	f023 0304 	bic.w	r3, r3, #4
 800532c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d015      	beq.n	8005362 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005336:	f7fc fb75 	bl	8001a24 <HAL_GetTick>
 800533a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800533c:	e00a      	b.n	8005354 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533e:	f7fc fb71 	bl	8001a24 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534c:	4293      	cmp	r3, r2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e14b      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005354:	4b6d      	ldr	r3, [pc, #436]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ee      	beq.n	800533e <HAL_RCC_OscConfig+0x4f6>
 8005360:	e014      	b.n	800538c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fc fb5f 	bl	8001a24 <HAL_GetTick>
 8005366:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536a:	f7fc fb5b 	bl	8001a24 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e135      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005380:	4b62      	ldr	r3, [pc, #392]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ee      	bne.n	800536a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 812a 	beq.w	80055ea <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005396:	4b5d      	ldr	r3, [pc, #372]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800539e:	2b18      	cmp	r3, #24
 80053a0:	f000 80ba 	beq.w	8005518 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	f040 8095 	bne.w	80054d8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	4b57      	ldr	r3, [pc, #348]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a56      	ldr	r2, [pc, #344]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80053b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ba:	f7fc fb33 	bl	8001a24 <HAL_GetTick>
 80053be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c2:	f7fc fb2f 	bl	8001a24 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e10b      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053d4:	4b4d      	ldr	r3, [pc, #308]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1f0      	bne.n	80053c2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053e0:	4b4a      	ldr	r3, [pc, #296]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80053e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005510 <HAL_RCC_OscConfig+0x6c8>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053f0:	0112      	lsls	r2, r2, #4
 80053f2:	430a      	orrs	r2, r1
 80053f4:	4945      	ldr	r1, [pc, #276]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	3b01      	subs	r3, #1
 8005400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005408:	3b01      	subs	r3, #1
 800540a:	025b      	lsls	r3, r3, #9
 800540c:	b29b      	uxth	r3, r3
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005414:	3b01      	subs	r3, #1
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005422:	3b01      	subs	r3, #1
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800542a:	4938      	ldr	r1, [pc, #224]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005430:	4b36      	ldr	r3, [pc, #216]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	4a35      	ldr	r2, [pc, #212]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800543c:	4b33      	ldr	r3, [pc, #204]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800543e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005440:	4b34      	ldr	r3, [pc, #208]	@ (8005514 <HAL_RCC_OscConfig+0x6cc>)
 8005442:	4013      	ands	r3, r2
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005448:	00d2      	lsls	r2, r2, #3
 800544a:	4930      	ldr	r1, [pc, #192]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800544c:	4313      	orrs	r3, r2
 800544e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005450:	4b2e      	ldr	r3, [pc, #184]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	f023 020c 	bic.w	r2, r3, #12
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545c:	492b      	ldr	r1, [pc, #172]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800545e:	4313      	orrs	r3, r2
 8005460:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005462:	4b2a      	ldr	r3, [pc, #168]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	f023 0202 	bic.w	r2, r3, #2
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	4927      	ldr	r1, [pc, #156]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005470:	4313      	orrs	r3, r2
 8005472:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005474:	4b25      	ldr	r3, [pc, #148]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	4a24      	ldr	r2, [pc, #144]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800547a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800547e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005480:	4b22      	ldr	r3, [pc, #136]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	4a21      	ldr	r2, [pc, #132]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800548c:	4b1f      	ldr	r3, [pc, #124]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800548e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005490:	4a1e      	ldr	r2, [pc, #120]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005492:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005498:	4b1c      	ldr	r3, [pc, #112]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	4a1b      	ldr	r2, [pc, #108]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a4:	4b19      	ldr	r3, [pc, #100]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a18      	ldr	r2, [pc, #96]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80054aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fc fab8 	bl	8001a24 <HAL_GetTick>
 80054b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fc fab4 	bl	8001a24 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e090      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054ca:	4b10      	ldr	r3, [pc, #64]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x670>
 80054d6:	e088      	b.n	80055ea <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d8:	4b0c      	ldr	r3, [pc, #48]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a0b      	ldr	r2, [pc, #44]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 80054de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fc fa9e 	bl	8001a24 <HAL_GetTick>
 80054e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fc fa9a 	bl	8001a24 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e076      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054fe:	4b03      	ldr	r3, [pc, #12]	@ (800550c <HAL_RCC_OscConfig+0x6c4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x6a4>
 800550a:	e06e      	b.n	80055ea <HAL_RCC_OscConfig+0x7a2>
 800550c:	58024400 	.word	0x58024400
 8005510:	fffffc0c 	.word	0xfffffc0c
 8005514:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005518:	4b36      	ldr	r3, [pc, #216]	@ (80055f4 <HAL_RCC_OscConfig+0x7ac>)
 800551a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800551e:	4b35      	ldr	r3, [pc, #212]	@ (80055f4 <HAL_RCC_OscConfig+0x7ac>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	2b01      	cmp	r3, #1
 800552a:	d031      	beq.n	8005590 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f003 0203 	and.w	r2, r3, #3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005536:	429a      	cmp	r2, r3
 8005538:	d12a      	bne.n	8005590 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005546:	429a      	cmp	r2, r3
 8005548:	d122      	bne.n	8005590 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005556:	429a      	cmp	r2, r3
 8005558:	d11a      	bne.n	8005590 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	0a5b      	lsrs	r3, r3, #9
 800555e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005566:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d111      	bne.n	8005590 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	0c1b      	lsrs	r3, r3, #16
 8005570:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d108      	bne.n	8005590 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	0e1b      	lsrs	r3, r3, #24
 8005582:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e02b      	b.n	80055ec <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005594:	4b17      	ldr	r3, [pc, #92]	@ (80055f4 <HAL_RCC_OscConfig+0x7ac>)
 8005596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005598:	08db      	lsrs	r3, r3, #3
 800559a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800559e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d01f      	beq.n	80055ea <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80055aa:	4b12      	ldr	r3, [pc, #72]	@ (80055f4 <HAL_RCC_OscConfig+0x7ac>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ae:	4a11      	ldr	r2, [pc, #68]	@ (80055f4 <HAL_RCC_OscConfig+0x7ac>)
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055b6:	f7fc fa35 	bl	8001a24 <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80055bc:	bf00      	nop
 80055be:	f7fc fa31 	bl	8001a24 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d0f9      	beq.n	80055be <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055ca:	4b0a      	ldr	r3, [pc, #40]	@ (80055f4 <HAL_RCC_OscConfig+0x7ac>)
 80055cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ce:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <HAL_RCC_OscConfig+0x7b0>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055d6:	00d2      	lsls	r2, r2, #3
 80055d8:	4906      	ldr	r1, [pc, #24]	@ (80055f4 <HAL_RCC_OscConfig+0x7ac>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80055de:	4b05      	ldr	r3, [pc, #20]	@ (80055f4 <HAL_RCC_OscConfig+0x7ac>)
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	4a04      	ldr	r2, [pc, #16]	@ (80055f4 <HAL_RCC_OscConfig+0x7ac>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3730      	adds	r7, #48	@ 0x30
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	58024400 	.word	0x58024400
 80055f8:	ffff0007 	.word	0xffff0007

080055fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e19c      	b.n	800594a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005610:	4b8a      	ldr	r3, [pc, #552]	@ (800583c <HAL_RCC_ClockConfig+0x240>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d910      	bls.n	8005640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b87      	ldr	r3, [pc, #540]	@ (800583c <HAL_RCC_ClockConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 020f 	bic.w	r2, r3, #15
 8005626:	4985      	ldr	r1, [pc, #532]	@ (800583c <HAL_RCC_ClockConfig+0x240>)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b83      	ldr	r3, [pc, #524]	@ (800583c <HAL_RCC_ClockConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d001      	beq.n	8005640 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e184      	b.n	800594a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d010      	beq.n	800566e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	4b7b      	ldr	r3, [pc, #492]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005658:	429a      	cmp	r2, r3
 800565a:	d908      	bls.n	800566e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800565c:	4b78      	ldr	r3, [pc, #480]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	4975      	ldr	r1, [pc, #468]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 800566a:	4313      	orrs	r3, r2
 800566c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d010      	beq.n	800569c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	4b70      	ldr	r3, [pc, #448]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005686:	429a      	cmp	r2, r3
 8005688:	d908      	bls.n	800569c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800568a:	4b6d      	ldr	r3, [pc, #436]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	496a      	ldr	r1, [pc, #424]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 8005698:	4313      	orrs	r3, r2
 800569a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	4b64      	ldr	r3, [pc, #400]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d908      	bls.n	80056ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056b8:	4b61      	ldr	r3, [pc, #388]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	495e      	ldr	r1, [pc, #376]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d010      	beq.n	80056f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	4b59      	ldr	r3, [pc, #356]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d908      	bls.n	80056f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056e6:	4b56      	ldr	r3, [pc, #344]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	4953      	ldr	r1, [pc, #332]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	4b4d      	ldr	r3, [pc, #308]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	429a      	cmp	r2, r3
 8005712:	d908      	bls.n	8005726 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005714:	4b4a      	ldr	r3, [pc, #296]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	f023 020f 	bic.w	r2, r3, #15
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4947      	ldr	r1, [pc, #284]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 8005722:	4313      	orrs	r3, r2
 8005724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d055      	beq.n	80057de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005732:	4b43      	ldr	r3, [pc, #268]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	4940      	ldr	r1, [pc, #256]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 8005740:	4313      	orrs	r3, r2
 8005742:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d107      	bne.n	800575c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800574c:	4b3c      	ldr	r3, [pc, #240]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d121      	bne.n	800579c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e0f6      	b.n	800594a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b03      	cmp	r3, #3
 8005762:	d107      	bne.n	8005774 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005764:	4b36      	ldr	r3, [pc, #216]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d115      	bne.n	800579c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0ea      	b.n	800594a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d107      	bne.n	800578c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800577c:	4b30      	ldr	r3, [pc, #192]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0de      	b.n	800594a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800578c:	4b2c      	ldr	r3, [pc, #176]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0d6      	b.n	800594a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800579c:	4b28      	ldr	r3, [pc, #160]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f023 0207 	bic.w	r2, r3, #7
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4925      	ldr	r1, [pc, #148]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ae:	f7fc f939 	bl	8001a24 <HAL_GetTick>
 80057b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b4:	e00a      	b.n	80057cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b6:	f7fc f935 	bl	8001a24 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e0be      	b.n	800594a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	429a      	cmp	r2, r3
 80057dc:	d1eb      	bne.n	80057b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d010      	beq.n	800580c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	4b14      	ldr	r3, [pc, #80]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d208      	bcs.n	800580c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057fa:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f023 020f 	bic.w	r2, r3, #15
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	490e      	ldr	r1, [pc, #56]	@ (8005840 <HAL_RCC_ClockConfig+0x244>)
 8005808:	4313      	orrs	r3, r2
 800580a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800580c:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <HAL_RCC_ClockConfig+0x240>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d214      	bcs.n	8005844 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b08      	ldr	r3, [pc, #32]	@ (800583c <HAL_RCC_ClockConfig+0x240>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 020f 	bic.w	r2, r3, #15
 8005822:	4906      	ldr	r1, [pc, #24]	@ (800583c <HAL_RCC_ClockConfig+0x240>)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b04      	ldr	r3, [pc, #16]	@ (800583c <HAL_RCC_ClockConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d005      	beq.n	8005844 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e086      	b.n	800594a <HAL_RCC_ClockConfig+0x34e>
 800583c:	52002000 	.word	0x52002000
 8005840:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d010      	beq.n	8005872 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	4b3f      	ldr	r3, [pc, #252]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800585c:	429a      	cmp	r2, r3
 800585e:	d208      	bcs.n	8005872 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005860:	4b3c      	ldr	r3, [pc, #240]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	4939      	ldr	r1, [pc, #228]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 800586e:	4313      	orrs	r3, r2
 8005870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d010      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	4b34      	ldr	r3, [pc, #208]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800588a:	429a      	cmp	r2, r3
 800588c:	d208      	bcs.n	80058a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800588e:	4b31      	ldr	r3, [pc, #196]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	492e      	ldr	r1, [pc, #184]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 800589c:	4313      	orrs	r3, r2
 800589e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d010      	beq.n	80058ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	4b28      	ldr	r3, [pc, #160]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d208      	bcs.n	80058ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058bc:	4b25      	ldr	r3, [pc, #148]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	4922      	ldr	r1, [pc, #136]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d010      	beq.n	80058fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69da      	ldr	r2, [r3, #28]
 80058de:	4b1d      	ldr	r3, [pc, #116]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d208      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	4917      	ldr	r1, [pc, #92]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058fc:	f000 f834 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8005900:	4602      	mov	r2, r0
 8005902:	4b14      	ldr	r3, [pc, #80]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	0a1b      	lsrs	r3, r3, #8
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	4912      	ldr	r1, [pc, #72]	@ (8005958 <HAL_RCC_ClockConfig+0x35c>)
 800590e:	5ccb      	ldrb	r3, [r1, r3]
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
 8005918:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800591a:	4b0e      	ldr	r3, [pc, #56]	@ (8005954 <HAL_RCC_ClockConfig+0x358>)
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	4a0d      	ldr	r2, [pc, #52]	@ (8005958 <HAL_RCC_ClockConfig+0x35c>)
 8005924:	5cd3      	ldrb	r3, [r2, r3]
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
 8005930:	4a0a      	ldr	r2, [pc, #40]	@ (800595c <HAL_RCC_ClockConfig+0x360>)
 8005932:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005934:	4a0a      	ldr	r2, [pc, #40]	@ (8005960 <HAL_RCC_ClockConfig+0x364>)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800593a:	4b0a      	ldr	r3, [pc, #40]	@ (8005964 <HAL_RCC_ClockConfig+0x368>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fc f826 	bl	8001990 <HAL_InitTick>
 8005944:	4603      	mov	r3, r0
 8005946:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	58024400 	.word	0x58024400
 8005958:	0800caa0 	.word	0x0800caa0
 800595c:	24000004 	.word	0x24000004
 8005960:	24000000 	.word	0x24000000
 8005964:	24000008 	.word	0x24000008

08005968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	@ 0x24
 800596c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800596e:	4bb3      	ldr	r3, [pc, #716]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005976:	2b18      	cmp	r3, #24
 8005978:	f200 8155 	bhi.w	8005c26 <HAL_RCC_GetSysClockFreq+0x2be>
 800597c:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <HAL_RCC_GetSysClockFreq+0x1c>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	080059e9 	.word	0x080059e9
 8005988:	08005c27 	.word	0x08005c27
 800598c:	08005c27 	.word	0x08005c27
 8005990:	08005c27 	.word	0x08005c27
 8005994:	08005c27 	.word	0x08005c27
 8005998:	08005c27 	.word	0x08005c27
 800599c:	08005c27 	.word	0x08005c27
 80059a0:	08005c27 	.word	0x08005c27
 80059a4:	08005a0f 	.word	0x08005a0f
 80059a8:	08005c27 	.word	0x08005c27
 80059ac:	08005c27 	.word	0x08005c27
 80059b0:	08005c27 	.word	0x08005c27
 80059b4:	08005c27 	.word	0x08005c27
 80059b8:	08005c27 	.word	0x08005c27
 80059bc:	08005c27 	.word	0x08005c27
 80059c0:	08005c27 	.word	0x08005c27
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005c27 	.word	0x08005c27
 80059cc:	08005c27 	.word	0x08005c27
 80059d0:	08005c27 	.word	0x08005c27
 80059d4:	08005c27 	.word	0x08005c27
 80059d8:	08005c27 	.word	0x08005c27
 80059dc:	08005c27 	.word	0x08005c27
 80059e0:	08005c27 	.word	0x08005c27
 80059e4:	08005a1b 	.word	0x08005a1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e8:	4b94      	ldr	r3, [pc, #592]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059f4:	4b91      	ldr	r3, [pc, #580]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	08db      	lsrs	r3, r3, #3
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	4a90      	ldr	r2, [pc, #576]	@ (8005c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
 8005a04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005a06:	e111      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a08:	4b8d      	ldr	r3, [pc, #564]	@ (8005c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a0a:	61bb      	str	r3, [r7, #24]
      break;
 8005a0c:	e10e      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a10:	61bb      	str	r3, [r7, #24]
      break;
 8005a12:	e10b      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005a14:	4b8c      	ldr	r3, [pc, #560]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a16:	61bb      	str	r3, [r7, #24]
      break;
 8005a18:	e108      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a1a:	4b88      	ldr	r3, [pc, #544]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a24:	4b85      	ldr	r3, [pc, #532]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a2e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a30:	4b82      	ldr	r3, [pc, #520]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a3a:	4b80      	ldr	r3, [pc, #512]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a3e:	08db      	lsrs	r3, r3, #3
 8005a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	fb02 f303 	mul.w	r3, r2, r3
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a52:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80e1 	beq.w	8005c20 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	f000 8083 	beq.w	8005b6c <HAL_RCC_GetSysClockFreq+0x204>
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	f200 80a1 	bhi.w	8005bb0 <HAL_RCC_GetSysClockFreq+0x248>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x114>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d056      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a7a:	e099      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d02d      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a88:	4b6c      	ldr	r3, [pc, #432]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	08db      	lsrs	r3, r3, #3
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	4a6b      	ldr	r2, [pc, #428]	@ (8005c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
 8005a98:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	ee07 3a90 	vmov	s15, r3
 8005aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab2:	4b62      	ldr	r3, [pc, #392]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ac6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005ae2:	e087      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af6:	4b51      	ldr	r3, [pc, #324]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b0a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b26:	e065      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b32:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3a:	4b40      	ldr	r3, [pc, #256]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b4e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b6a:	e043      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005c58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b92:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bae:	e021      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bd6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bf2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005bf4:	4b11      	ldr	r3, [pc, #68]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	0a5b      	lsrs	r3, r3, #9
 8005bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bfe:	3301      	adds	r3, #1
 8005c00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	ee07 3a90 	vmov	s15, r3
 8005c08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c18:	ee17 3a90 	vmov	r3, s15
 8005c1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005c1e:	e005      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61bb      	str	r3, [r7, #24]
      break;
 8005c24:	e002      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005c26:	4b07      	ldr	r3, [pc, #28]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c28:	61bb      	str	r3, [r7, #24]
      break;
 8005c2a:	bf00      	nop
  }

  return sysclockfreq;
 8005c2c:	69bb      	ldr	r3, [r7, #24]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3724      	adds	r7, #36	@ 0x24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	03d09000 	.word	0x03d09000
 8005c44:	003d0900 	.word	0x003d0900
 8005c48:	017d7840 	.word	0x017d7840
 8005c4c:	46000000 	.word	0x46000000
 8005c50:	4c742400 	.word	0x4c742400
 8005c54:	4a742400 	.word	0x4a742400
 8005c58:	4bbebc20 	.word	0x4bbebc20

08005c5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c60:	b0c6      	sub	sp, #280	@ 0x118
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c80:	2500      	movs	r5, #0
 8005c82:	ea54 0305 	orrs.w	r3, r4, r5
 8005c86:	d049      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c92:	d02f      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c98:	d828      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c9e:	d01a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ca0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ca4:	d822      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cae:	d007      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cb0:	e01c      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb2:	4bab      	ldr	r3, [pc, #684]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	4aaa      	ldr	r2, [pc, #680]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cbe:	e01a      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 f967 	bl	8006f9c <RCCEx_PLL2_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cd4:	e00f      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cda:	3328      	adds	r3, #40	@ 0x28
 8005cdc:	2102      	movs	r1, #2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fa0e 	bl	8007100 <RCCEx_PLL3_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cea:	e004      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005cfe:	4b98      	ldr	r3, [pc, #608]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d0c:	4a94      	ldr	r2, [pc, #592]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d12:	e003      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005d28:	f04f 0900 	mov.w	r9, #0
 8005d2c:	ea58 0309 	orrs.w	r3, r8, r9
 8005d30:	d047      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d82a      	bhi.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d59 	.word	0x08005d59
 8005d48:	08005d67 	.word	0x08005d67
 8005d4c:	08005d7d 	.word	0x08005d7d
 8005d50:	08005d9b 	.word	0x08005d9b
 8005d54:	08005d9b 	.word	0x08005d9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d58:	4b81      	ldr	r3, [pc, #516]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5c:	4a80      	ldr	r2, [pc, #512]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d64:	e01a      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f001 f914 	bl	8006f9c <RCCEx_PLL2_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d7a:	e00f      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d80:	3328      	adds	r3, #40	@ 0x28
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 f9bb 	bl	8007100 <RCCEx_PLL3_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d90:	e004      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005da4:	4b6e      	ldr	r3, [pc, #440]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da8:	f023 0107 	bic.w	r1, r3, #7
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db2:	4a6b      	ldr	r2, [pc, #428]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005dce:	f04f 0b00 	mov.w	fp, #0
 8005dd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dd6:	d05b      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005de0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005de4:	d03b      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005de6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005dea:	d834      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005dec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005df0:	d037      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005df2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005df6:	d82e      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005df8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005dfc:	d033      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005dfe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e02:	d828      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e08:	d01a      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e0e:	d822      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005e14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e18:	d007      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005e1a:	e01c      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e1c:	4b50      	ldr	r3, [pc, #320]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	4a4f      	ldr	r2, [pc, #316]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e28:	e01e      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2e:	3308      	adds	r3, #8
 8005e30:	2100      	movs	r1, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 f8b2 	bl	8006f9c <RCCEx_PLL2_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e3e:	e013      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e44:	3328      	adds	r3, #40	@ 0x28
 8005e46:	2100      	movs	r1, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 f959 	bl	8007100 <RCCEx_PLL3_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e54:	e008      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e5c:	e004      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e5e:	bf00      	nop
 8005e60:	e002      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e62:	bf00      	nop
 8005e64:	e000      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e70:	4b3b      	ldr	r3, [pc, #236]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e74:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e80:	4a37      	ldr	r2, [pc, #220]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e82:	430b      	orrs	r3, r1
 8005e84:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ea6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d05d      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005eb8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ebc:	d03b      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005ebe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ec2:	d834      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ec4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ec8:	d037      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005eca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ece:	d82e      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ed0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ed4:	d033      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005ed6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005eda:	d828      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ee0:	d01a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005ee2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ee6:	d822      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ef0:	d007      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005ef2:	e01c      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef8:	4a19      	ldr	r2, [pc, #100]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f00:	e01e      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f06:	3308      	adds	r3, #8
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 f846 	bl	8006f9c <RCCEx_PLL2_Config>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f16:	e013      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	3328      	adds	r3, #40	@ 0x28
 8005f1e:	2100      	movs	r1, #0
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 f8ed 	bl	8007100 <RCCEx_PLL3_Config>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f2c:	e008      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f34:	e004      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f36:	bf00      	nop
 8005f38:	e002      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10d      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f48:	4b05      	ldr	r3, [pc, #20]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f4c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f58:	4a01      	ldr	r2, [pc, #4]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f5e:	e005      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f82:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	d03a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f92:	2b30      	cmp	r3, #48	@ 0x30
 8005f94:	d01f      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005f96:	2b30      	cmp	r3, #48	@ 0x30
 8005f98:	d819      	bhi.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d815      	bhi.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d019      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d111      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005faa:	4baa      	ldr	r3, [pc, #680]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	4aa9      	ldr	r2, [pc, #676]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005fb6:	e011      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 ffeb 	bl	8006f9c <RCCEx_PLL2_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005fcc:	e006      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fd4:	e002      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005fd6:	bf00      	nop
 8005fd8:	e000      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005fe4:	4b9b      	ldr	r3, [pc, #620]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ff2:	4a98      	ldr	r2, [pc, #608]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ff8:	e003      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ffe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800600e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006012:	2300      	movs	r3, #0
 8006014:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006018:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800601c:	460b      	mov	r3, r1
 800601e:	4313      	orrs	r3, r2
 8006020:	d051      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006028:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800602c:	d035      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800602e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006032:	d82e      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006034:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006038:	d031      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800603a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800603e:	d828      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006044:	d01a      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800604a:	d822      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006054:	d007      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006056:	e01c      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006058:	4b7e      	ldr	r3, [pc, #504]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	4a7d      	ldr	r2, [pc, #500]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800605e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006064:	e01c      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606a:	3308      	adds	r3, #8
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f000 ff94 	bl	8006f9c <RCCEx_PLL2_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800607a:	e011      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006080:	3328      	adds	r3, #40	@ 0x28
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f001 f83b 	bl	8007100 <RCCEx_PLL3_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006090:	e006      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800609e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80060a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80060b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b6:	4a67      	ldr	r2, [pc, #412]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80060d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d053      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060f0:	d033      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80060f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060f6:	d82c      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060fc:	d02f      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80060fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006102:	d826      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006104:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006108:	d02b      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800610a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800610e:	d820      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006114:	d012      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800611a:	d81a      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d022      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006124:	d115      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612a:	3308      	adds	r3, #8
 800612c:	2101      	movs	r1, #1
 800612e:	4618      	mov	r0, r3
 8006130:	f000 ff34 	bl	8006f9c <RCCEx_PLL2_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800613a:	e015      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	3328      	adds	r3, #40	@ 0x28
 8006142:	2101      	movs	r1, #1
 8006144:	4618      	mov	r0, r3
 8006146:	f000 ffdb 	bl	8007100 <RCCEx_PLL3_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006150:	e00a      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006158:	e006      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800615a:	bf00      	nop
 800615c:	e004      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800615e:	bf00      	nop
 8006160:	e002      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006162:	bf00      	nop
 8006164:	e000      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006170:	4b38      	ldr	r3, [pc, #224]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006174:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800617e:	4a35      	ldr	r2, [pc, #212]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006180:	430b      	orrs	r3, r1
 8006182:	6513      	str	r3, [r2, #80]	@ 0x50
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800618a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800618e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800619a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061a8:	460b      	mov	r3, r1
 80061aa:	4313      	orrs	r3, r2
 80061ac:	d058      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ba:	d033      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80061bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061c0:	d82c      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c6:	d02f      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061cc:	d826      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061d2:	d02b      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80061d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061d8:	d820      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061de:	d012      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80061e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e4:	d81a      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d022      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ee:	d115      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f4:	3308      	adds	r3, #8
 80061f6:	2101      	movs	r1, #1
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fecf 	bl	8006f9c <RCCEx_PLL2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006204:	e015      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620a:	3328      	adds	r3, #40	@ 0x28
 800620c:	2101      	movs	r1, #1
 800620e:	4618      	mov	r0, r3
 8006210:	f000 ff76 	bl	8007100 <RCCEx_PLL3_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800621a:	e00a      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006222:	e006      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006224:	bf00      	nop
 8006226:	e004      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006232:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10e      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800623a:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800623c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800624a:	4a02      	ldr	r2, [pc, #8]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800624c:	430b      	orrs	r3, r1
 800624e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006250:	e006      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006252:	bf00      	nop
 8006254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800625c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800626c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006270:	2300      	movs	r3, #0
 8006272:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006276:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800627a:	460b      	mov	r3, r1
 800627c:	4313      	orrs	r3, r2
 800627e:	d037      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628a:	d00e      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800628c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006290:	d816      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d018      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006296:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800629a:	d111      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629c:	4bc4      	ldr	r3, [pc, #784]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	4ac3      	ldr	r2, [pc, #780]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062a8:	e00f      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ae:	3308      	adds	r3, #8
 80062b0:	2101      	movs	r1, #1
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fe72 	bl	8006f9c <RCCEx_PLL2_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062be:	e004      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062c6:	e000      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80062c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062d2:	4bb7      	ldr	r3, [pc, #732]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062e0:	4ab3      	ldr	r2, [pc, #716]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e2:	430b      	orrs	r3, r1
 80062e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80062e6:	e003      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80062fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006300:	2300      	movs	r3, #0
 8006302:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006306:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800630a:	460b      	mov	r3, r1
 800630c:	4313      	orrs	r3, r2
 800630e:	d039      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006316:	2b03      	cmp	r3, #3
 8006318:	d81c      	bhi.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800631a:	a201      	add	r2, pc, #4	@ (adr r2, 8006320 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	0800635d 	.word	0x0800635d
 8006324:	08006331 	.word	0x08006331
 8006328:	0800633f 	.word	0x0800633f
 800632c:	0800635d 	.word	0x0800635d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006330:	4b9f      	ldr	r3, [pc, #636]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	4a9e      	ldr	r2, [pc, #632]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800633a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800633c:	e00f      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006342:	3308      	adds	r3, #8
 8006344:	2102      	movs	r1, #2
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fe28 	bl	8006f9c <RCCEx_PLL2_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006352:	e004      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800635a:	e000      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800635c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800635e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006366:	4b92      	ldr	r3, [pc, #584]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800636a:	f023 0103 	bic.w	r1, r3, #3
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006374:	4a8e      	ldr	r2, [pc, #568]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006376:	430b      	orrs	r3, r1
 8006378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800637a:	e003      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006380:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006390:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006394:	2300      	movs	r3, #0
 8006396:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800639a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800639e:	460b      	mov	r3, r1
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f000 8099 	beq.w	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063a6:	4b83      	ldr	r3, [pc, #524]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a82      	ldr	r2, [pc, #520]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063b2:	f7fb fb37 	bl	8001a24 <HAL_GetTick>
 80063b6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ba:	e00b      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063bc:	f7fb fb32 	bl	8001a24 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b64      	cmp	r3, #100	@ 0x64
 80063ca:	d903      	bls.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063d2:	e005      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063d4:	4b77      	ldr	r3, [pc, #476]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0ed      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80063e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d173      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80063e8:	4b71      	ldr	r3, [pc, #452]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063f4:	4053      	eors	r3, r2
 80063f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d015      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063fe:	4b6c      	ldr	r3, [pc, #432]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006406:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800640a:	4b69      	ldr	r3, [pc, #420]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800640c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640e:	4a68      	ldr	r2, [pc, #416]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006414:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006416:	4b66      	ldr	r3, [pc, #408]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641a:	4a65      	ldr	r2, [pc, #404]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800641c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006420:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006422:	4a63      	ldr	r2, [pc, #396]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006428:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006436:	d118      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fb faf4 	bl	8001a24 <HAL_GetTick>
 800643c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006440:	e00d      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006442:	f7fb faef 	bl	8001a24 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800644c:	1ad2      	subs	r2, r2, r3
 800644e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006452:	429a      	cmp	r2, r3
 8006454:	d903      	bls.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800645c:	e005      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800645e:	4b54      	ldr	r3, [pc, #336]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0eb      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800646a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800646e:	2b00      	cmp	r3, #0
 8006470:	d129      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800647a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800647e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006482:	d10e      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006484:	4b4a      	ldr	r3, [pc, #296]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006490:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006494:	091a      	lsrs	r2, r3, #4
 8006496:	4b48      	ldr	r3, [pc, #288]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006498:	4013      	ands	r3, r2
 800649a:	4a45      	ldr	r2, [pc, #276]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800649c:	430b      	orrs	r3, r1
 800649e:	6113      	str	r3, [r2, #16]
 80064a0:	e005      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80064a2:	4b43      	ldr	r3, [pc, #268]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	4a42      	ldr	r2, [pc, #264]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064ac:	6113      	str	r3, [r2, #16]
 80064ae:	4b40      	ldr	r3, [pc, #256]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064be:	4a3c      	ldr	r2, [pc, #240]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064c0:	430b      	orrs	r3, r1
 80064c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064c4:	e008      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80064ce:	e003      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f002 0301 	and.w	r3, r2, #1
 80064e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064e8:	2300      	movs	r3, #0
 80064ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80064ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f000 808f 	beq.w	8006618 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80064fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006500:	2b28      	cmp	r3, #40	@ 0x28
 8006502:	d871      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006504:	a201      	add	r2, pc, #4	@ (adr r2, 800650c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	080065f1 	.word	0x080065f1
 8006510:	080065e9 	.word	0x080065e9
 8006514:	080065e9 	.word	0x080065e9
 8006518:	080065e9 	.word	0x080065e9
 800651c:	080065e9 	.word	0x080065e9
 8006520:	080065e9 	.word	0x080065e9
 8006524:	080065e9 	.word	0x080065e9
 8006528:	080065e9 	.word	0x080065e9
 800652c:	080065bd 	.word	0x080065bd
 8006530:	080065e9 	.word	0x080065e9
 8006534:	080065e9 	.word	0x080065e9
 8006538:	080065e9 	.word	0x080065e9
 800653c:	080065e9 	.word	0x080065e9
 8006540:	080065e9 	.word	0x080065e9
 8006544:	080065e9 	.word	0x080065e9
 8006548:	080065e9 	.word	0x080065e9
 800654c:	080065d3 	.word	0x080065d3
 8006550:	080065e9 	.word	0x080065e9
 8006554:	080065e9 	.word	0x080065e9
 8006558:	080065e9 	.word	0x080065e9
 800655c:	080065e9 	.word	0x080065e9
 8006560:	080065e9 	.word	0x080065e9
 8006564:	080065e9 	.word	0x080065e9
 8006568:	080065e9 	.word	0x080065e9
 800656c:	080065f1 	.word	0x080065f1
 8006570:	080065e9 	.word	0x080065e9
 8006574:	080065e9 	.word	0x080065e9
 8006578:	080065e9 	.word	0x080065e9
 800657c:	080065e9 	.word	0x080065e9
 8006580:	080065e9 	.word	0x080065e9
 8006584:	080065e9 	.word	0x080065e9
 8006588:	080065e9 	.word	0x080065e9
 800658c:	080065f1 	.word	0x080065f1
 8006590:	080065e9 	.word	0x080065e9
 8006594:	080065e9 	.word	0x080065e9
 8006598:	080065e9 	.word	0x080065e9
 800659c:	080065e9 	.word	0x080065e9
 80065a0:	080065e9 	.word	0x080065e9
 80065a4:	080065e9 	.word	0x080065e9
 80065a8:	080065e9 	.word	0x080065e9
 80065ac:	080065f1 	.word	0x080065f1
 80065b0:	58024400 	.word	0x58024400
 80065b4:	58024800 	.word	0x58024800
 80065b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c0:	3308      	adds	r3, #8
 80065c2:	2101      	movs	r1, #1
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fce9 	bl	8006f9c <RCCEx_PLL2_Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065d0:	e00f      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	3328      	adds	r3, #40	@ 0x28
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fd90 	bl	8007100 <RCCEx_PLL3_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065e6:	e004      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065ee:	e000      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80065f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80065fa:	4bbf      	ldr	r3, [pc, #764]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006608:	4abb      	ldr	r2, [pc, #748]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800660a:	430b      	orrs	r3, r1
 800660c:	6553      	str	r3, [r2, #84]	@ 0x54
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006614:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 0302 	and.w	r3, r2, #2
 8006624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800662e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d041      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663e:	2b05      	cmp	r3, #5
 8006640:	d824      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006642:	a201      	add	r2, pc, #4	@ (adr r2, 8006648 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	08006695 	.word	0x08006695
 800664c:	08006661 	.word	0x08006661
 8006650:	08006677 	.word	0x08006677
 8006654:	08006695 	.word	0x08006695
 8006658:	08006695 	.word	0x08006695
 800665c:	08006695 	.word	0x08006695
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	3308      	adds	r3, #8
 8006666:	2101      	movs	r1, #1
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fc97 	bl	8006f9c <RCCEx_PLL2_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006674:	e00f      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667a:	3328      	adds	r3, #40	@ 0x28
 800667c:	2101      	movs	r1, #1
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fd3e 	bl	8007100 <RCCEx_PLL3_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800668a:	e004      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006692:	e000      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006696:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800669e:	4b96      	ldr	r3, [pc, #600]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a2:	f023 0107 	bic.w	r1, r3, #7
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ac:	4a92      	ldr	r2, [pc, #584]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066ae:	430b      	orrs	r3, r1
 80066b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80066b2:	e003      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f002 0304 	and.w	r3, r2, #4
 80066c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066cc:	2300      	movs	r3, #0
 80066ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066d6:	460b      	mov	r3, r1
 80066d8:	4313      	orrs	r3, r2
 80066da:	d044      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e4:	2b05      	cmp	r3, #5
 80066e6:	d825      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80066e8:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	0800673d 	.word	0x0800673d
 80066f4:	08006709 	.word	0x08006709
 80066f8:	0800671f 	.word	0x0800671f
 80066fc:	0800673d 	.word	0x0800673d
 8006700:	0800673d 	.word	0x0800673d
 8006704:	0800673d 	.word	0x0800673d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	3308      	adds	r3, #8
 800670e:	2101      	movs	r1, #1
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fc43 	bl	8006f9c <RCCEx_PLL2_Config>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800671c:	e00f      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006722:	3328      	adds	r3, #40	@ 0x28
 8006724:	2101      	movs	r1, #1
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fcea 	bl	8007100 <RCCEx_PLL3_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006732:	e004      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800673a:	e000      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800673c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006746:	4b6c      	ldr	r3, [pc, #432]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674a:	f023 0107 	bic.w	r1, r3, #7
 800674e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006756:	4a68      	ldr	r2, [pc, #416]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006758:	430b      	orrs	r3, r1
 800675a:	6593      	str	r3, [r2, #88]	@ 0x58
 800675c:	e003      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006762:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f002 0320 	and.w	r3, r2, #32
 8006772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006776:	2300      	movs	r3, #0
 8006778:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800677c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006780:	460b      	mov	r3, r1
 8006782:	4313      	orrs	r3, r2
 8006784:	d055      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800678e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006792:	d033      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006794:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006798:	d82c      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800679a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800679e:	d02f      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80067a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a4:	d826      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067aa:	d02b      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80067ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067b0:	d820      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067b6:	d012      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80067b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067bc:	d81a      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d022      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80067c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067c6:	d115      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067cc:	3308      	adds	r3, #8
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fbe3 	bl	8006f9c <RCCEx_PLL2_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067dc:	e015      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	3328      	adds	r3, #40	@ 0x28
 80067e4:	2102      	movs	r1, #2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fc8a 	bl	8007100 <RCCEx_PLL3_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067f2:	e00a      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067fa:	e006      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067fc:	bf00      	nop
 80067fe:	e004      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006800:	bf00      	nop
 8006802:	e002      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006804:	bf00      	nop
 8006806:	e000      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800680a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006812:	4b39      	ldr	r3, [pc, #228]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006816:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800681a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006822:	4a35      	ldr	r2, [pc, #212]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006824:	430b      	orrs	r3, r1
 8006826:	6553      	str	r3, [r2, #84]	@ 0x54
 8006828:	e003      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800682e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800683e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006842:	2300      	movs	r3, #0
 8006844:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006848:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800684c:	460b      	mov	r3, r1
 800684e:	4313      	orrs	r3, r2
 8006850:	d058      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800685a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800685e:	d033      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006860:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006864:	d82c      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800686a:	d02f      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800686c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006870:	d826      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006872:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006876:	d02b      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006878:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800687c:	d820      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800687e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006882:	d012      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006888:	d81a      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d022      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800688e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006892:	d115      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006898:	3308      	adds	r3, #8
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fb7d 	bl	8006f9c <RCCEx_PLL2_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068a8:	e015      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ae:	3328      	adds	r3, #40	@ 0x28
 80068b0:	2102      	movs	r1, #2
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fc24 	bl	8007100 <RCCEx_PLL3_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068be:	e00a      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068c6:	e006      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068c8:	bf00      	nop
 80068ca:	e004      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068cc:	bf00      	nop
 80068ce:	e002      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068d0:	bf00      	nop
 80068d2:	e000      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10e      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068de:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ee:	4a02      	ldr	r2, [pc, #8]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068f4:	e006      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80068f6:	bf00      	nop
 80068f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006900:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006910:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006914:	2300      	movs	r3, #0
 8006916:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800691a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800691e:	460b      	mov	r3, r1
 8006920:	4313      	orrs	r3, r2
 8006922:	d055      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006928:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800692c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006930:	d033      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006932:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006936:	d82c      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800693c:	d02f      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800693e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006942:	d826      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006944:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006948:	d02b      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800694a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800694e:	d820      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006954:	d012      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800695a:	d81a      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d022      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006964:	d115      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696a:	3308      	adds	r3, #8
 800696c:	2100      	movs	r1, #0
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fb14 	bl	8006f9c <RCCEx_PLL2_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800697a:	e015      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006980:	3328      	adds	r3, #40	@ 0x28
 8006982:	2102      	movs	r1, #2
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fbbb 	bl	8007100 <RCCEx_PLL3_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006990:	e00a      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006998:	e006      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800699a:	bf00      	nop
 800699c:	e004      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800699e:	bf00      	nop
 80069a0:	e002      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069a2:	bf00      	nop
 80069a4:	e000      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10b      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069b0:	4ba0      	ldr	r3, [pc, #640]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069c0:	4a9c      	ldr	r2, [pc, #624]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069c2:	430b      	orrs	r3, r1
 80069c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80069c6:	e003      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80069d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f002 0308 	and.w	r3, r2, #8
 80069dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80069ea:	460b      	mov	r3, r1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	d01e      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069fc:	d10c      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a02:	3328      	adds	r3, #40	@ 0x28
 8006a04:	2102      	movs	r1, #2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fb7a 	bl	8007100 <RCCEx_PLL3_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006a18:	4b86      	ldr	r3, [pc, #536]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a1c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a28:	4a82      	ldr	r2, [pc, #520]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f002 0310 	and.w	r3, r2, #16
 8006a3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a44:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	d01e      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a5a:	d10c      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a60:	3328      	adds	r3, #40	@ 0x28
 8006a62:	2102      	movs	r1, #2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fb4b 	bl	8007100 <RCCEx_PLL3_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a76:	4b6f      	ldr	r3, [pc, #444]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a86:	4a6b      	ldr	r2, [pc, #428]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a88:	430b      	orrs	r3, r1
 8006a8a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006a98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a9e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d03e      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ab0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ab4:	d022      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aba:	d81b      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac4:	d00b      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006ac6:	e015      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006acc:	3308      	adds	r3, #8
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fa63 	bl	8006f9c <RCCEx_PLL2_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006adc:	e00f      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae2:	3328      	adds	r3, #40	@ 0x28
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fb0a 	bl	8007100 <RCCEx_PLL3_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006af2:	e004      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006afa:	e000      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b06:	4b4b      	ldr	r3, [pc, #300]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b16:	4a47      	ldr	r2, [pc, #284]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b1c:	e003      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b32:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b34:	2300      	movs	r3, #0
 8006b36:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	d03b      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b4e:	d01f      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006b50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b54:	d818      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b5a:	d003      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006b5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b60:	d007      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006b62:	e011      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b64:	4b33      	ldr	r3, [pc, #204]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	4a32      	ldr	r2, [pc, #200]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b70:	e00f      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b76:	3328      	adds	r3, #40	@ 0x28
 8006b78:	2101      	movs	r1, #1
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fac0 	bl	8007100 <RCCEx_PLL3_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b86:	e004      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b8e:	e000      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b9a:	4b26      	ldr	r3, [pc, #152]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006baa:	4a22      	ldr	r2, [pc, #136]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006bc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bc8:	2300      	movs	r3, #0
 8006bca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bcc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	d034      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006be4:	d007      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006be6:	e011      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be8:	4b12      	ldr	r3, [pc, #72]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	4a11      	ldr	r2, [pc, #68]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bf4:	e00e      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	2102      	movs	r1, #2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 f9cc 	bl	8006f9c <RCCEx_PLL2_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c0a:	e003      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10d      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c1c:	4b05      	ldr	r3, [pc, #20]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c2a:	4a02      	ldr	r2, [pc, #8]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c30:	e006      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006c32:	bf00      	nop
 8006c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006c4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c4e:	2300      	movs	r3, #0
 8006c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c52:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006c56:	460b      	mov	r3, r1
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	d00c      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c60:	3328      	adds	r3, #40	@ 0x28
 8006c62:	2102      	movs	r1, #2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fa4b 	bl	8007100 <RCCEx_PLL3_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006c82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c84:	2300      	movs	r3, #0
 8006c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c88:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	d036      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c9c:	d018      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ca2:	d811      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ca8:	d014      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006caa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cae:	d80b      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d011      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cb8:	d106      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cba:	4bb7      	ldr	r3, [pc, #732]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	4ab6      	ldr	r2, [pc, #728]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006cc6:	e008      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cce:	e004      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006cd0:	bf00      	nop
 8006cd2:	e002      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006cd4:	bf00      	nop
 8006cd6:	e000      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ce2:	4bad      	ldr	r3, [pc, #692]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cf0:	4aa9      	ldr	r2, [pc, #676]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cf6:	e003      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d0e:	2300      	movs	r3, #0
 8006d10:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006d16:	460b      	mov	r3, r1
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d1c:	4b9e      	ldr	r3, [pc, #632]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2a:	4a9b      	ldr	r2, [pc, #620]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d3e:	2300      	movs	r3, #0
 8006d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006d46:	460b      	mov	r3, r1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	d009      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d4c:	4b92      	ldr	r3, [pc, #584]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d50:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d5a:	4a8f      	ldr	r2, [pc, #572]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006d6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d6e:	2300      	movs	r3, #0
 8006d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d76:	460b      	mov	r3, r1
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	d00e      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d7c:	4b86      	ldr	r3, [pc, #536]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	4a85      	ldr	r2, [pc, #532]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d86:	6113      	str	r3, [r2, #16]
 8006d88:	4b83      	ldr	r3, [pc, #524]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d8a:	6919      	ldr	r1, [r3, #16]
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d94:	4a80      	ldr	r2, [pc, #512]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d96:	430b      	orrs	r3, r1
 8006d98:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006da8:	2300      	movs	r3, #0
 8006daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006db0:	460b      	mov	r3, r1
 8006db2:	4313      	orrs	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006db6:	4b78      	ldr	r3, [pc, #480]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc4:	4a74      	ldr	r2, [pc, #464]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dd8:	2300      	movs	r3, #0
 8006dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ddc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006de0:	460b      	mov	r3, r1
 8006de2:	4313      	orrs	r3, r2
 8006de4:	d00a      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006de6:	4b6c      	ldr	r3, [pc, #432]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df6:	4a68      	ldr	r2, [pc, #416]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006df8:	430b      	orrs	r3, r1
 8006dfa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	2100      	movs	r1, #0
 8006e06:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006e12:	460b      	mov	r3, r1
 8006e14:	4313      	orrs	r3, r2
 8006e16:	d011      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f8bb 	bl	8006f9c <RCCEx_PLL2_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	2100      	movs	r1, #0
 8006e46:	6239      	str	r1, [r7, #32]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e52:	460b      	mov	r3, r1
 8006e54:	4313      	orrs	r3, r2
 8006e56:	d011      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	2101      	movs	r1, #1
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f89b 	bl	8006f9c <RCCEx_PLL2_Config>
 8006e66:	4603      	mov	r3, r0
 8006e68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	2100      	movs	r1, #0
 8006e86:	61b9      	str	r1, [r7, #24]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e92:	460b      	mov	r3, r1
 8006e94:	4313      	orrs	r3, r2
 8006e96:	d011      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 f87b 	bl	8006f9c <RCCEx_PLL2_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	6139      	str	r1, [r7, #16]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	d011      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006edc:	3328      	adds	r3, #40	@ 0x28
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 f90d 	bl	8007100 <RCCEx_PLL3_Config>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006eec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ef8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	2100      	movs	r1, #0
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f12:	460b      	mov	r3, r1
 8006f14:	4313      	orrs	r3, r2
 8006f16:	d011      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1c:	3328      	adds	r3, #40	@ 0x28
 8006f1e:	2101      	movs	r1, #1
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f8ed 	bl	8007100 <RCCEx_PLL3_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	2100      	movs	r1, #0
 8006f46:	6039      	str	r1, [r7, #0]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	607b      	str	r3, [r7, #4]
 8006f4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f52:	460b      	mov	r3, r1
 8006f54:	4313      	orrs	r3, r2
 8006f56:	d011      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5c:	3328      	adds	r3, #40	@ 0x28
 8006f5e:	2102      	movs	r1, #2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f8cd 	bl	8007100 <RCCEx_PLL3_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006f7c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	e000      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006f90:	46bd      	mov	sp, r7
 8006f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f96:	bf00      	nop
 8006f98:	58024400 	.word	0x58024400

08006f9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006faa:	4b53      	ldr	r3, [pc, #332]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d101      	bne.n	8006fba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e099      	b.n	80070ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fba:	4b4f      	ldr	r3, [pc, #316]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8006fc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc6:	f7fa fd2d 	bl	8001a24 <HAL_GetTick>
 8006fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fcc:	e008      	b.n	8006fe0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fce:	f7fa fd29 	bl	8001a24 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e086      	b.n	80070ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fe0:	4b45      	ldr	r3, [pc, #276]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f0      	bne.n	8006fce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fec:	4b42      	ldr	r3, [pc, #264]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	031b      	lsls	r3, r3, #12
 8006ffa:	493f      	ldr	r1, [pc, #252]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	628b      	str	r3, [r1, #40]	@ 0x28
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	3b01      	subs	r3, #1
 8007006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	3b01      	subs	r3, #1
 8007010:	025b      	lsls	r3, r3, #9
 8007012:	b29b      	uxth	r3, r3
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	3b01      	subs	r3, #1
 800701c:	041b      	lsls	r3, r3, #16
 800701e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	3b01      	subs	r3, #1
 800702a:	061b      	lsls	r3, r3, #24
 800702c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007030:	4931      	ldr	r1, [pc, #196]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8007032:	4313      	orrs	r3, r2
 8007034:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007036:	4b30      	ldr	r3, [pc, #192]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8007038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	492d      	ldr	r1, [pc, #180]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8007044:	4313      	orrs	r3, r2
 8007046:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007048:	4b2b      	ldr	r3, [pc, #172]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 800704a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704c:	f023 0220 	bic.w	r2, r3, #32
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	4928      	ldr	r1, [pc, #160]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8007056:	4313      	orrs	r3, r2
 8007058:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800705a:	4b27      	ldr	r3, [pc, #156]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	4a26      	ldr	r2, [pc, #152]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8007060:	f023 0310 	bic.w	r3, r3, #16
 8007064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007066:	4b24      	ldr	r3, [pc, #144]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8007068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800706a:	4b24      	ldr	r3, [pc, #144]	@ (80070fc <RCCEx_PLL2_Config+0x160>)
 800706c:	4013      	ands	r3, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	69d2      	ldr	r2, [r2, #28]
 8007072:	00d2      	lsls	r2, r2, #3
 8007074:	4920      	ldr	r1, [pc, #128]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8007076:	4313      	orrs	r3, r2
 8007078:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800707a:	4b1f      	ldr	r3, [pc, #124]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	4a1e      	ldr	r2, [pc, #120]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8007080:	f043 0310 	orr.w	r3, r3, #16
 8007084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800708c:	4b1a      	ldr	r3, [pc, #104]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 800708e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007090:	4a19      	ldr	r2, [pc, #100]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 8007092:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007096:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007098:	e00f      	b.n	80070ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d106      	bne.n	80070ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070a0:	4b15      	ldr	r3, [pc, #84]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 80070a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a4:	4a14      	ldr	r2, [pc, #80]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 80070a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070ac:	e005      	b.n	80070ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070ae:	4b12      	ldr	r3, [pc, #72]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	4a11      	ldr	r2, [pc, #68]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 80070b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070ba:	4b0f      	ldr	r3, [pc, #60]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a0e      	ldr	r2, [pc, #56]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 80070c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c6:	f7fa fcad 	bl	8001a24 <HAL_GetTick>
 80070ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070cc:	e008      	b.n	80070e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070ce:	f7fa fca9 	bl	8001a24 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e006      	b.n	80070ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070e0:	4b05      	ldr	r3, [pc, #20]	@ (80070f8 <RCCEx_PLL2_Config+0x15c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	58024400 	.word	0x58024400
 80070fc:	ffff0007 	.word	0xffff0007

08007100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800710e:	4b53      	ldr	r3, [pc, #332]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	2b03      	cmp	r3, #3
 8007118:	d101      	bne.n	800711e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e099      	b.n	8007252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800711e:	4b4f      	ldr	r3, [pc, #316]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a4e      	ldr	r2, [pc, #312]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800712a:	f7fa fc7b 	bl	8001a24 <HAL_GetTick>
 800712e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007130:	e008      	b.n	8007144 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007132:	f7fa fc77 	bl	8001a24 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e086      	b.n	8007252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007144:	4b45      	ldr	r3, [pc, #276]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f0      	bne.n	8007132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007150:	4b42      	ldr	r3, [pc, #264]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007154:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	051b      	lsls	r3, r3, #20
 800715e:	493f      	ldr	r1, [pc, #252]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007160:	4313      	orrs	r3, r2
 8007162:	628b      	str	r3, [r1, #40]	@ 0x28
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	3b01      	subs	r3, #1
 800716a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	3b01      	subs	r3, #1
 8007174:	025b      	lsls	r3, r3, #9
 8007176:	b29b      	uxth	r3, r3
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	3b01      	subs	r3, #1
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	3b01      	subs	r3, #1
 800718e:	061b      	lsls	r3, r3, #24
 8007190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007194:	4931      	ldr	r1, [pc, #196]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007196:	4313      	orrs	r3, r2
 8007198:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800719a:	4b30      	ldr	r3, [pc, #192]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 800719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	492d      	ldr	r1, [pc, #180]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071ac:	4b2b      	ldr	r3, [pc, #172]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	4928      	ldr	r1, [pc, #160]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071be:	4b27      	ldr	r3, [pc, #156]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c2:	4a26      	ldr	r2, [pc, #152]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071ca:	4b24      	ldr	r3, [pc, #144]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ce:	4b24      	ldr	r3, [pc, #144]	@ (8007260 <RCCEx_PLL3_Config+0x160>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	69d2      	ldr	r2, [r2, #28]
 80071d6:	00d2      	lsls	r2, r2, #3
 80071d8:	4920      	ldr	r1, [pc, #128]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071de:	4b1f      	ldr	r3, [pc, #124]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	4a1e      	ldr	r2, [pc, #120]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d106      	bne.n	80071fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071f0:	4b1a      	ldr	r3, [pc, #104]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	4a19      	ldr	r2, [pc, #100]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 80071f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80071fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071fc:	e00f      	b.n	800721e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d106      	bne.n	8007212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007204:	4b15      	ldr	r3, [pc, #84]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	4a14      	ldr	r2, [pc, #80]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 800720a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800720e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007210:	e005      	b.n	800721e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007212:	4b12      	ldr	r3, [pc, #72]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007216:	4a11      	ldr	r2, [pc, #68]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007218:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800721c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800721e:	4b0f      	ldr	r3, [pc, #60]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a0e      	ldr	r2, [pc, #56]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fa fbfb 	bl	8001a24 <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007230:	e008      	b.n	8007244 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007232:	f7fa fbf7 	bl	8001a24 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e006      	b.n	8007252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007244:	4b05      	ldr	r3, [pc, #20]	@ (800725c <RCCEx_PLL3_Config+0x15c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0f0      	beq.n	8007232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007250:	7bfb      	ldrb	r3, [r7, #15]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	58024400 	.word	0x58024400
 8007260:	ffff0007 	.word	0xffff0007

08007264 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e10f      	b.n	8007496 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a87      	ldr	r2, [pc, #540]	@ (80074a0 <HAL_SPI_Init+0x23c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00f      	beq.n	80072a6 <HAL_SPI_Init+0x42>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a86      	ldr	r2, [pc, #536]	@ (80074a4 <HAL_SPI_Init+0x240>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00a      	beq.n	80072a6 <HAL_SPI_Init+0x42>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a84      	ldr	r2, [pc, #528]	@ (80074a8 <HAL_SPI_Init+0x244>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d005      	beq.n	80072a6 <HAL_SPI_Init+0x42>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2b0f      	cmp	r3, #15
 80072a0:	d901      	bls.n	80072a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e0f7      	b.n	8007496 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fc90 	bl	8008bcc <SPI_GetPacketSize>
 80072ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a7b      	ldr	r2, [pc, #492]	@ (80074a0 <HAL_SPI_Init+0x23c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00c      	beq.n	80072d2 <HAL_SPI_Init+0x6e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a79      	ldr	r2, [pc, #484]	@ (80074a4 <HAL_SPI_Init+0x240>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d007      	beq.n	80072d2 <HAL_SPI_Init+0x6e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a78      	ldr	r2, [pc, #480]	@ (80074a8 <HAL_SPI_Init+0x244>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d002      	beq.n	80072d2 <HAL_SPI_Init+0x6e>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d811      	bhi.n	80072f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072d6:	4a72      	ldr	r2, [pc, #456]	@ (80074a0 <HAL_SPI_Init+0x23c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d009      	beq.n	80072f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a70      	ldr	r2, [pc, #448]	@ (80074a4 <HAL_SPI_Init+0x240>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d004      	beq.n	80072f0 <HAL_SPI_Init+0x8c>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a6f      	ldr	r2, [pc, #444]	@ (80074a8 <HAL_SPI_Init+0x244>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d104      	bne.n	80072fa <HAL_SPI_Init+0x96>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b10      	cmp	r3, #16
 80072f4:	d901      	bls.n	80072fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e0cd      	b.n	8007496 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fa f86a 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0201 	bic.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007336:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007340:	d119      	bne.n	8007376 <HAL_SPI_Init+0x112>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800734a:	d103      	bne.n	8007354 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007350:	2b00      	cmp	r3, #0
 8007352:	d008      	beq.n	8007366 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10c      	bne.n	8007376 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007364:	d107      	bne.n	8007376 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007374:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00f      	beq.n	80073a2 <HAL_SPI_Init+0x13e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2b06      	cmp	r3, #6
 8007388:	d90b      	bls.n	80073a2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	e007      	b.n	80073b2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ba:	431a      	orrs	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c4:	ea42 0103 	orr.w	r1, r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007412:	ea42 0103 	orr.w	r1, r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d113      	bne.n	8007452 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800743c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007450:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0201 	bic.w	r2, r2, #1
 8007460:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	40013000 	.word	0x40013000
 80074a4:	40003800 	.word	0x40003800
 80074a8:	40003c00 	.word	0x40003c00

080074ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	4613      	mov	r3, r2
 80074ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3320      	adds	r3, #32
 80074c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c4:	f7fa faae 	bl	8001a24 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d001      	beq.n	80074da <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80074d6:	2302      	movs	r3, #2
 80074d8:	e1d1      	b.n	800787e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_SPI_Transmit+0x3a>
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e1c9      	b.n	800787e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_SPI_Transmit+0x4c>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e1c2      	b.n	800787e <HAL_SPI_Transmit+0x3d2>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2203      	movs	r2, #3
 8007504:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	88fa      	ldrh	r2, [r7, #6]
 8007522:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007550:	d108      	bne.n	8007564 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e009      	b.n	8007578 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007576:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	4b96      	ldr	r3, [pc, #600]	@ (80077d8 <HAL_SPI_Transmit+0x32c>)
 8007580:	4013      	ands	r3, r2
 8007582:	88f9      	ldrh	r1, [r7, #6]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	6812      	ldr	r2, [r2, #0]
 8007588:	430b      	orrs	r3, r1
 800758a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075a4:	d107      	bne.n	80075b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	2b0f      	cmp	r3, #15
 80075bc:	d947      	bls.n	800764e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80075be:	e03f      	b.n	8007640 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d114      	bne.n	80075f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075de:	1d1a      	adds	r2, r3, #4
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80075f6:	e023      	b.n	8007640 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f8:	f7fa fa14 	bl	8001a24 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d803      	bhi.n	8007610 <HAL_SPI_Transmit+0x164>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d102      	bne.n	8007616 <HAL_SPI_Transmit+0x16a>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d114      	bne.n	8007640 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f001 fa0a 	bl	8008a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007622:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e11e      	b.n	800787e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1b9      	bne.n	80075c0 <HAL_SPI_Transmit+0x114>
 800764c:	e0f1      	b.n	8007832 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b07      	cmp	r3, #7
 8007654:	f240 80e6 	bls.w	8007824 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007658:	e05d      	b.n	8007716 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b02      	cmp	r3, #2
 8007666:	d132      	bne.n	80076ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d918      	bls.n	80076a6 <HAL_SPI_Transmit+0x1fa>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d014      	beq.n	80076a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800768c:	1d1a      	adds	r2, r3, #4
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b02      	subs	r3, #2
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80076a4:	e037      	b.n	8007716 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076aa:	881a      	ldrh	r2, [r3, #0]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076b4:	1c9a      	adds	r2, r3, #2
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80076cc:	e023      	b.n	8007716 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ce:	f7fa f9a9 	bl	8001a24 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d803      	bhi.n	80076e6 <HAL_SPI_Transmit+0x23a>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e4:	d102      	bne.n	80076ec <HAL_SPI_Transmit+0x240>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d114      	bne.n	8007716 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f001 f99f 	bl	8008a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e0b3      	b.n	800787e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d19b      	bne.n	800765a <HAL_SPI_Transmit+0x1ae>
 8007722:	e086      	b.n	8007832 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b02      	cmp	r3, #2
 8007730:	d154      	bne.n	80077dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d918      	bls.n	8007770 <HAL_SPI_Transmit+0x2c4>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007742:	2b40      	cmp	r3, #64	@ 0x40
 8007744:	d914      	bls.n	8007770 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007756:	1d1a      	adds	r2, r3, #4
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b04      	subs	r3, #4
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800776e:	e059      	b.n	8007824 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007776:	b29b      	uxth	r3, r3
 8007778:	2b01      	cmp	r3, #1
 800777a:	d917      	bls.n	80077ac <HAL_SPI_Transmit+0x300>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d013      	beq.n	80077ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007788:	881a      	ldrh	r2, [r3, #0]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007792:	1c9a      	adds	r2, r3, #2
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b02      	subs	r3, #2
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077aa:	e03b      	b.n	8007824 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3320      	adds	r3, #32
 80077b6:	7812      	ldrb	r2, [r2, #0]
 80077b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077d6:	e025      	b.n	8007824 <HAL_SPI_Transmit+0x378>
 80077d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077dc:	f7fa f922 	bl	8001a24 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d803      	bhi.n	80077f4 <HAL_SPI_Transmit+0x348>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f2:	d102      	bne.n	80077fa <HAL_SPI_Transmit+0x34e>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d114      	bne.n	8007824 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f001 f918 	bl	8008a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007806:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e02c      	b.n	800787e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	f47f af79 	bne.w	8007724 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2200      	movs	r2, #0
 800783a:	2108      	movs	r1, #8
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f001 f997 	bl	8008b70 <SPI_WaitOnFlagUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800784e:	f043 0220 	orr.w	r2, r3, #32
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f001 f8e9 	bl	8008a30 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800787c:	2300      	movs	r3, #0
  }
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop

08007888 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08e      	sub	sp, #56	@ 0x38
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3320      	adds	r3, #32
 800789c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3330      	adds	r3, #48	@ 0x30
 80078a4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078aa:	095b      	lsrs	r3, r3, #5
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3301      	adds	r3, #1
 80078b0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078b2:	f7fa f8b7 	bl	8001a24 <HAL_GetTick>
 80078b6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80078b8:	887b      	ldrh	r3, [r7, #2]
 80078ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80078bc:	887b      	ldrh	r3, [r7, #2]
 80078be:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d001      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80078cc:	2302      	movs	r3, #2
 80078ce:	e310      	b.n	8007ef2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_SPI_TransmitReceive+0x5a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <HAL_SPI_TransmitReceive+0x5a>
 80078dc:	887b      	ldrh	r3, [r7, #2]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e305      	b.n	8007ef2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_SPI_TransmitReceive+0x6c>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e2fe      	b.n	8007ef2 <HAL_SPI_TransmitReceive+0x66a>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2205      	movs	r2, #5
 8007900:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	887a      	ldrh	r2, [r7, #2]
 8007916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	887a      	ldrh	r2, [r7, #2]
 800791e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	887a      	ldrh	r2, [r7, #2]
 800792c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	887a      	ldrh	r2, [r7, #2]
 8007934:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8007952:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a70      	ldr	r2, [pc, #448]	@ (8007b1c <HAL_SPI_TransmitReceive+0x294>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d009      	beq.n	8007972 <HAL_SPI_TransmitReceive+0xea>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a6f      	ldr	r2, [pc, #444]	@ (8007b20 <HAL_SPI_TransmitReceive+0x298>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d004      	beq.n	8007972 <HAL_SPI_TransmitReceive+0xea>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a6d      	ldr	r2, [pc, #436]	@ (8007b24 <HAL_SPI_TransmitReceive+0x29c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d102      	bne.n	8007978 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007972:	2310      	movs	r3, #16
 8007974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007976:	e001      	b.n	800797c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007978:	2308      	movs	r3, #8
 800797a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	4b69      	ldr	r3, [pc, #420]	@ (8007b28 <HAL_SPI_TransmitReceive+0x2a0>)
 8007984:	4013      	ands	r3, r2
 8007986:	8879      	ldrh	r1, [r7, #2]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	6812      	ldr	r2, [r2, #0]
 800798c:	430b      	orrs	r3, r1
 800798e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0201 	orr.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079a8:	d107      	bne.n	80079ba <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b0f      	cmp	r3, #15
 80079c0:	f240 80a2 	bls.w	8007b08 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80079c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c6:	089b      	lsrs	r3, r3, #2
 80079c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80079ca:	e094      	b.n	8007af6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d120      	bne.n	8007a1c <HAL_SPI_TransmitReceive+0x194>
 80079da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01d      	beq.n	8007a1c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80079e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80079e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80079e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d217      	bcs.n	8007a1c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079fc:	1d1a      	adds	r2, r3, #4
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007a24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d065      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d118      	bne.n	8007a6a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a42:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a48:	1d1a      	adds	r2, r3, #4
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a66:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007a68:	e045      	b.n	8007af6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007a6a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007a6c:	8bfb      	ldrh	r3, [r7, #30]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d21d      	bcs.n	8007aae <HAL_SPI_TransmitReceive+0x226>
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d018      	beq.n	8007aae <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a86:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a8c:	1d1a      	adds	r2, r3, #4
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007aaa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007aac:	e023      	b.n	8007af6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aae:	f7f9 ffb9 	bl	8001a24 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d803      	bhi.n	8007ac6 <HAL_SPI_TransmitReceive+0x23e>
 8007abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d102      	bne.n	8007acc <HAL_SPI_TransmitReceive+0x244>
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d114      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 ffaf 	bl	8008a30 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ad8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e1fd      	b.n	8007ef2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007af6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f47f af67 	bne.w	80079cc <HAL_SPI_TransmitReceive+0x144>
 8007afe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f47f af63 	bne.w	80079cc <HAL_SPI_TransmitReceive+0x144>
 8007b06:	e1ce      	b.n	8007ea6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b07      	cmp	r3, #7
 8007b0e:	f240 81c2 	bls.w	8007e96 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007b18:	e0c9      	b.n	8007cae <HAL_SPI_TransmitReceive+0x426>
 8007b1a:	bf00      	nop
 8007b1c:	40013000 	.word	0x40013000
 8007b20:	40003800 	.word	0x40003800
 8007b24:	40003c00 	.word	0x40003c00
 8007b28:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d11f      	bne.n	8007b7a <HAL_SPI_TransmitReceive+0x2f2>
 8007b3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01c      	beq.n	8007b7a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007b40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007b42:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b46:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d216      	bcs.n	8007b7a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b50:	881a      	ldrh	r2, [r3, #0]
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b54:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b5a:	1c9a      	adds	r2, r3, #2
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b78:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007b82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 8092 	beq.w	8007cae <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d118      	bne.n	8007bca <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b9c:	6a3a      	ldr	r2, [r7, #32]
 8007b9e:	8812      	ldrh	r2, [r2, #0]
 8007ba0:	b292      	uxth	r2, r2
 8007ba2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ba8:	1c9a      	adds	r2, r3, #2
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007bc8:	e071      	b.n	8007cae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007bca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007bcc:	8bfb      	ldrh	r3, [r7, #30]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d228      	bcs.n	8007c24 <HAL_SPI_TransmitReceive+0x39c>
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d023      	beq.n	8007c24 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007be0:	6a3a      	ldr	r2, [r7, #32]
 8007be2:	8812      	ldrh	r2, [r2, #0]
 8007be4:	b292      	uxth	r2, r2
 8007be6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bec:	1c9a      	adds	r2, r3, #2
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf6:	6a3a      	ldr	r2, [r7, #32]
 8007bf8:	8812      	ldrh	r2, [r2, #0]
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c02:	1c9a      	adds	r2, r3, #2
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b02      	subs	r3, #2
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c20:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007c22:	e044      	b.n	8007cae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007c24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d11d      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x3de>
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d018      	beq.n	8007c66 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c38:	6a3a      	ldr	r2, [r7, #32]
 8007c3a:	8812      	ldrh	r2, [r2, #0]
 8007c3c:	b292      	uxth	r2, r2
 8007c3e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c44:	1c9a      	adds	r2, r3, #2
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007c64:	e023      	b.n	8007cae <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c66:	f7f9 fedd 	bl	8001a24 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d803      	bhi.n	8007c7e <HAL_SPI_TransmitReceive+0x3f6>
 8007c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7c:	d102      	bne.n	8007c84 <HAL_SPI_TransmitReceive+0x3fc>
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d114      	bne.n	8007cae <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fed3 	bl	8008a30 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e121      	b.n	8007ef2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007cae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f47f af3b 	bne.w	8007b2c <HAL_SPI_TransmitReceive+0x2a4>
 8007cb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f47f af37 	bne.w	8007b2c <HAL_SPI_TransmitReceive+0x2a4>
 8007cbe:	e0f2      	b.n	8007ea6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d121      	bne.n	8007d12 <HAL_SPI_TransmitReceive+0x48a>
 8007cce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01e      	beq.n	8007d12 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007cd4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007cd6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cda:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d218      	bcs.n	8007d12 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3320      	adds	r3, #32
 8007cea:	7812      	ldrb	r2, [r2, #0]
 8007cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d10:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007d1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 80ba 	beq.w	8007e96 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d11b      	bne.n	8007d68 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d64:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007d66:	e096      	b.n	8007e96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007d68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007d6a:	8bfb      	ldrh	r3, [r7, #30]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d24a      	bcs.n	8007e06 <HAL_SPI_TransmitReceive+0x57e>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d045      	beq.n	8007e06 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d86:	7812      	ldrb	r2, [r2, #0]
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	b2d2      	uxtb	r2, r2
 8007da6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dbe:	7812      	ldrb	r2, [r2, #0]
 8007dc0:	b2d2      	uxtb	r2, r2
 8007dc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b04      	subs	r3, #4
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007e04:	e047      	b.n	8007e96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007e06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d820      	bhi.n	8007e4e <HAL_SPI_TransmitReceive+0x5c6>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d01b      	beq.n	8007e4e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e22:	7812      	ldrb	r2, [r2, #0]
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007e4c:	e023      	b.n	8007e96 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e4e:	f7f9 fde9 	bl	8001a24 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d803      	bhi.n	8007e66 <HAL_SPI_TransmitReceive+0x5de>
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d102      	bne.n	8007e6c <HAL_SPI_TransmitReceive+0x5e4>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d114      	bne.n	8007e96 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fddf 	bl	8008a30 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e02d      	b.n	8007ef2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f47f af11 	bne.w	8007cc0 <HAL_SPI_TransmitReceive+0x438>
 8007e9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f47f af0d 	bne.w	8007cc0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eac:	2200      	movs	r2, #0
 8007eae:	2108      	movs	r1, #8
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 fe5d 	bl	8008b70 <SPI_WaitOnFlagUntilTimeout>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d007      	beq.n	8007ecc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ec2:	f043 0220 	orr.w	r2, r3, #32
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fdaf 	bl	8008a30 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e000      	b.n	8007ef2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
  }
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3730      	adds	r7, #48	@ 0x30
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop

08007efc <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d001      	beq.n	8007f1a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007f16:	2302      	movs	r3, #2
 8007f18:	e126      	b.n	8008168 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <HAL_SPI_Transmit_DMA+0x2a>
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e11e      	b.n	8008168 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_SPI_Transmit_DMA+0x3c>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e117      	b.n	8008168 <HAL_SPI_Transmit_DMA+0x26c>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2203      	movs	r2, #3
 8007f44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	88fa      	ldrh	r2, [r7, #6]
 8007f5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007f90:	d108      	bne.n	8007fa4 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	e009      	b.n	8007fb8 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007fb6:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	2b0f      	cmp	r3, #15
 8007fbe:	d905      	bls.n	8007fcc <HAL_SPI_Transmit_DMA+0xd0>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fca:	d10f      	bne.n	8007fec <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007fd0:	2b07      	cmp	r3, #7
 8007fd2:	d911      	bls.n	8007ff8 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fde:	d00b      	beq.n	8007ff8 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fe4:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fea:	d005      	beq.n	8007ff8 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e0b7      	b.n	8008168 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2b07      	cmp	r3, #7
 8007ffe:	d820      	bhi.n	8008042 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800800a:	d109      	bne.n	8008020 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008012:	b29b      	uxth	r3, r3
 8008014:	3301      	adds	r3, #1
 8008016:	105b      	asrs	r3, r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800802a:	d11e      	bne.n	800806a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008032:	b29b      	uxth	r3, r3
 8008034:	3303      	adds	r3, #3
 8008036:	109b      	asrs	r3, r3, #2
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008040:	e013      	b.n	800806a <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	2b0f      	cmp	r3, #15
 8008048:	d80f      	bhi.n	800806a <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008054:	d109      	bne.n	800806a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800805c:	b29b      	uxth	r3, r3
 800805e:	3301      	adds	r3, #1
 8008060:	105b      	asrs	r3, r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800806e:	4a40      	ldr	r2, [pc, #256]	@ (8008170 <HAL_SPI_Transmit_DMA+0x274>)
 8008070:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008076:	4a3f      	ldr	r2, [pc, #252]	@ (8008174 <HAL_SPI_Transmit_DMA+0x278>)
 8008078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800807e:	4a3e      	ldr	r2, [pc, #248]	@ (8008178 <HAL_SPI_Transmit_DMA+0x27c>)
 8008080:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008086:	2200      	movs	r2, #0
 8008088:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008098:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080a2:	4619      	mov	r1, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3320      	adds	r3, #32
 80080aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80080b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80080b4:	f7fa f9c6 	bl	8002444 <HAL_DMA_Start_IT>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d011      	beq.n	80080e2 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080c4:	f043 0210 	orr.w	r2, r3, #16
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e042      	b.n	8008168 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ec:	d108      	bne.n	8008100 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6859      	ldr	r1, [r3, #4]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	4b20      	ldr	r3, [pc, #128]	@ (800817c <HAL_SPI_Transmit_DMA+0x280>)
 80080fa:	400b      	ands	r3, r1
 80080fc:	6053      	str	r3, [r2, #4]
 80080fe:	e009      	b.n	8008114 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b1d      	ldr	r3, [pc, #116]	@ (800817c <HAL_SPI_Transmit_DMA+0x280>)
 8008108:	4013      	ands	r3, r2
 800810a:	88f9      	ldrh	r1, [r7, #6]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	6812      	ldr	r2, [r2, #0]
 8008110:	430b      	orrs	r3, r1
 8008112:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008122:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691a      	ldr	r2, [r3, #16]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8008132:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0201 	orr.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800814c:	d107      	bne.n	800815e <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800815c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	0800897d 	.word	0x0800897d
 8008174:	080088f1 	.word	0x080088f1
 8008178:	080089b5 	.word	0x080089b5
 800817c:	ffff0000 	.word	0xffff0000

08008180 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b01      	cmp	r3, #1
 8008198:	d001      	beq.n	800819e <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800819a:	2302      	movs	r3, #2
 800819c:	e19c      	b.n	80084d8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_SPI_TransmitReceive_DMA+0x30>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <HAL_SPI_TransmitReceive_DMA+0x30>
 80081aa:	887b      	ldrh	r3, [r7, #2]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e191      	b.n	80084d8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d101      	bne.n	80081c2 <HAL_SPI_TransmitReceive_DMA+0x42>
 80081be:	2302      	movs	r3, #2
 80081c0:	e18a      	b.n	80084d8 <HAL_SPI_TransmitReceive_DMA+0x358>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2205      	movs	r2, #5
 80081ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	887a      	ldrh	r2, [r7, #2]
 80081e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	887a      	ldrh	r2, [r7, #2]
 80081ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	887a      	ldrh	r2, [r7, #2]
 80081fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	887a      	ldrh	r2, [r7, #2]
 8008202:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008220:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008230:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	2b0f      	cmp	r3, #15
 8008238:	d90b      	bls.n	8008252 <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800823e:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008244:	d121      	bne.n	800828a <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800824a:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800824c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008250:	d11b      	bne.n	800828a <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8008256:	2b07      	cmp	r3, #7
 8008258:	d91d      	bls.n	8008296 <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800825e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008264:	d005      	beq.n	8008272 <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800826a:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800826c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008270:	d10b      	bne.n	800828a <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008276:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8008278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800827c:	d00b      	beq.n	8008296 <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008282:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008284:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008288:	d005      	beq.n	8008296 <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e120      	b.n	80084d8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	2b07      	cmp	r3, #7
 800829c:	d840      	bhi.n	8008320 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082a8:	d109      	bne.n	80082be <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3301      	adds	r3, #1
 80082b4:	105b      	asrs	r3, r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082c8:	d109      	bne.n	80082de <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	3303      	adds	r3, #3
 80082d4:	109b      	asrs	r3, r3, #2
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082e8:	d109      	bne.n	80082fe <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	3301      	adds	r3, #1
 80082f4:	105b      	asrs	r3, r3, #1
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008308:	d12e      	bne.n	8008368 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008310:	b29b      	uxth	r3, r3
 8008312:	3303      	adds	r3, #3
 8008314:	109b      	asrs	r3, r3, #2
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800831e:	e023      	b.n	8008368 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	2b0f      	cmp	r3, #15
 8008326:	d81f      	bhi.n	8008368 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008332:	d109      	bne.n	8008348 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800833a:	b29b      	uxth	r3, r3
 800833c:	3301      	adds	r3, #1
 800833e:	105b      	asrs	r3, r3, #1
 8008340:	b29a      	uxth	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008352:	d109      	bne.n	8008368 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800835a:	b29b      	uxth	r3, r3
 800835c:	3301      	adds	r3, #1
 800835e:	105b      	asrs	r3, r3, #1
 8008360:	b29a      	uxth	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800836c:	4a5c      	ldr	r2, [pc, #368]	@ (80084e0 <HAL_SPI_TransmitReceive_DMA+0x360>)
 800836e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008374:	4a5b      	ldr	r2, [pc, #364]	@ (80084e4 <HAL_SPI_TransmitReceive_DMA+0x364>)
 8008376:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800837c:	4a5a      	ldr	r2, [pc, #360]	@ (80084e8 <HAL_SPI_TransmitReceive_DMA+0x368>)
 800837e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008384:	2200      	movs	r2, #0
 8008386:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3330      	adds	r3, #48	@ 0x30
 8008392:	4619      	mov	r1, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008398:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80083a2:	f7fa f84f 	bl	8002444 <HAL_DMA_Start_IT>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d011      	beq.n	80083d0 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083b2:	f043 0210 	orr.w	r2, r3, #16
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e083      	b.n	80084d8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689a      	ldr	r2, [r3, #8]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083de:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083e4:	2200      	movs	r2, #0
 80083e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083ec:	2200      	movs	r2, #0
 80083ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083f4:	2200      	movs	r2, #0
 80083f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083fc:	4a3a      	ldr	r2, [pc, #232]	@ (80084e8 <HAL_SPI_TransmitReceive_DMA+0x368>)
 80083fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008408:	4619      	mov	r1, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3320      	adds	r3, #32
 8008410:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008418:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800841a:	f7fa f813 	bl	8002444 <HAL_DMA_Start_IT>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d016      	beq.n	8008452 <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008428:	4618      	mov	r0, r3
 800842a:	f7fa fa75 	bl	8002918 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008434:	f043 0210 	orr.w	r2, r3, #16
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e042      	b.n	80084d8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800845c:	d108      	bne.n	8008470 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6859      	ldr	r1, [r3, #4]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	4b20      	ldr	r3, [pc, #128]	@ (80084ec <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800846a:	400b      	ands	r3, r1
 800846c:	6053      	str	r3, [r2, #4]
 800846e:	e009      	b.n	8008484 <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	4b1d      	ldr	r3, [pc, #116]	@ (80084ec <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8008478:	4013      	ands	r3, r2
 800847a:	8879      	ldrh	r1, [r7, #2]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	6812      	ldr	r2, [r2, #0]
 8008480:	430b      	orrs	r3, r1
 8008482:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008492:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691a      	ldr	r2, [r3, #16]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80084a2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0201 	orr.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084bc:	d107      	bne.n	80084ce <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084cc:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	08008999 	.word	0x08008999
 80084e4:	08008937 	.word	0x08008937
 80084e8:	080089b5 	.word	0x080089b5
 80084ec:	ffff0000 	.word	0xffff0000

080084f0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	@ 0x28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008508:	6a3a      	ldr	r2, [r7, #32]
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4013      	ands	r3, r2
 800850e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008518:	2300      	movs	r3, #0
 800851a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008522:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3330      	adds	r3, #48	@ 0x30
 800852a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008532:	2b00      	cmp	r3, #0
 8008534:	d010      	beq.n	8008558 <HAL_SPI_IRQHandler+0x68>
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800854e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f9c3 	bl	80088dc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008556:	e192      	b.n	800887e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d113      	bne.n	800858a <HAL_SPI_IRQHandler+0x9a>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10e      	bne.n	800858a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008572:	2b00      	cmp	r3, #0
 8008574:	d009      	beq.n	800858a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
    handled = 1UL;
 8008586:	2301      	movs	r3, #1
 8008588:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10f      	bne.n	80085b4 <HAL_SPI_IRQHandler+0xc4>
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
    handled = 1UL;
 80085b0:	2301      	movs	r3, #1
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10f      	bne.n	80085de <HAL_SPI_IRQHandler+0xee>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d105      	bne.n	80085de <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	4798      	blx	r3
    handled = 1UL;
 80085da:	2301      	movs	r3, #1
 80085dc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f040 8147 	bne.w	8008874 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 808b 	beq.w	8008708 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 0208 	orr.w	r2, r2, #8
 8008600:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f042 0210 	orr.w	r2, r2, #16
 8008610:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008620:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	691a      	ldr	r2, [r3, #16]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0208 	bic.w	r2, r2, #8
 8008630:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d13d      	bne.n	80086bc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008640:	e036      	b.n	80086b0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	2b0f      	cmp	r3, #15
 8008648:	d90b      	bls.n	8008662 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008652:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008654:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800865a:	1d1a      	adds	r2, r3, #4
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	665a      	str	r2, [r3, #100]	@ 0x64
 8008660:	e01d      	b.n	800869e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	2b07      	cmp	r3, #7
 8008668:	d90b      	bls.n	8008682 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	8812      	ldrh	r2, [r2, #0]
 8008672:	b292      	uxth	r2, r2
 8008674:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800867a:	1c9a      	adds	r2, r3, #2
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	665a      	str	r2, [r3, #100]	@ 0x64
 8008680:	e00d      	b.n	800869e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1c2      	bne.n	8008642 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f9b7 	bl	8008a30 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f8f7 	bl	80088c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80086da:	e0d0      	b.n	800887e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80086dc:	7cfb      	ldrb	r3, [r7, #19]
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d103      	bne.n	80086ea <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7f8 fad6 	bl	8000c94 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80086e8:	e0c6      	b.n	8008878 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80086ea:	7cfb      	ldrb	r3, [r7, #19]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d103      	bne.n	80086f8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f8cb 	bl	800888c <HAL_SPI_RxCpltCallback>
    return;
 80086f6:	e0bf      	b.n	8008878 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80086f8:	7cfb      	ldrb	r3, [r7, #19]
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	f040 80bc 	bne.w	8008878 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7f8 fab1 	bl	8000c68 <HAL_SPI_TxCpltCallback>
    return;
 8008706:	e0b7      	b.n	8008878 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80b5 	beq.w	800887e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00f      	beq.n	800873e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008724:	f043 0204 	orr.w	r2, r3, #4
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	699a      	ldr	r2, [r3, #24]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800873c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00f      	beq.n	8008768 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800874e:	f043 0201 	orr.w	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008766:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00f      	beq.n	8008792 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008778:	f043 0208 	orr.w	r2, r3, #8
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008790:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f003 0320 	and.w	r3, r3, #32
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00f      	beq.n	80087bc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699a      	ldr	r2, [r3, #24]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0220 	orr.w	r2, r2, #32
 80087ba:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d05a      	beq.n	800887c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 0201 	bic.w	r2, r2, #1
 80087d4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6919      	ldr	r1, [r3, #16]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	4b28      	ldr	r3, [pc, #160]	@ (8008884 <HAL_SPI_IRQHandler+0x394>)
 80087e2:	400b      	ands	r3, r1
 80087e4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80087ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80087f0:	d138      	bne.n	8008864 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008800:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d013      	beq.n	8008832 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800880e:	4a1e      	ldr	r2, [pc, #120]	@ (8008888 <HAL_SPI_IRQHandler+0x398>)
 8008810:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008816:	4618      	mov	r0, r3
 8008818:	f7fa fb9c 	bl	8002f54 <HAL_DMA_Abort_IT>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008828:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008836:	2b00      	cmp	r3, #0
 8008838:	d020      	beq.n	800887c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800883e:	4a12      	ldr	r2, [pc, #72]	@ (8008888 <HAL_SPI_IRQHandler+0x398>)
 8008840:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008846:	4618      	mov	r0, r3
 8008848:	f7fa fb84 	bl	8002f54 <HAL_DMA_Abort_IT>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d014      	beq.n	800887c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008858:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008862:	e00b      	b.n	800887c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f82b 	bl	80088c8 <HAL_SPI_ErrorCallback>
    return;
 8008872:	e003      	b.n	800887c <HAL_SPI_IRQHandler+0x38c>
    return;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <HAL_SPI_IRQHandler+0x38e>
    return;
 8008878:	bf00      	nop
 800887a:	e000      	b.n	800887e <HAL_SPI_IRQHandler+0x38e>
    return;
 800887c:	bf00      	nop
  }
}
 800887e:	3728      	adds	r7, #40	@ 0x28
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	fffffc94 	.word	0xfffffc94
 8008888:	080089fb 	.word	0x080089fb

0800888c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b07      	cmp	r3, #7
 8008908:	d011      	beq.n	800892e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008914:	d103      	bne.n	800891e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f7f8 f9a6 	bl	8000c68 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800891c:	e007      	b.n	800892e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	691a      	ldr	r2, [r3, #16]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f042 0208 	orr.w	r2, r2, #8
 800892c:	611a      	str	r2, [r3, #16]
}
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008942:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b07      	cmp	r3, #7
 800894e:	d011      	beq.n	8008974 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800895a:	d103      	bne.n	8008964 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7f8 f999 	bl	8000c94 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008962:	e007      	b.n	8008974 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 0208 	orr.w	r2, r2, #8
 8008972:	611a      	str	r2, [r3, #16]
}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008988:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f7ff ff88 	bl	80088a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a4:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff ff84 	bl	80088b4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c0:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fb fc36 	bl	8004234 <HAL_DMA_GetError>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d011      	beq.n	80089f2 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f82e 	bl	8008a30 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089da:	f043 0210 	orr.w	r2, r3, #16
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f7ff ff6b 	bl	80088c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80089f2:	bf00      	nop
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a06:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f7ff ff51 	bl	80088c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a26:	bf00      	nop
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699a      	ldr	r2, [r3, #24]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0208 	orr.w	r2, r2, #8
 8008a4e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	699a      	ldr	r2, [r3, #24]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0210 	orr.w	r2, r2, #16
 8008a5e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0201 	bic.w	r2, r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6919      	ldr	r1, [r3, #16]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8008b6c <SPI_CloseTransfer+0x13c>)
 8008a7c:	400b      	ands	r3, r1
 8008a7e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008a8e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	d014      	beq.n	8008ac6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00f      	beq.n	8008ac6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	699a      	ldr	r2, [r3, #24]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f042 0220 	orr.w	r2, r2, #32
 8008ac4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d014      	beq.n	8008afc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00f      	beq.n	8008afc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ae2:	f043 0204 	orr.w	r2, r3, #4
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008afa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00f      	beq.n	8008b26 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b0c:	f043 0201 	orr.w	r2, r3, #1
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	699a      	ldr	r2, [r3, #24]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b24:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00f      	beq.n	8008b50 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b36:	f043 0208 	orr.w	r2, r3, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b4e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008b60:	bf00      	nop
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	fffffc90 	.word	0xfffffc90

08008b70 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008b80:	e010      	b.n	8008ba4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b82:	f7f8 ff4f 	bl	8001a24 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d803      	bhi.n	8008b9a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b98:	d102      	bne.n	8008ba0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e00f      	b.n	8008bc4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695a      	ldr	r2, [r3, #20]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	4013      	ands	r3, r2
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	bf0c      	ite	eq
 8008bb4:	2301      	moveq	r3, #1
 8008bb6:	2300      	movne	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	461a      	mov	r2, r3
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d0df      	beq.n	8008b82 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd8:	095b      	lsrs	r3, r3, #5
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	3301      	adds	r3, #1
 8008be4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	3307      	adds	r3, #7
 8008bea:	08db      	lsrs	r3, r3, #3
 8008bec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	fb02 f303 	mul.w	r3, r2, r3
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008c02:	b480      	push	{r7}
 8008c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008c06:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
	...

08008c14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	4a08      	ldr	r2, [pc, #32]	@ (8008c44 <disk_status+0x30>)
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	79fa      	ldrb	r2, [r7, #7]
 8008c2c:	4905      	ldr	r1, [pc, #20]	@ (8008c44 <disk_status+0x30>)
 8008c2e:	440a      	add	r2, r1
 8008c30:	7a12      	ldrb	r2, [r2, #8]
 8008c32:	4610      	mov	r0, r2
 8008c34:	4798      	blx	r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	24001474 	.word	0x24001474

08008c48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	4a0e      	ldr	r2, [pc, #56]	@ (8008c94 <disk_initialize+0x4c>)
 8008c5a:	5cd3      	ldrb	r3, [r2, r3]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d114      	bne.n	8008c8a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	4a0c      	ldr	r2, [pc, #48]	@ (8008c94 <disk_initialize+0x4c>)
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	79fa      	ldrb	r2, [r7, #7]
 8008c6e:	4909      	ldr	r1, [pc, #36]	@ (8008c94 <disk_initialize+0x4c>)
 8008c70:	440a      	add	r2, r1
 8008c72:	7a12      	ldrb	r2, [r2, #8]
 8008c74:	4610      	mov	r0, r2
 8008c76:	4798      	blx	r3
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	4a03      	ldr	r2, [pc, #12]	@ (8008c94 <disk_initialize+0x4c>)
 8008c86:	2101      	movs	r1, #1
 8008c88:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	24001474 	.word	0x24001474

08008c98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c98:	b590      	push	{r4, r7, lr}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	607a      	str	r2, [r7, #4]
 8008ca2:	603b      	str	r3, [r7, #0]
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	4a0a      	ldr	r2, [pc, #40]	@ (8008cd4 <disk_read+0x3c>)
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	689c      	ldr	r4, [r3, #8]
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	4a07      	ldr	r2, [pc, #28]	@ (8008cd4 <disk_read+0x3c>)
 8008cb8:	4413      	add	r3, r2
 8008cba:	7a18      	ldrb	r0, [r3, #8]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	68b9      	ldr	r1, [r7, #8]
 8008cc2:	47a0      	blx	r4
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd90      	pop	{r4, r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	24001474 	.word	0x24001474

08008cd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008cd8:	b590      	push	{r4, r7, lr}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	4a0a      	ldr	r2, [pc, #40]	@ (8008d14 <disk_write+0x3c>)
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	68dc      	ldr	r4, [r3, #12]
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	4a07      	ldr	r2, [pc, #28]	@ (8008d14 <disk_write+0x3c>)
 8008cf8:	4413      	add	r3, r2
 8008cfa:	7a18      	ldrb	r0, [r3, #8]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	68b9      	ldr	r1, [r7, #8]
 8008d02:	47a0      	blx	r4
 8008d04:	4603      	mov	r3, r0
 8008d06:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd90      	pop	{r4, r7, pc}
 8008d12:	bf00      	nop
 8008d14:	24001474 	.word	0x24001474

08008d18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	603a      	str	r2, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
 8008d24:	460b      	mov	r3, r1
 8008d26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	4a09      	ldr	r2, [pc, #36]	@ (8008d50 <disk_ioctl+0x38>)
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	79fa      	ldrb	r2, [r7, #7]
 8008d36:	4906      	ldr	r1, [pc, #24]	@ (8008d50 <disk_ioctl+0x38>)
 8008d38:	440a      	add	r2, r1
 8008d3a:	7a10      	ldrb	r0, [r2, #8]
 8008d3c:	79b9      	ldrb	r1, [r7, #6]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	4798      	blx	r3
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]
  return res;
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	24001474 	.word	0x24001474

08008d54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	b21a      	sxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	b21b      	sxth	r3, r3
 8008d72:	4313      	orrs	r3, r2
 8008d74:	b21b      	sxth	r3, r3
 8008d76:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d78:	89fb      	ldrh	r3, [r7, #14]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3303      	adds	r3, #3
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	021b      	lsls	r3, r3, #8
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	3202      	adds	r2, #2
 8008d9e:	7812      	ldrb	r2, [r2, #0]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	021b      	lsls	r3, r3, #8
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	3201      	adds	r2, #1
 8008dac:	7812      	ldrb	r2, [r2, #0]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	7812      	ldrb	r2, [r2, #0]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]
	return rv;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	887a      	ldrh	r2, [r7, #2]
 8008de0:	b2d2      	uxtb	r2, r2
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	887b      	ldrh	r3, [r7, #2]
 8008de6:	0a1b      	lsrs	r3, r3, #8
 8008de8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	887a      	ldrh	r2, [r7, #2]
 8008df2:	b2d2      	uxtb	r2, r2
 8008df4:	701a      	strb	r2, [r3, #0]
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	607a      	str	r2, [r7, #4]
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	b2d2      	uxtb	r2, r2
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	b2d2      	uxtb	r2, r2
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	0a1b      	lsrs	r3, r3, #8
 8008e2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	607a      	str	r2, [r7, #4]
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	0a1b      	lsrs	r3, r3, #8
 8008e40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	701a      	strb	r2, [r3, #0]
}
 8008e4e:	bf00      	nop
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e5a:	b480      	push	{r7}
 8008e5c:	b087      	sub	sp, #28
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00d      	beq.n	8008e90 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	1c53      	adds	r3, r2, #1
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	1c59      	adds	r1, r3, #1
 8008e7e:	6179      	str	r1, [r7, #20]
 8008e80:	7812      	ldrb	r2, [r2, #0]
 8008e82:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	607b      	str	r3, [r7, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1f1      	bne.n	8008e74 <mem_cpy+0x1a>
	}
}
 8008e90:	bf00      	nop
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	617a      	str	r2, [r7, #20]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	b2d2      	uxtb	r2, r2
 8008eb6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	607b      	str	r3, [r7, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1f3      	bne.n	8008eac <mem_set+0x10>
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008ed2:	b480      	push	{r7}
 8008ed4:	b089      	sub	sp, #36	@ 0x24
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	61fb      	str	r3, [r7, #28]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	61fa      	str	r2, [r7, #28]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	61ba      	str	r2, [r7, #24]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	1acb      	subs	r3, r1, r3
 8008efe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	607b      	str	r3, [r7, #4]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d002      	beq.n	8008f12 <mem_cmp+0x40>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0eb      	beq.n	8008eea <mem_cmp+0x18>

	return r;
 8008f12:	697b      	ldr	r3, [r7, #20]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3724      	adds	r7, #36	@ 0x24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008f2a:	e002      	b.n	8008f32 <chk_chr+0x12>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	607b      	str	r3, [r7, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <chk_chr+0x26>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d1f2      	bne.n	8008f2c <chk_chr+0xc>
	return *str;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	781b      	ldrb	r3, [r3, #0]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
	...

08008f58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f62:	2300      	movs	r3, #0
 8008f64:	60bb      	str	r3, [r7, #8]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e029      	b.n	8008fc0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008f6c:	4a27      	ldr	r2, [pc, #156]	@ (800900c <chk_lock+0xb4>)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	011b      	lsls	r3, r3, #4
 8008f72:	4413      	add	r3, r2
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01d      	beq.n	8008fb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f7a:	4a24      	ldr	r2, [pc, #144]	@ (800900c <chk_lock+0xb4>)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	4413      	add	r3, r2
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d116      	bne.n	8008fba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800900c <chk_lock+0xb4>)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	011b      	lsls	r3, r3, #4
 8008f92:	4413      	add	r3, r2
 8008f94:	3304      	adds	r3, #4
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d10c      	bne.n	8008fba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800900c <chk_lock+0xb4>)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	011b      	lsls	r3, r3, #4
 8008fa6:	4413      	add	r3, r2
 8008fa8:	3308      	adds	r3, #8
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d102      	bne.n	8008fba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fb4:	e007      	b.n	8008fc6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d9d2      	bls.n	8008f6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d109      	bne.n	8008fe0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d102      	bne.n	8008fd8 <chk_lock+0x80>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d101      	bne.n	8008fdc <chk_lock+0x84>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e010      	b.n	8008ffe <chk_lock+0xa6>
 8008fdc:	2312      	movs	r3, #18
 8008fde:	e00e      	b.n	8008ffe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d108      	bne.n	8008ff8 <chk_lock+0xa0>
 8008fe6:	4a09      	ldr	r2, [pc, #36]	@ (800900c <chk_lock+0xb4>)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	4413      	add	r3, r2
 8008fee:	330c      	adds	r3, #12
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff6:	d101      	bne.n	8008ffc <chk_lock+0xa4>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	e000      	b.n	8008ffe <chk_lock+0xa6>
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	24001454 	.word	0x24001454

08009010 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009016:	2300      	movs	r3, #0
 8009018:	607b      	str	r3, [r7, #4]
 800901a:	e002      	b.n	8009022 <enq_lock+0x12>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3301      	adds	r3, #1
 8009020:	607b      	str	r3, [r7, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d806      	bhi.n	8009036 <enq_lock+0x26>
 8009028:	4a09      	ldr	r2, [pc, #36]	@ (8009050 <enq_lock+0x40>)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	4413      	add	r3, r2
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f2      	bne.n	800901c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b02      	cmp	r3, #2
 800903a:	bf14      	ite	ne
 800903c:	2301      	movne	r3, #1
 800903e:	2300      	moveq	r3, #0
 8009040:	b2db      	uxtb	r3, r3
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	24001454 	.word	0x24001454

08009054 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	e01f      	b.n	80090a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009064:	4a41      	ldr	r2, [pc, #260]	@ (800916c <inc_lock+0x118>)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	4413      	add	r3, r2
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d113      	bne.n	800909e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009076:	4a3d      	ldr	r2, [pc, #244]	@ (800916c <inc_lock+0x118>)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	4413      	add	r3, r2
 800907e:	3304      	adds	r3, #4
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009086:	429a      	cmp	r2, r3
 8009088:	d109      	bne.n	800909e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800908a:	4a38      	ldr	r2, [pc, #224]	@ (800916c <inc_lock+0x118>)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	4413      	add	r3, r2
 8009092:	3308      	adds	r3, #8
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800909a:	429a      	cmp	r2, r3
 800909c:	d006      	beq.n	80090ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3301      	adds	r3, #1
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d9dc      	bls.n	8009064 <inc_lock+0x10>
 80090aa:	e000      	b.n	80090ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80090ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d132      	bne.n	800911a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e002      	b.n	80090c0 <inc_lock+0x6c>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d806      	bhi.n	80090d4 <inc_lock+0x80>
 80090c6:	4a29      	ldr	r2, [pc, #164]	@ (800916c <inc_lock+0x118>)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	011b      	lsls	r3, r3, #4
 80090cc:	4413      	add	r3, r2
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1f2      	bne.n	80090ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d101      	bne.n	80090de <inc_lock+0x8a>
 80090da:	2300      	movs	r3, #0
 80090dc:	e040      	b.n	8009160 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4922      	ldr	r1, [pc, #136]	@ (800916c <inc_lock+0x118>)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	440b      	add	r3, r1
 80090ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	491e      	ldr	r1, [pc, #120]	@ (800916c <inc_lock+0x118>)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	440b      	add	r3, r1
 80090f8:	3304      	adds	r3, #4
 80090fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	695a      	ldr	r2, [r3, #20]
 8009100:	491a      	ldr	r1, [pc, #104]	@ (800916c <inc_lock+0x118>)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	440b      	add	r3, r1
 8009108:	3308      	adds	r3, #8
 800910a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800910c:	4a17      	ldr	r2, [pc, #92]	@ (800916c <inc_lock+0x118>)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	4413      	add	r3, r2
 8009114:	330c      	adds	r3, #12
 8009116:	2200      	movs	r2, #0
 8009118:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d009      	beq.n	8009134 <inc_lock+0xe0>
 8009120:	4a12      	ldr	r2, [pc, #72]	@ (800916c <inc_lock+0x118>)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	011b      	lsls	r3, r3, #4
 8009126:	4413      	add	r3, r2
 8009128:	330c      	adds	r3, #12
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <inc_lock+0xe0>
 8009130:	2300      	movs	r3, #0
 8009132:	e015      	b.n	8009160 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d108      	bne.n	800914c <inc_lock+0xf8>
 800913a:	4a0c      	ldr	r2, [pc, #48]	@ (800916c <inc_lock+0x118>)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	4413      	add	r3, r2
 8009142:	330c      	adds	r3, #12
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	3301      	adds	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	e001      	b.n	8009150 <inc_lock+0xfc>
 800914c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009150:	4906      	ldr	r1, [pc, #24]	@ (800916c <inc_lock+0x118>)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	440b      	add	r3, r1
 8009158:	330c      	adds	r3, #12
 800915a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	24001454 	.word	0x24001454

08009170 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3b01      	subs	r3, #1
 800917c:	607b      	str	r3, [r7, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d825      	bhi.n	80091d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009184:	4a17      	ldr	r2, [pc, #92]	@ (80091e4 <dec_lock+0x74>)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	4413      	add	r3, r2
 800918c:	330c      	adds	r3, #12
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009192:	89fb      	ldrh	r3, [r7, #14]
 8009194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009198:	d101      	bne.n	800919e <dec_lock+0x2e>
 800919a:	2300      	movs	r3, #0
 800919c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800919e:	89fb      	ldrh	r3, [r7, #14]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <dec_lock+0x3a>
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80091aa:	4a0e      	ldr	r2, [pc, #56]	@ (80091e4 <dec_lock+0x74>)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	4413      	add	r3, r2
 80091b2:	330c      	adds	r3, #12
 80091b4:	89fa      	ldrh	r2, [r7, #14]
 80091b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80091b8:	89fb      	ldrh	r3, [r7, #14]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d105      	bne.n	80091ca <dec_lock+0x5a>
 80091be:	4a09      	ldr	r2, [pc, #36]	@ (80091e4 <dec_lock+0x74>)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	011b      	lsls	r3, r3, #4
 80091c4:	4413      	add	r3, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	737b      	strb	r3, [r7, #13]
 80091ce:	e001      	b.n	80091d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80091d0:	2302      	movs	r3, #2
 80091d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80091d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	24001454 	.word	0x24001454

080091e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80091f0:	2300      	movs	r3, #0
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	e010      	b.n	8009218 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80091f6:	4a0d      	ldr	r2, [pc, #52]	@ (800922c <clear_lock+0x44>)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	4413      	add	r3, r2
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	429a      	cmp	r2, r3
 8009204:	d105      	bne.n	8009212 <clear_lock+0x2a>
 8009206:	4a09      	ldr	r2, [pc, #36]	@ (800922c <clear_lock+0x44>)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	4413      	add	r3, r2
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d9eb      	bls.n	80091f6 <clear_lock+0xe>
	}
}
 800921e:	bf00      	nop
 8009220:	bf00      	nop
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	24001454 	.word	0x24001454

08009230 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	78db      	ldrb	r3, [r3, #3]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d034      	beq.n	80092ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009248:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	7858      	ldrb	r0, [r3, #1]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009254:	2301      	movs	r3, #1
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	f7ff fd3e 	bl	8008cd8 <disk_write>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009262:	2301      	movs	r3, #1
 8009264:	73fb      	strb	r3, [r7, #15]
 8009266:	e022      	b.n	80092ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	1ad2      	subs	r2, r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	429a      	cmp	r2, r3
 800927c:	d217      	bcs.n	80092ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	789b      	ldrb	r3, [r3, #2]
 8009282:	613b      	str	r3, [r7, #16]
 8009284:	e010      	b.n	80092a8 <sync_window+0x78>
					wsect += fs->fsize;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	4413      	add	r3, r2
 800928e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	7858      	ldrb	r0, [r3, #1]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800929a:	2301      	movs	r3, #1
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	f7ff fd1b 	bl	8008cd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d8eb      	bhi.n	8009286 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d01b      	beq.n	8009308 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff ffad 	bl	8009230 <sync_window>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d113      	bne.n	8009308 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	7858      	ldrb	r0, [r3, #1]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80092ea:	2301      	movs	r3, #1
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	f7ff fcd3 	bl	8008c98 <disk_read>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80092f8:	f04f 33ff 	mov.w	r3, #4294967295
 80092fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80092fe:	2301      	movs	r3, #1
 8009300:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7ff ff87 	bl	8009230 <sync_window>
 8009322:	4603      	mov	r3, r0
 8009324:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d159      	bne.n	80093e0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d149      	bne.n	80093c8 <sync_fs+0xb4>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	791b      	ldrb	r3, [r3, #4]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d145      	bne.n	80093c8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	899b      	ldrh	r3, [r3, #12]
 8009346:	461a      	mov	r2, r3
 8009348:	2100      	movs	r1, #0
 800934a:	f7ff fda7 	bl	8008e9c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3334      	adds	r3, #52	@ 0x34
 8009352:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009356:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fd36 	bl	8008dcc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3334      	adds	r3, #52	@ 0x34
 8009364:	4921      	ldr	r1, [pc, #132]	@ (80093ec <sync_fs+0xd8>)
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff fd4b 	bl	8008e02 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3334      	adds	r3, #52	@ 0x34
 8009370:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009374:	491e      	ldr	r1, [pc, #120]	@ (80093f0 <sync_fs+0xdc>)
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff fd43 	bl	8008e02 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3334      	adds	r3, #52	@ 0x34
 8009380:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f7ff fd39 	bl	8008e02 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3334      	adds	r3, #52	@ 0x34
 8009394:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	f7ff fd2f 	bl	8008e02 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a1b      	ldr	r3, [r3, #32]
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	7858      	ldrb	r0, [r3, #1]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093bc:	2301      	movs	r3, #1
 80093be:	f7ff fc8b 	bl	8008cd8 <disk_write>
			fs->fsi_flag = 0;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2200      	movs	r2, #0
 80093ce:	2100      	movs	r1, #0
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff fca1 	bl	8008d18 <disk_ioctl>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <sync_fs+0xcc>
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	41615252 	.word	0x41615252
 80093f0:	61417272 	.word	0x61417272

080093f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	3b02      	subs	r3, #2
 8009402:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	3b02      	subs	r3, #2
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	429a      	cmp	r2, r3
 800940e:	d301      	bcc.n	8009414 <clust2sect+0x20>
 8009410:	2300      	movs	r3, #0
 8009412:	e008      	b.n	8009426 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	895b      	ldrh	r3, [r3, #10]
 8009418:	461a      	mov	r2, r3
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	fb03 f202 	mul.w	r2, r3, r2
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009424:	4413      	add	r3, r2
}
 8009426:	4618      	mov	r0, r3
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d904      	bls.n	8009452 <get_fat+0x20>
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d302      	bcc.n	8009458 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009452:	2301      	movs	r3, #1
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	e0ba      	b.n	80095ce <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009458:	f04f 33ff 	mov.w	r3, #4294967295
 800945c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	2b03      	cmp	r3, #3
 8009464:	f000 8082 	beq.w	800956c <get_fat+0x13a>
 8009468:	2b03      	cmp	r3, #3
 800946a:	f300 80a6 	bgt.w	80095ba <get_fat+0x188>
 800946e:	2b01      	cmp	r3, #1
 8009470:	d002      	beq.n	8009478 <get_fat+0x46>
 8009472:	2b02      	cmp	r3, #2
 8009474:	d055      	beq.n	8009522 <get_fat+0xf0>
 8009476:	e0a0      	b.n	80095ba <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	085b      	lsrs	r3, r3, #1
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4413      	add	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	899b      	ldrh	r3, [r3, #12]
 800948e:	4619      	mov	r1, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	fbb3 f3f1 	udiv	r3, r3, r1
 8009496:	4413      	add	r3, r2
 8009498:	4619      	mov	r1, r3
 800949a:	6938      	ldr	r0, [r7, #16]
 800949c:	f7ff ff0c 	bl	80092b8 <move_window>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f040 808c 	bne.w	80095c0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	60fa      	str	r2, [r7, #12]
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	8992      	ldrh	r2, [r2, #12]
 80094b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094b6:	fb01 f202 	mul.w	r2, r1, r2
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4413      	add	r3, r2
 80094c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80094c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	899b      	ldrh	r3, [r3, #12]
 80094ce:	4619      	mov	r1, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80094d6:	4413      	add	r3, r2
 80094d8:	4619      	mov	r1, r3
 80094da:	6938      	ldr	r0, [r7, #16]
 80094dc:	f7ff feec 	bl	80092b8 <move_window>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d16e      	bne.n	80095c4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	899b      	ldrh	r3, [r3, #12]
 80094ea:	461a      	mov	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80094f2:	fb01 f202 	mul.w	r2, r1, r2
 80094f6:	1a9b      	subs	r3, r3, r2
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	4413      	add	r3, r2
 80094fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	4313      	orrs	r3, r2
 8009506:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <get_fat+0xe6>
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	091b      	lsrs	r3, r3, #4
 8009516:	e002      	b.n	800951e <get_fat+0xec>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800951e:	617b      	str	r3, [r7, #20]
			break;
 8009520:	e055      	b.n	80095ce <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	899b      	ldrh	r3, [r3, #12]
 800952a:	085b      	lsrs	r3, r3, #1
 800952c:	b29b      	uxth	r3, r3
 800952e:	4619      	mov	r1, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	fbb3 f3f1 	udiv	r3, r3, r1
 8009536:	4413      	add	r3, r2
 8009538:	4619      	mov	r1, r3
 800953a:	6938      	ldr	r0, [r7, #16]
 800953c:	f7ff febc 	bl	80092b8 <move_window>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d140      	bne.n	80095c8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	8992      	ldrh	r2, [r2, #12]
 8009554:	fbb3 f0f2 	udiv	r0, r3, r2
 8009558:	fb00 f202 	mul.w	r2, r0, r2
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	440b      	add	r3, r1
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff fbf7 	bl	8008d54 <ld_word>
 8009566:	4603      	mov	r3, r0
 8009568:	617b      	str	r3, [r7, #20]
			break;
 800956a:	e030      	b.n	80095ce <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	899b      	ldrh	r3, [r3, #12]
 8009574:	089b      	lsrs	r3, r3, #2
 8009576:	b29b      	uxth	r3, r3
 8009578:	4619      	mov	r1, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009580:	4413      	add	r3, r2
 8009582:	4619      	mov	r1, r3
 8009584:	6938      	ldr	r0, [r7, #16]
 8009586:	f7ff fe97 	bl	80092b8 <move_window>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d11d      	bne.n	80095cc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	8992      	ldrh	r2, [r2, #12]
 800959e:	fbb3 f0f2 	udiv	r0, r3, r2
 80095a2:	fb00 f202 	mul.w	r2, r0, r2
 80095a6:	1a9b      	subs	r3, r3, r2
 80095a8:	440b      	add	r3, r1
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff fbeb 	bl	8008d86 <ld_dword>
 80095b0:	4603      	mov	r3, r0
 80095b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80095b6:	617b      	str	r3, [r7, #20]
			break;
 80095b8:	e009      	b.n	80095ce <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80095ba:	2301      	movs	r3, #1
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	e006      	b.n	80095ce <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095c0:	bf00      	nop
 80095c2:	e004      	b.n	80095ce <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095c4:	bf00      	nop
 80095c6:	e002      	b.n	80095ce <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095c8:	bf00      	nop
 80095ca:	e000      	b.n	80095ce <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095cc:	bf00      	nop
		}
	}

	return val;
 80095ce:	697b      	ldr	r3, [r7, #20]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80095d8:	b590      	push	{r4, r7, lr}
 80095da:	b089      	sub	sp, #36	@ 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80095e4:	2302      	movs	r3, #2
 80095e6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	f240 8109 	bls.w	8009802 <put_fat+0x22a>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	f080 8103 	bcs.w	8009802 <put_fat+0x22a>
		switch (fs->fs_type) {
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b03      	cmp	r3, #3
 8009602:	f000 80b6 	beq.w	8009772 <put_fat+0x19a>
 8009606:	2b03      	cmp	r3, #3
 8009608:	f300 80fb 	bgt.w	8009802 <put_fat+0x22a>
 800960c:	2b01      	cmp	r3, #1
 800960e:	d003      	beq.n	8009618 <put_fat+0x40>
 8009610:	2b02      	cmp	r3, #2
 8009612:	f000 8083 	beq.w	800971c <put_fat+0x144>
 8009616:	e0f4      	b.n	8009802 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	61bb      	str	r3, [r7, #24]
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	69ba      	ldr	r2, [r7, #24]
 8009622:	4413      	add	r3, r2
 8009624:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	899b      	ldrh	r3, [r3, #12]
 800962e:	4619      	mov	r1, r3
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	fbb3 f3f1 	udiv	r3, r3, r1
 8009636:	4413      	add	r3, r2
 8009638:	4619      	mov	r1, r3
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fe3c 	bl	80092b8 <move_window>
 8009640:	4603      	mov	r3, r0
 8009642:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009644:	7ffb      	ldrb	r3, [r7, #31]
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 80d4 	bne.w	80097f4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	61ba      	str	r2, [r7, #24]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	8992      	ldrh	r2, [r2, #12]
 800965c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009660:	fb00 f202 	mul.w	r2, r0, r2
 8009664:	1a9b      	subs	r3, r3, r2
 8009666:	440b      	add	r3, r1
 8009668:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00d      	beq.n	8009690 <put_fat+0xb8>
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	b25b      	sxtb	r3, r3
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	b25a      	sxtb	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	b25b      	sxtb	r3, r3
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	b25b      	sxtb	r3, r3
 8009688:	4313      	orrs	r3, r2
 800968a:	b25b      	sxtb	r3, r3
 800968c:	b2db      	uxtb	r3, r3
 800968e:	e001      	b.n	8009694 <put_fat+0xbc>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2201      	movs	r2, #1
 800969c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	899b      	ldrh	r3, [r3, #12]
 80096a6:	4619      	mov	r1, r3
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80096ae:	4413      	add	r3, r2
 80096b0:	4619      	mov	r1, r3
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff fe00 	bl	80092b8 <move_window>
 80096b8:	4603      	mov	r3, r0
 80096ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096bc:	7ffb      	ldrb	r3, [r7, #31]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f040 809a 	bne.w	80097f8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	899b      	ldrh	r3, [r3, #12]
 80096ce:	461a      	mov	r2, r3
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80096d6:	fb00 f202 	mul.w	r2, r0, r2
 80096da:	1a9b      	subs	r3, r3, r2
 80096dc:	440b      	add	r3, r1
 80096de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <put_fat+0x11a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	091b      	lsrs	r3, r3, #4
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	e00e      	b.n	8009710 <put_fat+0x138>
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	b25b      	sxtb	r3, r3
 80096f8:	f023 030f 	bic.w	r3, r3, #15
 80096fc:	b25a      	sxtb	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	0a1b      	lsrs	r3, r3, #8
 8009702:	b25b      	sxtb	r3, r3
 8009704:	f003 030f 	and.w	r3, r3, #15
 8009708:	b25b      	sxtb	r3, r3
 800970a:	4313      	orrs	r3, r2
 800970c:	b25b      	sxtb	r3, r3
 800970e:	b2db      	uxtb	r3, r3
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	70da      	strb	r2, [r3, #3]
			break;
 800971a:	e072      	b.n	8009802 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	899b      	ldrh	r3, [r3, #12]
 8009724:	085b      	lsrs	r3, r3, #1
 8009726:	b29b      	uxth	r3, r3
 8009728:	4619      	mov	r1, r3
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009730:	4413      	add	r3, r2
 8009732:	4619      	mov	r1, r3
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f7ff fdbf 	bl	80092b8 <move_window>
 800973a:	4603      	mov	r3, r0
 800973c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800973e:	7ffb      	ldrb	r3, [r7, #31]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d15b      	bne.n	80097fc <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	8992      	ldrh	r2, [r2, #12]
 8009752:	fbb3 f0f2 	udiv	r0, r3, r2
 8009756:	fb00 f202 	mul.w	r2, r0, r2
 800975a:	1a9b      	subs	r3, r3, r2
 800975c:	440b      	add	r3, r1
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	b292      	uxth	r2, r2
 8009762:	4611      	mov	r1, r2
 8009764:	4618      	mov	r0, r3
 8009766:	f7ff fb31 	bl	8008dcc <st_word>
			fs->wflag = 1;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2201      	movs	r2, #1
 800976e:	70da      	strb	r2, [r3, #3]
			break;
 8009770:	e047      	b.n	8009802 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	899b      	ldrh	r3, [r3, #12]
 800977a:	089b      	lsrs	r3, r3, #2
 800977c:	b29b      	uxth	r3, r3
 800977e:	4619      	mov	r1, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	fbb3 f3f1 	udiv	r3, r3, r1
 8009786:	4413      	add	r3, r2
 8009788:	4619      	mov	r1, r3
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff fd94 	bl	80092b8 <move_window>
 8009790:	4603      	mov	r3, r0
 8009792:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009794:	7ffb      	ldrb	r3, [r7, #31]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d132      	bne.n	8009800 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	8992      	ldrh	r2, [r2, #12]
 80097ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80097b2:	fb00 f202 	mul.w	r2, r0, r2
 80097b6:	1a9b      	subs	r3, r3, r2
 80097b8:	440b      	add	r3, r1
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff fae3 	bl	8008d86 <ld_dword>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80097c6:	4323      	orrs	r3, r4
 80097c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	8992      	ldrh	r2, [r2, #12]
 80097d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80097dc:	fb00 f202 	mul.w	r2, r0, r2
 80097e0:	1a9b      	subs	r3, r3, r2
 80097e2:	440b      	add	r3, r1
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7ff fb0b 	bl	8008e02 <st_dword>
			fs->wflag = 1;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2201      	movs	r2, #1
 80097f0:	70da      	strb	r2, [r3, #3]
			break;
 80097f2:	e006      	b.n	8009802 <put_fat+0x22a>
			if (res != FR_OK) break;
 80097f4:	bf00      	nop
 80097f6:	e004      	b.n	8009802 <put_fat+0x22a>
			if (res != FR_OK) break;
 80097f8:	bf00      	nop
 80097fa:	e002      	b.n	8009802 <put_fat+0x22a>
			if (res != FR_OK) break;
 80097fc:	bf00      	nop
 80097fe:	e000      	b.n	8009802 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009800:	bf00      	nop
		}
	}
	return res;
 8009802:	7ffb      	ldrb	r3, [r7, #31]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3724      	adds	r7, #36	@ 0x24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd90      	pop	{r4, r7, pc}

0800980c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d904      	bls.n	8009832 <remove_chain+0x26>
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	429a      	cmp	r2, r3
 8009830:	d301      	bcc.n	8009836 <remove_chain+0x2a>
 8009832:	2302      	movs	r3, #2
 8009834:	e04b      	b.n	80098ce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00c      	beq.n	8009856 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	69b8      	ldr	r0, [r7, #24]
 8009844:	f7ff fec8 	bl	80095d8 <put_fat>
 8009848:	4603      	mov	r3, r0
 800984a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800984c:	7ffb      	ldrb	r3, [r7, #31]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <remove_chain+0x4a>
 8009852:	7ffb      	ldrb	r3, [r7, #31]
 8009854:	e03b      	b.n	80098ce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009856:	68b9      	ldr	r1, [r7, #8]
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f7ff fdea 	bl	8009432 <get_fat>
 800985e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d031      	beq.n	80098ca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d101      	bne.n	8009870 <remove_chain+0x64>
 800986c:	2302      	movs	r3, #2
 800986e:	e02e      	b.n	80098ce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009876:	d101      	bne.n	800987c <remove_chain+0x70>
 8009878:	2301      	movs	r3, #1
 800987a:	e028      	b.n	80098ce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800987c:	2200      	movs	r2, #0
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	69b8      	ldr	r0, [r7, #24]
 8009882:	f7ff fea9 	bl	80095d8 <put_fat>
 8009886:	4603      	mov	r3, r0
 8009888:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800988a:	7ffb      	ldrb	r3, [r7, #31]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <remove_chain+0x88>
 8009890:	7ffb      	ldrb	r3, [r7, #31]
 8009892:	e01c      	b.n	80098ce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	695a      	ldr	r2, [r3, #20]
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	3b02      	subs	r3, #2
 800989e:	429a      	cmp	r2, r3
 80098a0:	d20b      	bcs.n	80098ba <remove_chain+0xae>
			fs->free_clst++;
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	791b      	ldrb	r3, [r3, #4]
 80098b0:	f043 0301 	orr.w	r3, r3, #1
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d3c6      	bcc.n	8009856 <remove_chain+0x4a>
 80098c8:	e000      	b.n	80098cc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80098ca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3720      	adds	r7, #32
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b088      	sub	sp, #32
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10d      	bne.n	8009908 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d004      	beq.n	8009902 <create_chain+0x2c>
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d31b      	bcc.n	800993a <create_chain+0x64>
 8009902:	2301      	movs	r3, #1
 8009904:	61bb      	str	r3, [r7, #24]
 8009906:	e018      	b.n	800993a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff fd91 	bl	8009432 <get_fat>
 8009910:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d801      	bhi.n	800991c <create_chain+0x46>
 8009918:	2301      	movs	r3, #1
 800991a:	e070      	b.n	80099fe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d101      	bne.n	8009928 <create_chain+0x52>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	e06a      	b.n	80099fe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	429a      	cmp	r2, r3
 8009930:	d201      	bcs.n	8009936 <create_chain+0x60>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	e063      	b.n	80099fe <create_chain+0x128>
		scl = clst;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	3301      	adds	r3, #1
 8009942:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	429a      	cmp	r2, r3
 800994c:	d307      	bcc.n	800995e <create_chain+0x88>
				ncl = 2;
 800994e:	2302      	movs	r3, #2
 8009950:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	429a      	cmp	r2, r3
 8009958:	d901      	bls.n	800995e <create_chain+0x88>
 800995a:	2300      	movs	r3, #0
 800995c:	e04f      	b.n	80099fe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800995e:	69f9      	ldr	r1, [r7, #28]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff fd66 	bl	8009432 <get_fat>
 8009966:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00e      	beq.n	800998c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d003      	beq.n	800997c <create_chain+0xa6>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d101      	bne.n	8009980 <create_chain+0xaa>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	e03e      	b.n	80099fe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	429a      	cmp	r2, r3
 8009986:	d1da      	bne.n	800993e <create_chain+0x68>
 8009988:	2300      	movs	r3, #0
 800998a:	e038      	b.n	80099fe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800998c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800998e:	f04f 32ff 	mov.w	r2, #4294967295
 8009992:	69f9      	ldr	r1, [r7, #28]
 8009994:	6938      	ldr	r0, [r7, #16]
 8009996:	f7ff fe1f 	bl	80095d8 <put_fat>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d109      	bne.n	80099b8 <create_chain+0xe2>
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d006      	beq.n	80099b8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6938      	ldr	r0, [r7, #16]
 80099b0:	f7ff fe12 	bl	80095d8 <put_fat>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d116      	bne.n	80099ec <create_chain+0x116>
		fs->last_clst = ncl;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	695a      	ldr	r2, [r3, #20]
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	3b02      	subs	r3, #2
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d804      	bhi.n	80099dc <create_chain+0x106>
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	1e5a      	subs	r2, r3, #1
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	791b      	ldrb	r3, [r3, #4]
 80099e0:	f043 0301 	orr.w	r3, r3, #1
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	711a      	strb	r2, [r3, #4]
 80099ea:	e007      	b.n	80099fc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d102      	bne.n	80099f8 <create_chain+0x122>
 80099f2:	f04f 33ff 	mov.w	r3, #4294967295
 80099f6:	e000      	b.n	80099fa <create_chain+0x124>
 80099f8:	2301      	movs	r3, #1
 80099fa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80099fc:	69fb      	ldr	r3, [r7, #28]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3720      	adds	r7, #32
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b087      	sub	sp, #28
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	899b      	ldrh	r3, [r3, #12]
 8009a22:	461a      	mov	r2, r3
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	8952      	ldrh	r2, [r2, #10]
 8009a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a32:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	613a      	str	r2, [r7, #16]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <clmt_clust+0x42>
 8009a44:	2300      	movs	r3, #0
 8009a46:	e010      	b.n	8009a6a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d307      	bcc.n	8009a60 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a5e:	e7e9      	b.n	8009a34 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009a60:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	4413      	add	r3, r2
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	371c      	adds	r7, #28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b086      	sub	sp, #24
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a8c:	d204      	bcs.n	8009a98 <dir_sdi+0x22>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	f003 031f 	and.w	r3, r3, #31
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e071      	b.n	8009b80 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <dir_sdi+0x46>
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d902      	bls.n	8009abc <dir_sdi+0x46>
		clst = fs->dirbase;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aba:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10c      	bne.n	8009adc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	095b      	lsrs	r3, r3, #5
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	8912      	ldrh	r2, [r2, #8]
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d301      	bcc.n	8009ad2 <dir_sdi+0x5c>
 8009ace:	2302      	movs	r3, #2
 8009ad0:	e056      	b.n	8009b80 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	61da      	str	r2, [r3, #28]
 8009ada:	e02d      	b.n	8009b38 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	895b      	ldrh	r3, [r3, #10]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	899b      	ldrh	r3, [r3, #12]
 8009ae6:	fb02 f303 	mul.w	r3, r2, r3
 8009aea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009aec:	e019      	b.n	8009b22 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6979      	ldr	r1, [r7, #20]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff fc9d 	bl	8009432 <get_fat>
 8009af8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d101      	bne.n	8009b06 <dir_sdi+0x90>
 8009b02:	2301      	movs	r3, #1
 8009b04:	e03c      	b.n	8009b80 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d904      	bls.n	8009b16 <dir_sdi+0xa0>
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d301      	bcc.n	8009b1a <dir_sdi+0xa4>
 8009b16:	2302      	movs	r3, #2
 8009b18:	e032      	b.n	8009b80 <dir_sdi+0x10a>
			ofs -= csz;
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d2e1      	bcs.n	8009aee <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009b2a:	6979      	ldr	r1, [r7, #20]
 8009b2c:	6938      	ldr	r0, [r7, #16]
 8009b2e:	f7ff fc61 	bl	80093f4 <clust2sect>
 8009b32:	4602      	mov	r2, r0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <dir_sdi+0xd4>
 8009b46:	2302      	movs	r3, #2
 8009b48:	e01a      	b.n	8009b80 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	69da      	ldr	r2, [r3, #28]
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	899b      	ldrh	r3, [r3, #12]
 8009b52:	4619      	mov	r1, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b5a:	441a      	add	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	899b      	ldrh	r3, [r3, #12]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b72:	fb00 f202 	mul.w	r2, r0, r2
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	18ca      	adds	r2, r1, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	3320      	adds	r3, #32
 8009b9e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <dir_next+0x28>
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bae:	d301      	bcc.n	8009bb4 <dir_next+0x2c>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	e0bb      	b.n	8009d2c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	899b      	ldrh	r3, [r3, #12]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bc0:	fb01 f202 	mul.w	r2, r1, r2
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f040 809d 	bne.w	8009d06 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	8912      	ldrh	r2, [r2, #8]
 8009be6:	4293      	cmp	r3, r2
 8009be8:	f0c0 808d 	bcc.w	8009d06 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	61da      	str	r2, [r3, #28]
 8009bf2:	2304      	movs	r3, #4
 8009bf4:	e09a      	b.n	8009d2c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	899b      	ldrh	r3, [r3, #12]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	8952      	ldrh	r2, [r2, #10]
 8009c06:	3a01      	subs	r2, #1
 8009c08:	4013      	ands	r3, r2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d17b      	bne.n	8009d06 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	4619      	mov	r1, r3
 8009c16:	4610      	mov	r0, r2
 8009c18:	f7ff fc0b 	bl	8009432 <get_fat>
 8009c1c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d801      	bhi.n	8009c28 <dir_next+0xa0>
 8009c24:	2302      	movs	r3, #2
 8009c26:	e081      	b.n	8009d2c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d101      	bne.n	8009c34 <dir_next+0xac>
 8009c30:	2301      	movs	r3, #1
 8009c32:	e07b      	b.n	8009d2c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d359      	bcc.n	8009cf2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d104      	bne.n	8009c4e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	61da      	str	r2, [r3, #28]
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	e06e      	b.n	8009d2c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f7ff fe3d 	bl	80098d6 <create_chain>
 8009c5c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <dir_next+0xe0>
 8009c64:	2307      	movs	r3, #7
 8009c66:	e061      	b.n	8009d2c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <dir_next+0xea>
 8009c6e:	2302      	movs	r3, #2
 8009c70:	e05c      	b.n	8009d2c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c78:	d101      	bne.n	8009c7e <dir_next+0xf6>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e056      	b.n	8009d2c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f7ff fad6 	bl	8009230 <sync_window>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <dir_next+0x106>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e04e      	b.n	8009d2c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	899b      	ldrh	r3, [r3, #12]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	f7ff f8fe 	bl	8008e9c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]
 8009ca4:	6979      	ldr	r1, [r7, #20]
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f7ff fba4 	bl	80093f4 <clust2sect>
 8009cac:	4602      	mov	r2, r0
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cb2:	e012      	b.n	8009cda <dir_next+0x152>
						fs->wflag = 1;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff fab8 	bl	8009230 <sync_window>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <dir_next+0x142>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e030      	b.n	8009d2c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	895b      	ldrh	r3, [r3, #10]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d3e6      	bcc.n	8009cb4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	1ad2      	subs	r2, r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009cf8:	6979      	ldr	r1, [r7, #20]
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff fb7a 	bl	80093f4 <clust2sect>
 8009d00:	4602      	mov	r2, r0
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	899b      	ldrh	r3, [r3, #12]
 8009d16:	461a      	mov	r2, r3
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d1e:	fb00 f202 	mul.w	r2, r0, r2
 8009d22:	1a9b      	subs	r3, r3, r2
 8009d24:	18ca      	adds	r2, r1, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009d44:	2100      	movs	r1, #0
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff fe95 	bl	8009a76 <dir_sdi>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d12b      	bne.n	8009dae <dir_alloc+0x7a>
		n = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f7ff faa9 	bl	80092b8 <move_window>
 8009d66:	4603      	mov	r3, r0
 8009d68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d11d      	bne.n	8009dac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a1b      	ldr	r3, [r3, #32]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	2be5      	cmp	r3, #229	@ 0xe5
 8009d78:	d004      	beq.n	8009d84 <dir_alloc+0x50>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d107      	bne.n	8009d94 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	3301      	adds	r3, #1
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d102      	bne.n	8009d98 <dir_alloc+0x64>
 8009d92:	e00c      	b.n	8009dae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009d94:	2300      	movs	r3, #0
 8009d96:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009d98:	2101      	movs	r1, #1
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff fef4 	bl	8009b88 <dir_next>
 8009da0:	4603      	mov	r3, r0
 8009da2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0d7      	beq.n	8009d5a <dir_alloc+0x26>
 8009daa:	e000      	b.n	8009dae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009dac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
 8009db0:	2b04      	cmp	r3, #4
 8009db2:	d101      	bne.n	8009db8 <dir_alloc+0x84>
 8009db4:	2307      	movs	r3, #7
 8009db6:	75fb      	strb	r3, [r7, #23]
	return res;
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	331a      	adds	r3, #26
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fe ffbf 	bl	8008d54 <ld_word>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	d109      	bne.n	8009df6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	3314      	adds	r3, #20
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe ffb4 	bl	8008d54 <ld_word>
 8009dec:	4603      	mov	r3, r0
 8009dee:	041b      	lsls	r3, r3, #16
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009df6:	68fb      	ldr	r3, [r7, #12]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	331a      	adds	r3, #26
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	b292      	uxth	r2, r2
 8009e14:	4611      	mov	r1, r2
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe ffd8 	bl	8008dcc <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d109      	bne.n	8009e38 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f103 0214 	add.w	r2, r3, #20
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	0c1b      	lsrs	r3, r3, #16
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f7fe ffca 	bl	8008dcc <st_word>
	}
}
 8009e38:	bf00      	nop
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009e4e:	2100      	movs	r1, #0
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff fe10 	bl	8009a76 <dir_sdi>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <dir_find+0x24>
 8009e60:	7dfb      	ldrb	r3, [r7, #23]
 8009e62:	e03e      	b.n	8009ee2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6938      	ldr	r0, [r7, #16]
 8009e6c:	f7ff fa24 	bl	80092b8 <move_window>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d12f      	bne.n	8009eda <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <dir_find+0x4e>
 8009e88:	2304      	movs	r3, #4
 8009e8a:	75fb      	strb	r3, [r7, #23]
 8009e8c:	e028      	b.n	8009ee0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	330b      	adds	r3, #11
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	330b      	adds	r3, #11
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 0308 	and.w	r3, r3, #8
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10a      	bne.n	8009ec6 <dir_find+0x86>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a18      	ldr	r0, [r3, #32]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3324      	adds	r3, #36	@ 0x24
 8009eb8:	220b      	movs	r2, #11
 8009eba:	4619      	mov	r1, r3
 8009ebc:	f7ff f809 	bl	8008ed2 <mem_cmp>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00b      	beq.n	8009ede <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff fe5d 	bl	8009b88 <dir_next>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0c5      	beq.n	8009e64 <dir_find+0x24>
 8009ed8:	e002      	b.n	8009ee0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009eda:	bf00      	nop
 8009edc:	e000      	b.n	8009ee0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ede:	bf00      	nop

	return res;
 8009ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3718      	adds	r7, #24
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009ef8:	2101      	movs	r1, #1
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff ff1a 	bl	8009d34 <dir_alloc>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d11c      	bne.n	8009f44 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	68b8      	ldr	r0, [r7, #8]
 8009f12:	f7ff f9d1 	bl	80092b8 <move_window>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d111      	bne.n	8009f44 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	2220      	movs	r2, #32
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fe ffb7 	bl	8008e9c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a18      	ldr	r0, [r3, #32]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3324      	adds	r3, #36	@ 0x24
 8009f36:	220b      	movs	r2, #11
 8009f38:	4619      	mov	r1, r3
 8009f3a:	f7fe ff8e 	bl	8008e5a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2201      	movs	r2, #1
 8009f42:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
	...

08009f50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	3324      	adds	r3, #36	@ 0x24
 8009f64:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009f66:	220b      	movs	r2, #11
 8009f68:	2120      	movs	r1, #32
 8009f6a:	68b8      	ldr	r0, [r7, #8]
 8009f6c:	f7fe ff96 	bl	8008e9c <mem_set>
	si = i = 0; ni = 8;
 8009f70:	2300      	movs	r3, #0
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	2308      	movs	r3, #8
 8009f7a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	61fa      	str	r2, [r7, #28]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	4413      	add	r3, r2
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009f8a:	7efb      	ldrb	r3, [r7, #27]
 8009f8c:	2b20      	cmp	r3, #32
 8009f8e:	d94e      	bls.n	800a02e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009f90:	7efb      	ldrb	r3, [r7, #27]
 8009f92:	2b2f      	cmp	r3, #47	@ 0x2f
 8009f94:	d006      	beq.n	8009fa4 <create_name+0x54>
 8009f96:	7efb      	ldrb	r3, [r7, #27]
 8009f98:	2b5c      	cmp	r3, #92	@ 0x5c
 8009f9a:	d110      	bne.n	8009fbe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009f9c:	e002      	b.n	8009fa4 <create_name+0x54>
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	61fb      	str	r3, [r7, #28]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	4413      	add	r3, r2
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	2b2f      	cmp	r3, #47	@ 0x2f
 8009fae:	d0f6      	beq.n	8009f9e <create_name+0x4e>
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b5c      	cmp	r3, #92	@ 0x5c
 8009fba:	d0f0      	beq.n	8009f9e <create_name+0x4e>
			break;
 8009fbc:	e038      	b.n	800a030 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009fbe:	7efb      	ldrb	r3, [r7, #27]
 8009fc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fc2:	d003      	beq.n	8009fcc <create_name+0x7c>
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d30c      	bcc.n	8009fe6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2b0b      	cmp	r3, #11
 8009fd0:	d002      	beq.n	8009fd8 <create_name+0x88>
 8009fd2:	7efb      	ldrb	r3, [r7, #27]
 8009fd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fd6:	d001      	beq.n	8009fdc <create_name+0x8c>
 8009fd8:	2306      	movs	r3, #6
 8009fda:	e044      	b.n	800a066 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009fdc:	2308      	movs	r3, #8
 8009fde:	613b      	str	r3, [r7, #16]
 8009fe0:	230b      	movs	r3, #11
 8009fe2:	617b      	str	r3, [r7, #20]
			continue;
 8009fe4:	e022      	b.n	800a02c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009fe6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	da04      	bge.n	8009ff8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009fee:	7efb      	ldrb	r3, [r7, #27]
 8009ff0:	3b80      	subs	r3, #128	@ 0x80
 8009ff2:	4a1f      	ldr	r2, [pc, #124]	@ (800a070 <create_name+0x120>)
 8009ff4:	5cd3      	ldrb	r3, [r2, r3]
 8009ff6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009ff8:	7efb      	ldrb	r3, [r7, #27]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	481d      	ldr	r0, [pc, #116]	@ (800a074 <create_name+0x124>)
 8009ffe:	f7fe ff8f 	bl	8008f20 <chk_chr>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <create_name+0xbc>
 800a008:	2306      	movs	r3, #6
 800a00a:	e02c      	b.n	800a066 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a00c:	7efb      	ldrb	r3, [r7, #27]
 800a00e:	2b60      	cmp	r3, #96	@ 0x60
 800a010:	d905      	bls.n	800a01e <create_name+0xce>
 800a012:	7efb      	ldrb	r3, [r7, #27]
 800a014:	2b7a      	cmp	r3, #122	@ 0x7a
 800a016:	d802      	bhi.n	800a01e <create_name+0xce>
 800a018:	7efb      	ldrb	r3, [r7, #27]
 800a01a:	3b20      	subs	r3, #32
 800a01c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	613a      	str	r2, [r7, #16]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	4413      	add	r3, r2
 800a028:	7efa      	ldrb	r2, [r7, #27]
 800a02a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a02c:	e7a6      	b.n	8009f7c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a02e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	441a      	add	r2, r3
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <create_name+0xf4>
 800a040:	2306      	movs	r3, #6
 800a042:	e010      	b.n	800a066 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	2be5      	cmp	r3, #229	@ 0xe5
 800a04a:	d102      	bne.n	800a052 <create_name+0x102>
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2205      	movs	r2, #5
 800a050:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a052:	7efb      	ldrb	r3, [r7, #27]
 800a054:	2b20      	cmp	r3, #32
 800a056:	d801      	bhi.n	800a05c <create_name+0x10c>
 800a058:	2204      	movs	r2, #4
 800a05a:	e000      	b.n	800a05e <create_name+0x10e>
 800a05c:	2200      	movs	r2, #0
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	330b      	adds	r3, #11
 800a062:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a064:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a066:	4618      	mov	r0, r3
 800a068:	3720      	adds	r7, #32
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	0800cab8 	.word	0x0800cab8
 800a074:	0800ca48 	.word	0x0800ca48

0800a078 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a08c:	e002      	b.n	800a094 <follow_path+0x1c>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	3301      	adds	r3, #1
 800a092:	603b      	str	r3, [r7, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b2f      	cmp	r3, #47	@ 0x2f
 800a09a:	d0f8      	beq.n	800a08e <follow_path+0x16>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a0a2:	d0f4      	beq.n	800a08e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2b1f      	cmp	r3, #31
 800a0b0:	d80a      	bhi.n	800a0c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2280      	movs	r2, #128	@ 0x80
 800a0b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7ff fcda 	bl	8009a76 <dir_sdi>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	75fb      	strb	r3, [r7, #23]
 800a0c6:	e048      	b.n	800a15a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0c8:	463b      	mov	r3, r7
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff ff3f 	bl	8009f50 <create_name>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d139      	bne.n	800a150 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff feaf 	bl	8009e40 <dir_find>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a0ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00a      	beq.n	800a10a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	2b04      	cmp	r3, #4
 800a0f8:	d12c      	bne.n	800a154 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a0fa:	7afb      	ldrb	r3, [r7, #11]
 800a0fc:	f003 0304 	and.w	r3, r3, #4
 800a100:	2b00      	cmp	r3, #0
 800a102:	d127      	bne.n	800a154 <follow_path+0xdc>
 800a104:	2305      	movs	r3, #5
 800a106:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a108:	e024      	b.n	800a154 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d121      	bne.n	800a158 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	799b      	ldrb	r3, [r3, #6]
 800a118:	f003 0310 	and.w	r3, r3, #16
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d102      	bne.n	800a126 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a120:	2305      	movs	r3, #5
 800a122:	75fb      	strb	r3, [r7, #23]
 800a124:	e019      	b.n	800a15a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	8992      	ldrh	r2, [r2, #12]
 800a134:	fbb3 f0f2 	udiv	r0, r3, r2
 800a138:	fb00 f202 	mul.w	r2, r0, r2
 800a13c:	1a9b      	subs	r3, r3, r2
 800a13e:	440b      	add	r3, r1
 800a140:	4619      	mov	r1, r3
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff fe3d 	bl	8009dc2 <ld_clust>
 800a148:	4602      	mov	r2, r0
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a14e:	e7bb      	b.n	800a0c8 <follow_path+0x50>
			if (res != FR_OK) break;
 800a150:	bf00      	nop
 800a152:	e002      	b.n	800a15a <follow_path+0xe2>
				break;
 800a154:	bf00      	nop
 800a156:	e000      	b.n	800a15a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a158:	bf00      	nop
			}
		}
	}

	return res;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a164:	b480      	push	{r7}
 800a166:	b087      	sub	sp, #28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a16c:	f04f 33ff 	mov.w	r3, #4294967295
 800a170:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d031      	beq.n	800a1de <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	e002      	b.n	800a188 <get_ldnumber+0x24>
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	3301      	adds	r3, #1
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2b20      	cmp	r3, #32
 800a18e:	d903      	bls.n	800a198 <get_ldnumber+0x34>
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b3a      	cmp	r3, #58	@ 0x3a
 800a196:	d1f4      	bne.n	800a182 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a19e:	d11c      	bne.n	800a1da <get_ldnumber+0x76>
			tp = *path;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	60fa      	str	r2, [r7, #12]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	3b30      	subs	r3, #48	@ 0x30
 800a1b0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2b09      	cmp	r3, #9
 800a1b6:	d80e      	bhi.n	800a1d6 <get_ldnumber+0x72>
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d10a      	bne.n	800a1d6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d107      	bne.n	800a1d6 <get_ldnumber+0x72>
					vol = (int)i;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	e002      	b.n	800a1e0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a1da:	2300      	movs	r3, #0
 800a1dc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a1de:	693b      	ldr	r3, [r7, #16]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	371c      	adds	r7, #28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	70da      	strb	r2, [r3, #3]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a202:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7ff f856 	bl	80092b8 <move_window>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <check_fs+0x2a>
 800a212:	2304      	movs	r3, #4
 800a214:	e038      	b.n	800a288 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	3334      	adds	r3, #52	@ 0x34
 800a21a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe fd98 	bl	8008d54 <ld_word>
 800a224:	4603      	mov	r3, r0
 800a226:	461a      	mov	r2, r3
 800a228:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d001      	beq.n	800a234 <check_fs+0x48>
 800a230:	2303      	movs	r3, #3
 800a232:	e029      	b.n	800a288 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a23a:	2be9      	cmp	r3, #233	@ 0xe9
 800a23c:	d009      	beq.n	800a252 <check_fs+0x66>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a244:	2beb      	cmp	r3, #235	@ 0xeb
 800a246:	d11e      	bne.n	800a286 <check_fs+0x9a>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a24e:	2b90      	cmp	r3, #144	@ 0x90
 800a250:	d119      	bne.n	800a286 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3334      	adds	r3, #52	@ 0x34
 800a256:	3336      	adds	r3, #54	@ 0x36
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fe fd94 	bl	8008d86 <ld_dword>
 800a25e:	4603      	mov	r3, r0
 800a260:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a264:	4a0a      	ldr	r2, [pc, #40]	@ (800a290 <check_fs+0xa4>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d101      	bne.n	800a26e <check_fs+0x82>
 800a26a:	2300      	movs	r3, #0
 800a26c:	e00c      	b.n	800a288 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3334      	adds	r3, #52	@ 0x34
 800a272:	3352      	adds	r3, #82	@ 0x52
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe fd86 	bl	8008d86 <ld_dword>
 800a27a:	4603      	mov	r3, r0
 800a27c:	4a05      	ldr	r2, [pc, #20]	@ (800a294 <check_fs+0xa8>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d101      	bne.n	800a286 <check_fs+0x9a>
 800a282:	2300      	movs	r3, #0
 800a284:	e000      	b.n	800a288 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a286:	2302      	movs	r3, #2
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	00544146 	.word	0x00544146
 800a294:	33544146 	.word	0x33544146

0800a298 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b096      	sub	sp, #88	@ 0x58
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f7ff ff59 	bl	800a164 <get_ldnumber>
 800a2b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	da01      	bge.n	800a2be <find_volume+0x26>
 800a2ba:	230b      	movs	r3, #11
 800a2bc:	e262      	b.n	800a784 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a2be:	4a9f      	ldr	r2, [pc, #636]	@ (800a53c <find_volume+0x2a4>)
 800a2c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <find_volume+0x3a>
 800a2ce:	230c      	movs	r3, #12
 800a2d0:	e258      	b.n	800a784 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a2d8:	79fb      	ldrb	r3, [r7, #7]
 800a2da:	f023 0301 	bic.w	r3, r3, #1
 800a2de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01a      	beq.n	800a31e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ea:	785b      	ldrb	r3, [r3, #1]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe fc91 	bl	8008c14 <disk_status>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a2f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2fc:	f003 0301 	and.w	r3, r3, #1
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10c      	bne.n	800a31e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a304:	79fb      	ldrb	r3, [r7, #7]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d007      	beq.n	800a31a <find_volume+0x82>
 800a30a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a30e:	f003 0304 	and.w	r3, r3, #4
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a316:	230a      	movs	r3, #10
 800a318:	e234      	b.n	800a784 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800a31a:	2300      	movs	r3, #0
 800a31c:	e232      	b.n	800a784 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a326:	b2da      	uxtb	r2, r3
 800a328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe fc89 	bl	8008c48 <disk_initialize>
 800a336:	4603      	mov	r3, r0
 800a338:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a33c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a348:	2303      	movs	r3, #3
 800a34a:	e21b      	b.n	800a784 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d007      	beq.n	800a362 <find_volume+0xca>
 800a352:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a356:	f003 0304 	and.w	r3, r3, #4
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a35e:	230a      	movs	r3, #10
 800a360:	e210      	b.n	800a784 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	7858      	ldrb	r0, [r3, #1]
 800a366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a368:	330c      	adds	r3, #12
 800a36a:	461a      	mov	r2, r3
 800a36c:	2102      	movs	r1, #2
 800a36e:	f7fe fcd3 	bl	8008d18 <disk_ioctl>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <find_volume+0xe4>
 800a378:	2301      	movs	r3, #1
 800a37a:	e203      	b.n	800a784 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37e:	899b      	ldrh	r3, [r3, #12]
 800a380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a384:	d80d      	bhi.n	800a3a2 <find_volume+0x10a>
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	899b      	ldrh	r3, [r3, #12]
 800a38a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a38e:	d308      	bcc.n	800a3a2 <find_volume+0x10a>
 800a390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a392:	899b      	ldrh	r3, [r3, #12]
 800a394:	461a      	mov	r2, r3
 800a396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a398:	899b      	ldrh	r3, [r3, #12]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	4013      	ands	r3, r2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <find_volume+0x10e>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e1ee      	b.n	800a784 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a3aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3ae:	f7ff ff1d 	bl	800a1ec <check_fs>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a3b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d149      	bne.n	800a454 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3c4:	e01e      	b.n	800a404 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a3cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ce:	011b      	lsls	r3, r3, #4
 800a3d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a3d4:	4413      	add	r3, r2
 800a3d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3da:	3304      	adds	r3, #4
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d006      	beq.n	800a3f0 <find_volume+0x158>
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe fccd 	bl	8008d86 <ld_dword>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	e000      	b.n	800a3f2 <find_volume+0x15a>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	3358      	adds	r3, #88	@ 0x58
 800a3f8:	443b      	add	r3, r7
 800a3fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a400:	3301      	adds	r3, #1
 800a402:	643b      	str	r3, [r7, #64]	@ 0x40
 800a404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a406:	2b03      	cmp	r3, #3
 800a408:	d9dd      	bls.n	800a3c6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a40a:	2300      	movs	r3, #0
 800a40c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <find_volume+0x182>
 800a414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a416:	3b01      	subs	r3, #1
 800a418:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a41a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	3358      	adds	r3, #88	@ 0x58
 800a420:	443b      	add	r3, r7
 800a422:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a426:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d005      	beq.n	800a43a <find_volume+0x1a2>
 800a42e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a430:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a432:	f7ff fedb 	bl	800a1ec <check_fs>
 800a436:	4603      	mov	r3, r0
 800a438:	e000      	b.n	800a43c <find_volume+0x1a4>
 800a43a:	2303      	movs	r3, #3
 800a43c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a440:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a444:	2b01      	cmp	r3, #1
 800a446:	d905      	bls.n	800a454 <find_volume+0x1bc>
 800a448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a44a:	3301      	adds	r3, #1
 800a44c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a450:	2b03      	cmp	r3, #3
 800a452:	d9e2      	bls.n	800a41a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a454:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a458:	2b04      	cmp	r3, #4
 800a45a:	d101      	bne.n	800a460 <find_volume+0x1c8>
 800a45c:	2301      	movs	r3, #1
 800a45e:	e191      	b.n	800a784 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a460:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a464:	2b01      	cmp	r3, #1
 800a466:	d901      	bls.n	800a46c <find_volume+0x1d4>
 800a468:	230d      	movs	r3, #13
 800a46a:	e18b      	b.n	800a784 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46e:	3334      	adds	r3, #52	@ 0x34
 800a470:	330b      	adds	r3, #11
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fc6e 	bl	8008d54 <ld_word>
 800a478:	4603      	mov	r3, r0
 800a47a:	461a      	mov	r2, r3
 800a47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47e:	899b      	ldrh	r3, [r3, #12]
 800a480:	429a      	cmp	r2, r3
 800a482:	d001      	beq.n	800a488 <find_volume+0x1f0>
 800a484:	230d      	movs	r3, #13
 800a486:	e17d      	b.n	800a784 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48a:	3334      	adds	r3, #52	@ 0x34
 800a48c:	3316      	adds	r3, #22
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fc60 	bl	8008d54 <ld_word>
 800a494:	4603      	mov	r3, r0
 800a496:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <find_volume+0x214>
 800a49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a0:	3334      	adds	r3, #52	@ 0x34
 800a4a2:	3324      	adds	r3, #36	@ 0x24
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fc6e 	bl	8008d86 <ld_dword>
 800a4aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4b0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4be:	789b      	ldrb	r3, [r3, #2]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d005      	beq.n	800a4d0 <find_volume+0x238>
 800a4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c6:	789b      	ldrb	r3, [r3, #2]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d001      	beq.n	800a4d0 <find_volume+0x238>
 800a4cc:	230d      	movs	r3, #13
 800a4ce:	e159      	b.n	800a784 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d2:	789b      	ldrb	r3, [r3, #2]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4d8:	fb02 f303 	mul.w	r3, r2, r3
 800a4dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ec:	895b      	ldrh	r3, [r3, #10]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d008      	beq.n	800a504 <find_volume+0x26c>
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f4:	895b      	ldrh	r3, [r3, #10]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fa:	895b      	ldrh	r3, [r3, #10]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	4013      	ands	r3, r2
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <find_volume+0x270>
 800a504:	230d      	movs	r3, #13
 800a506:	e13d      	b.n	800a784 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	3334      	adds	r3, #52	@ 0x34
 800a50c:	3311      	adds	r3, #17
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe fc20 	bl	8008d54 <ld_word>
 800a514:	4603      	mov	r3, r0
 800a516:	461a      	mov	r2, r3
 800a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51e:	891b      	ldrh	r3, [r3, #8]
 800a520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a522:	8992      	ldrh	r2, [r2, #12]
 800a524:	0952      	lsrs	r2, r2, #5
 800a526:	b292      	uxth	r2, r2
 800a528:	fbb3 f1f2 	udiv	r1, r3, r2
 800a52c:	fb01 f202 	mul.w	r2, r1, r2
 800a530:	1a9b      	subs	r3, r3, r2
 800a532:	b29b      	uxth	r3, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <find_volume+0x2a8>
 800a538:	230d      	movs	r3, #13
 800a53a:	e123      	b.n	800a784 <find_volume+0x4ec>
 800a53c:	2400144c 	.word	0x2400144c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a542:	3334      	adds	r3, #52	@ 0x34
 800a544:	3313      	adds	r3, #19
 800a546:	4618      	mov	r0, r3
 800a548:	f7fe fc04 	bl	8008d54 <ld_word>
 800a54c:	4603      	mov	r3, r0
 800a54e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a552:	2b00      	cmp	r3, #0
 800a554:	d106      	bne.n	800a564 <find_volume+0x2cc>
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	3334      	adds	r3, #52	@ 0x34
 800a55a:	3320      	adds	r3, #32
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fe fc12 	bl	8008d86 <ld_dword>
 800a562:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a566:	3334      	adds	r3, #52	@ 0x34
 800a568:	330e      	adds	r3, #14
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fbf2 	bl	8008d54 <ld_word>
 800a570:	4603      	mov	r3, r0
 800a572:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a574:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <find_volume+0x2e6>
 800a57a:	230d      	movs	r3, #13
 800a57c:	e102      	b.n	800a784 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a57e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a582:	4413      	add	r3, r2
 800a584:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a586:	8911      	ldrh	r1, [r2, #8]
 800a588:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a58a:	8992      	ldrh	r2, [r2, #12]
 800a58c:	0952      	lsrs	r2, r2, #5
 800a58e:	b292      	uxth	r2, r2
 800a590:	fbb1 f2f2 	udiv	r2, r1, r2
 800a594:	b292      	uxth	r2, r2
 800a596:	4413      	add	r3, r2
 800a598:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a59a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d201      	bcs.n	800a5a6 <find_volume+0x30e>
 800a5a2:	230d      	movs	r3, #13
 800a5a4:	e0ee      	b.n	800a784 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a5a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5ae:	8952      	ldrh	r2, [r2, #10]
 800a5b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5b4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <find_volume+0x328>
 800a5bc:	230d      	movs	r3, #13
 800a5be:	e0e1      	b.n	800a784 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d802      	bhi.n	800a5d6 <find_volume+0x33e>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d802      	bhi.n	800a5e6 <find_volume+0x34e>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e8:	1c9a      	adds	r2, r3, #2
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5f2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a5f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a5f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5f8:	441a      	add	r2, r3
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fc:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a5fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a602:	441a      	add	r2, r3
 800a604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a606:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800a608:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	d11e      	bne.n	800a64e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a612:	3334      	adds	r3, #52	@ 0x34
 800a614:	332a      	adds	r3, #42	@ 0x2a
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe fb9c 	bl	8008d54 <ld_word>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <find_volume+0x38e>
 800a622:	230d      	movs	r3, #13
 800a624:	e0ae      	b.n	800a784 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a628:	891b      	ldrh	r3, [r3, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <find_volume+0x39a>
 800a62e:	230d      	movs	r3, #13
 800a630:	e0a8      	b.n	800a784 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a634:	3334      	adds	r3, #52	@ 0x34
 800a636:	332c      	adds	r3, #44	@ 0x2c
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe fba4 	bl	8008d86 <ld_dword>
 800a63e:	4602      	mov	r2, r0
 800a640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a642:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a64c:	e01f      	b.n	800a68e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a650:	891b      	ldrh	r3, [r3, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <find_volume+0x3c2>
 800a656:	230d      	movs	r3, #13
 800a658:	e094      	b.n	800a784 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a65e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a660:	441a      	add	r2, r3
 800a662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a664:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a666:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d103      	bne.n	800a676 <find_volume+0x3de>
 800a66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	e00a      	b.n	800a68c <find_volume+0x3f4>
 800a676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a678:	699a      	ldr	r2, [r3, #24]
 800a67a:	4613      	mov	r3, r2
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	4413      	add	r3, r2
 800a680:	085a      	lsrs	r2, r3, #1
 800a682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a68c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a690:	69da      	ldr	r2, [r3, #28]
 800a692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a694:	899b      	ldrh	r3, [r3, #12]
 800a696:	4619      	mov	r1, r3
 800a698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a69a:	440b      	add	r3, r1
 800a69c:	3b01      	subs	r3, #1
 800a69e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6a0:	8989      	ldrh	r1, [r1, #12]
 800a6a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d201      	bcs.n	800a6ae <find_volume+0x416>
 800a6aa:	230d      	movs	r3, #13
 800a6ac:	e06a      	b.n	800a784 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b4:	615a      	str	r2, [r3, #20]
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b8:	695a      	ldr	r2, [r3, #20]
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6bc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c0:	2280      	movs	r2, #128	@ 0x80
 800a6c2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a6c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a6c8:	2b03      	cmp	r3, #3
 800a6ca:	d149      	bne.n	800a760 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ce:	3334      	adds	r3, #52	@ 0x34
 800a6d0:	3330      	adds	r3, #48	@ 0x30
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe fb3e 	bl	8008d54 <ld_word>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d140      	bne.n	800a760 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a6de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a6e6:	f7fe fde7 	bl	80092b8 <move_window>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d137      	bne.n	800a760 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f8:	3334      	adds	r3, #52	@ 0x34
 800a6fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fb28 	bl	8008d54 <ld_word>
 800a704:	4603      	mov	r3, r0
 800a706:	461a      	mov	r2, r3
 800a708:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d127      	bne.n	800a760 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a712:	3334      	adds	r3, #52	@ 0x34
 800a714:	4618      	mov	r0, r3
 800a716:	f7fe fb36 	bl	8008d86 <ld_dword>
 800a71a:	4603      	mov	r3, r0
 800a71c:	4a1b      	ldr	r2, [pc, #108]	@ (800a78c <find_volume+0x4f4>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d11e      	bne.n	800a760 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a724:	3334      	adds	r3, #52	@ 0x34
 800a726:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe fb2b 	bl	8008d86 <ld_dword>
 800a730:	4603      	mov	r3, r0
 800a732:	4a17      	ldr	r2, [pc, #92]	@ (800a790 <find_volume+0x4f8>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d113      	bne.n	800a760 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73a:	3334      	adds	r3, #52	@ 0x34
 800a73c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a740:	4618      	mov	r0, r3
 800a742:	f7fe fb20 	bl	8008d86 <ld_dword>
 800a746:	4602      	mov	r2, r0
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74e:	3334      	adds	r3, #52	@ 0x34
 800a750:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a754:	4618      	mov	r0, r3
 800a756:	f7fe fb16 	bl	8008d86 <ld_dword>
 800a75a:	4602      	mov	r2, r0
 800a75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a762:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a766:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a768:	4b0a      	ldr	r3, [pc, #40]	@ (800a794 <find_volume+0x4fc>)
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	3301      	adds	r3, #1
 800a76e:	b29a      	uxth	r2, r3
 800a770:	4b08      	ldr	r3, [pc, #32]	@ (800a794 <find_volume+0x4fc>)
 800a772:	801a      	strh	r2, [r3, #0]
 800a774:	4b07      	ldr	r3, [pc, #28]	@ (800a794 <find_volume+0x4fc>)
 800a776:	881a      	ldrh	r2, [r3, #0]
 800a778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a77c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a77e:	f7fe fd33 	bl	80091e8 <clear_lock>
#endif
	return FR_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3758      	adds	r7, #88	@ 0x58
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	41615252 	.word	0x41615252
 800a790:	61417272 	.word	0x61417272
 800a794:	24001450 	.word	0x24001450

0800a798 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a7a2:	2309      	movs	r3, #9
 800a7a4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01c      	beq.n	800a7e6 <validate+0x4e>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d018      	beq.n	800a7e6 <validate+0x4e>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d013      	beq.n	800a7e6 <validate+0x4e>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	889a      	ldrh	r2, [r3, #4]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	88db      	ldrh	r3, [r3, #6]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d10c      	bne.n	800a7e6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	785b      	ldrb	r3, [r3, #1]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fe fa1e 	bl	8008c14 <disk_status>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <validate+0x4e>
			res = FR_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <validate+0x5a>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	e000      	b.n	800a7f4 <validate+0x5c>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	6013      	str	r3, [r2, #0]
	return res;
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
	...

0800a804 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	4613      	mov	r3, r2
 800a810:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a816:	f107 0310 	add.w	r3, r7, #16
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff fca2 	bl	800a164 <get_ldnumber>
 800a820:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	2b00      	cmp	r3, #0
 800a826:	da01      	bge.n	800a82c <f_mount+0x28>
 800a828:	230b      	movs	r3, #11
 800a82a:	e02b      	b.n	800a884 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a82c:	4a17      	ldr	r2, [pc, #92]	@ (800a88c <f_mount+0x88>)
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a834:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a83c:	69b8      	ldr	r0, [r7, #24]
 800a83e:	f7fe fcd3 	bl	80091e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	2200      	movs	r2, #0
 800a846:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	490d      	ldr	r1, [pc, #52]	@ (800a88c <f_mount+0x88>)
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d002      	beq.n	800a86a <f_mount+0x66>
 800a864:	79fb      	ldrb	r3, [r7, #7]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d001      	beq.n	800a86e <f_mount+0x6a>
 800a86a:	2300      	movs	r3, #0
 800a86c:	e00a      	b.n	800a884 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a86e:	f107 010c 	add.w	r1, r7, #12
 800a872:	f107 0308 	add.w	r3, r7, #8
 800a876:	2200      	movs	r2, #0
 800a878:	4618      	mov	r0, r3
 800a87a:	f7ff fd0d 	bl	800a298 <find_volume>
 800a87e:	4603      	mov	r3, r0
 800a880:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a882:	7dfb      	ldrb	r3, [r7, #23]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3720      	adds	r7, #32
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	2400144c 	.word	0x2400144c

0800a890 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b098      	sub	sp, #96	@ 0x60
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	4613      	mov	r3, r2
 800a89c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <f_open+0x18>
 800a8a4:	2309      	movs	r3, #9
 800a8a6:	e1b7      	b.n	800ac18 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a8b0:	79fa      	ldrb	r2, [r7, #7]
 800a8b2:	f107 0110 	add.w	r1, r7, #16
 800a8b6:	f107 0308 	add.w	r3, r7, #8
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff fcec 	bl	800a298 <find_volume>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a8c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f040 819b 	bne.w	800ac06 <f_open+0x376>
		dj.obj.fs = fs;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	f107 0314 	add.w	r3, r7, #20
 800a8da:	4611      	mov	r1, r2
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fbcb 	bl	800a078 <follow_path>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a8e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d118      	bne.n	800a922 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a8f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a8f4:	b25b      	sxtb	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	da03      	bge.n	800a902 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a8fa:	2306      	movs	r3, #6
 800a8fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a900:	e00f      	b.n	800a922 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a902:	79fb      	ldrb	r3, [r7, #7]
 800a904:	2b01      	cmp	r3, #1
 800a906:	bf8c      	ite	hi
 800a908:	2301      	movhi	r3, #1
 800a90a:	2300      	movls	r3, #0
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	461a      	mov	r2, r3
 800a910:	f107 0314 	add.w	r3, r7, #20
 800a914:	4611      	mov	r1, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f7fe fb1e 	bl	8008f58 <chk_lock>
 800a91c:	4603      	mov	r3, r0
 800a91e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a922:	79fb      	ldrb	r3, [r7, #7]
 800a924:	f003 031c 	and.w	r3, r3, #28
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d07f      	beq.n	800aa2c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a92c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a930:	2b00      	cmp	r3, #0
 800a932:	d017      	beq.n	800a964 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a934:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d10e      	bne.n	800a95a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a93c:	f7fe fb68 	bl	8009010 <enq_lock>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d006      	beq.n	800a954 <f_open+0xc4>
 800a946:	f107 0314 	add.w	r3, r7, #20
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7ff facd 	bl	8009eea <dir_register>
 800a950:	4603      	mov	r3, r0
 800a952:	e000      	b.n	800a956 <f_open+0xc6>
 800a954:	2312      	movs	r3, #18
 800a956:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a95a:	79fb      	ldrb	r3, [r7, #7]
 800a95c:	f043 0308 	orr.w	r3, r3, #8
 800a960:	71fb      	strb	r3, [r7, #7]
 800a962:	e010      	b.n	800a986 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a964:	7ebb      	ldrb	r3, [r7, #26]
 800a966:	f003 0311 	and.w	r3, r3, #17
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <f_open+0xe6>
					res = FR_DENIED;
 800a96e:	2307      	movs	r3, #7
 800a970:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a974:	e007      	b.n	800a986 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <f_open+0xf6>
 800a980:	2308      	movs	r3, #8
 800a982:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a986:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d168      	bne.n	800aa60 <f_open+0x1d0>
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	f003 0308 	and.w	r3, r3, #8
 800a994:	2b00      	cmp	r3, #0
 800a996:	d063      	beq.n	800aa60 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a998:	f7fe f933 	bl	8008c02 <get_fattime>
 800a99c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a0:	330e      	adds	r3, #14
 800a9a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fe fa2c 	bl	8008e02 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ac:	3316      	adds	r3, #22
 800a9ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe fa26 	bl	8008e02 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b8:	330b      	adds	r3, #11
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff f9fc 	bl	8009dc2 <ld_clust>
 800a9ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff fa14 	bl	8009e00 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9da:	331c      	adds	r3, #28
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe fa0f 	bl	8008e02 <st_dword>
					fs->wflag = 1;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a9ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d037      	beq.n	800aa60 <f_open+0x1d0>
						dw = fs->winsect;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a9f6:	f107 0314 	add.w	r3, r7, #20
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe ff04 	bl	800980c <remove_chain>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800aa0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d126      	bne.n	800aa60 <f_open+0x1d0>
							res = move_window(fs, dw);
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe fc4e 	bl	80092b8 <move_window>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa26:	3a01      	subs	r2, #1
 800aa28:	611a      	str	r2, [r3, #16]
 800aa2a:	e019      	b.n	800aa60 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aa2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d115      	bne.n	800aa60 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aa34:	7ebb      	ldrb	r3, [r7, #26]
 800aa36:	f003 0310 	and.w	r3, r3, #16
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <f_open+0x1b6>
					res = FR_NO_FILE;
 800aa3e:	2304      	movs	r3, #4
 800aa40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800aa44:	e00c      	b.n	800aa60 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d007      	beq.n	800aa60 <f_open+0x1d0>
 800aa50:	7ebb      	ldrb	r3, [r7, #26]
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <f_open+0x1d0>
						res = FR_DENIED;
 800aa5a:	2307      	movs	r3, #7
 800aa5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aa60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d126      	bne.n	800aab6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aa68:	79fb      	ldrb	r3, [r7, #7]
 800aa6a:	f003 0308 	and.w	r3, r3, #8
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800aa72:	79fb      	ldrb	r3, [r7, #7]
 800aa74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800aa82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa88:	79fb      	ldrb	r3, [r7, #7]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	bf8c      	ite	hi
 800aa8e:	2301      	movhi	r3, #1
 800aa90:	2300      	movls	r3, #0
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	461a      	mov	r2, r3
 800aa96:	f107 0314 	add.w	r3, r7, #20
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe fad9 	bl	8009054 <inc_lock>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d102      	bne.n	800aab6 <f_open+0x226>
 800aab0:	2302      	movs	r3, #2
 800aab2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aab6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f040 80a3 	bne.w	800ac06 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7ff f97b 	bl	8009dc2 <ld_clust>
 800aacc:	4602      	mov	r2, r0
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad4:	331c      	adds	r3, #28
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe f955 	bl	8008d86 <ld_dword>
 800aadc:	4602      	mov	r2, r0
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	88da      	ldrh	r2, [r3, #6]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	79fa      	ldrb	r2, [r7, #7]
 800aafa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3330      	adds	r3, #48	@ 0x30
 800ab12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ab16:	2100      	movs	r1, #0
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe f9bf 	bl	8008e9c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	f003 0320 	and.w	r3, r3, #32
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d06e      	beq.n	800ac06 <f_open+0x376>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d06a      	beq.n	800ac06 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	68da      	ldr	r2, [r3, #12]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	895b      	ldrh	r3, [r3, #10]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	899b      	ldrh	r3, [r3, #12]
 800ab42:	fb02 f303 	mul.w	r3, r2, r3
 800ab46:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab54:	e016      	b.n	800ab84 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe fc69 	bl	8009432 <get_fat>
 800ab60:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ab62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d802      	bhi.n	800ab6e <f_open+0x2de>
 800ab68:	2302      	movs	r3, #2
 800ab6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab74:	d102      	bne.n	800ab7c <f_open+0x2ec>
 800ab76:	2301      	movs	r3, #1
 800ab78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d103      	bne.n	800ab94 <f_open+0x304>
 800ab8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d8e0      	bhi.n	800ab56 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab98:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d131      	bne.n	800ac06 <f_open+0x376>
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	899b      	ldrh	r3, [r3, #12]
 800aba6:	461a      	mov	r2, r3
 800aba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800abae:	fb01 f202 	mul.w	r2, r1, r2
 800abb2:	1a9b      	subs	r3, r3, r2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d026      	beq.n	800ac06 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fe fc19 	bl	80093f4 <clust2sect>
 800abc2:	6478      	str	r0, [r7, #68]	@ 0x44
 800abc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <f_open+0x342>
						res = FR_INT_ERR;
 800abca:	2302      	movs	r3, #2
 800abcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800abd0:	e019      	b.n	800ac06 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	899b      	ldrh	r3, [r3, #12]
 800abd6:	461a      	mov	r2, r3
 800abd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abda:	fbb3 f2f2 	udiv	r2, r3, r2
 800abde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abe0:	441a      	add	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	7858      	ldrb	r0, [r3, #1]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6a1a      	ldr	r2, [r3, #32]
 800abf4:	2301      	movs	r3, #1
 800abf6:	f7fe f84f 	bl	8008c98 <disk_read>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <f_open+0x376>
 800ac00:	2301      	movs	r3, #1
 800ac02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ac06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <f_open+0x384>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ac14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3760      	adds	r7, #96	@ 0x60
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b08e      	sub	sp, #56	@ 0x38
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
 800ac2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f107 0214 	add.w	r2, r7, #20
 800ac3e:	4611      	mov	r1, r2
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff fda9 	bl	800a798 <validate>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d107      	bne.n	800ac64 <f_read+0x44>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	7d5b      	ldrb	r3, [r3, #21]
 800ac58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ac5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <f_read+0x4a>
 800ac64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac68:	e135      	b.n	800aed6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	7d1b      	ldrb	r3, [r3, #20]
 800ac6e:	f003 0301 	and.w	r3, r3, #1
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <f_read+0x5a>
 800ac76:	2307      	movs	r3, #7
 800ac78:	e12d      	b.n	800aed6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	68da      	ldr	r2, [r3, #12]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	f240 811e 	bls.w	800aecc <f_read+0x2ac>
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ac94:	e11a      	b.n	800aecc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	8992      	ldrh	r2, [r2, #12]
 800ac9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800aca2:	fb01 f202 	mul.w	r2, r1, r2
 800aca6:	1a9b      	subs	r3, r3, r2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f040 80d5 	bne.w	800ae58 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	8992      	ldrh	r2, [r2, #12]
 800acb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	8952      	ldrh	r2, [r2, #10]
 800acbe:	3a01      	subs	r2, #1
 800acc0:	4013      	ands	r3, r2
 800acc2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d12f      	bne.n	800ad2a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d103      	bne.n	800acda <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800acd8:	e013      	b.n	800ad02 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d007      	beq.n	800acf2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	4619      	mov	r1, r3
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f7fe fe8c 	bl	8009a06 <clmt_clust>
 800acee:	6338      	str	r0, [r7, #48]	@ 0x30
 800acf0:	e007      	b.n	800ad02 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	4619      	mov	r1, r3
 800acfa:	4610      	mov	r0, r2
 800acfc:	f7fe fb99 	bl	8009432 <get_fat>
 800ad00:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ad02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d804      	bhi.n	800ad12 <f_read+0xf2>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	755a      	strb	r2, [r3, #21]
 800ad0e:	2302      	movs	r3, #2
 800ad10:	e0e1      	b.n	800aed6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad18:	d104      	bne.n	800ad24 <f_read+0x104>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	755a      	strb	r2, [r3, #21]
 800ad20:	2301      	movs	r3, #1
 800ad22:	e0d8      	b.n	800aed6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad28:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	4619      	mov	r1, r3
 800ad32:	4610      	mov	r0, r2
 800ad34:	f7fe fb5e 	bl	80093f4 <clust2sect>
 800ad38:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d104      	bne.n	800ad4a <f_read+0x12a>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2202      	movs	r2, #2
 800ad44:	755a      	strb	r2, [r3, #21]
 800ad46:	2302      	movs	r3, #2
 800ad48:	e0c5      	b.n	800aed6 <f_read+0x2b6>
			sect += csect;
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	4413      	add	r3, r2
 800ad50:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	899b      	ldrh	r3, [r3, #12]
 800ad56:	461a      	mov	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad5e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ad60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d041      	beq.n	800adea <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad66:	69fa      	ldr	r2, [r7, #28]
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	4413      	add	r3, r2
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	8952      	ldrh	r2, [r2, #10]
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d905      	bls.n	800ad80 <f_read+0x160>
					cc = fs->csize - csect;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	895b      	ldrh	r3, [r3, #10]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	7858      	ldrb	r0, [r3, #1]
 800ad84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad8a:	f7fd ff85 	bl	8008c98 <disk_read>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d004      	beq.n	800ad9e <f_read+0x17e>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2201      	movs	r2, #1
 800ad98:	755a      	strb	r2, [r3, #21]
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e09b      	b.n	800aed6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	7d1b      	ldrb	r3, [r3, #20]
 800ada2:	b25b      	sxtb	r3, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	da18      	bge.n	800adda <f_read+0x1ba>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6a1a      	ldr	r2, [r3, #32]
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	1ad3      	subs	r3, r2, r3
 800adb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d911      	bls.n	800adda <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6a1a      	ldr	r2, [r3, #32]
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	8992      	ldrh	r2, [r2, #12]
 800adc2:	fb02 f303 	mul.w	r3, r2, r3
 800adc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adc8:	18d0      	adds	r0, r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	899b      	ldrh	r3, [r3, #12]
 800add4:	461a      	mov	r2, r3
 800add6:	f7fe f840 	bl	8008e5a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	899b      	ldrh	r3, [r3, #12]
 800adde:	461a      	mov	r2, r3
 800ade0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade2:	fb02 f303 	mul.w	r3, r2, r3
 800ade6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ade8:	e05c      	b.n	800aea4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	69ba      	ldr	r2, [r7, #24]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d02e      	beq.n	800ae52 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	7d1b      	ldrb	r3, [r3, #20]
 800adf8:	b25b      	sxtb	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	da18      	bge.n	800ae30 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	7858      	ldrb	r0, [r3, #1]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6a1a      	ldr	r2, [r3, #32]
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	f7fd ff63 	bl	8008cd8 <disk_write>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <f_read+0x202>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	755a      	strb	r2, [r3, #21]
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e059      	b.n	800aed6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	7d1b      	ldrb	r3, [r3, #20]
 800ae26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	7858      	ldrb	r0, [r3, #1]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	f7fd ff2b 	bl	8008c98 <disk_read>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d004      	beq.n	800ae52 <f_read+0x232>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	755a      	strb	r2, [r3, #21]
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e041      	b.n	800aed6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	899b      	ldrh	r3, [r3, #12]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	8992      	ldrh	r2, [r2, #12]
 800ae66:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae6a:	fb01 f202 	mul.w	r2, r1, r2
 800ae6e:	1a9b      	subs	r3, r3, r2
 800ae70:	1ac3      	subs	r3, r0, r3
 800ae72:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ae74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d901      	bls.n	800ae80 <f_read+0x260>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	8992      	ldrh	r2, [r2, #12]
 800ae8e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae92:	fb00 f202 	mul.w	r2, r0, r2
 800ae96:	1a9b      	subs	r3, r3, r2
 800ae98:	440b      	add	r3, r1
 800ae9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aea0:	f7fd ffdb 	bl	8008e5a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800aea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea8:	4413      	add	r3, r2
 800aeaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	699a      	ldr	r2, [r3, #24]
 800aeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb2:	441a      	add	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	619a      	str	r2, [r3, #24]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aebe:	441a      	add	r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f47f aee1 	bne.w	800ac96 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3738      	adds	r7, #56	@ 0x38
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b086      	sub	sp, #24
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f107 0208 	add.w	r2, r7, #8
 800aeec:	4611      	mov	r1, r2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7ff fc52 	bl	800a798 <validate>
 800aef4:	4603      	mov	r3, r0
 800aef6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d168      	bne.n	800afd0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	7d1b      	ldrb	r3, [r3, #20]
 800af02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af06:	2b00      	cmp	r3, #0
 800af08:	d062      	beq.n	800afd0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	7d1b      	ldrb	r3, [r3, #20]
 800af0e:	b25b      	sxtb	r3, r3
 800af10:	2b00      	cmp	r3, #0
 800af12:	da15      	bge.n	800af40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	7858      	ldrb	r0, [r3, #1]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1a      	ldr	r2, [r3, #32]
 800af22:	2301      	movs	r3, #1
 800af24:	f7fd fed8 	bl	8008cd8 <disk_write>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <f_sync+0x54>
 800af2e:	2301      	movs	r3, #1
 800af30:	e04f      	b.n	800afd2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	7d1b      	ldrb	r3, [r3, #20]
 800af36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af40:	f7fd fe5f 	bl	8008c02 <get_fattime>
 800af44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4c:	4619      	mov	r1, r3
 800af4e:	4610      	mov	r0, r2
 800af50:	f7fe f9b2 	bl	80092b8 <move_window>
 800af54:	4603      	mov	r3, r0
 800af56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af58:	7dfb      	ldrb	r3, [r7, #23]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d138      	bne.n	800afd0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	330b      	adds	r3, #11
 800af68:	781a      	ldrb	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	330b      	adds	r3, #11
 800af6e:	f042 0220 	orr.w	r2, r2, #32
 800af72:	b2d2      	uxtb	r2, r2
 800af74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	461a      	mov	r2, r3
 800af80:	68f9      	ldr	r1, [r7, #12]
 800af82:	f7fe ff3d 	bl	8009e00 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f103 021c 	add.w	r2, r3, #28
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f7fd ff35 	bl	8008e02 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3316      	adds	r3, #22
 800af9c:	6939      	ldr	r1, [r7, #16]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fd ff2f 	bl	8008e02 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3312      	adds	r3, #18
 800afa8:	2100      	movs	r1, #0
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fd ff0e 	bl	8008dcc <st_word>
					fs->wflag = 1;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2201      	movs	r2, #1
 800afb4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fe f9ab 	bl	8009314 <sync_fs>
 800afbe:	4603      	mov	r3, r0
 800afc0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	7d1b      	ldrb	r3, [r3, #20]
 800afc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff ff7b 	bl	800aede <f_sync>
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800afec:	7bfb      	ldrb	r3, [r7, #15]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d118      	bne.n	800b024 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f107 0208 	add.w	r2, r7, #8
 800aff8:	4611      	mov	r1, r2
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fbcc 	bl	800a798 <validate>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10c      	bne.n	800b024 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fe f8ae 	bl	8009170 <dec_lock>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d102      	bne.n	800b024 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b024:	7bfb      	ldrb	r3, [r7, #15]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b090      	sub	sp, #64	@ 0x40
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f107 0208 	add.w	r2, r7, #8
 800b03e:	4611      	mov	r1, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff fba9 	bl	800a798 <validate>
 800b046:	4603      	mov	r3, r0
 800b048:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b04c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b050:	2b00      	cmp	r3, #0
 800b052:	d103      	bne.n	800b05c <f_lseek+0x2e>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	7d5b      	ldrb	r3, [r3, #21]
 800b058:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b05c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <f_lseek+0x3c>
 800b064:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b068:	e201      	b.n	800b46e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 80d9 	beq.w	800b226 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07a:	d15a      	bne.n	800b132 <f_lseek+0x104>
			tbl = fp->cltbl;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b080:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b084:	1d1a      	adds	r2, r3, #4
 800b086:	627a      	str	r2, [r7, #36]	@ 0x24
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	617b      	str	r3, [r7, #20]
 800b08c:	2302      	movs	r3, #2
 800b08e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800b096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d03a      	beq.n	800b112 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09e:	613b      	str	r3, [r7, #16]
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a6:	3302      	adds	r3, #2
 800b0a8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7fe f9ba 	bl	8009432 <get_fat>
 800b0be:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d804      	bhi.n	800b0d0 <f_lseek+0xa2>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	755a      	strb	r2, [r3, #21]
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	e1ce      	b.n	800b46e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d6:	d104      	bne.n	800b0e2 <f_lseek+0xb4>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	755a      	strb	r2, [r3, #21]
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e1c5      	b.n	800b46e <f_lseek+0x440>
					} while (cl == pcl + 1);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d0de      	beq.n	800b0aa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b0ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d809      	bhi.n	800b108 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f6:	1d1a      	adds	r2, r3, #4
 800b0f8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b0fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b100:	1d1a      	adds	r2, r3, #4
 800b102:	627a      	str	r2, [r7, #36]	@ 0x24
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b10e:	429a      	cmp	r2, r3
 800b110:	d3c4      	bcc.n	800b09c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b118:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b11a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d803      	bhi.n	800b12a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b124:	2200      	movs	r2, #0
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	e19f      	b.n	800b46a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b12a:	2311      	movs	r3, #17
 800b12c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b130:	e19b      	b.n	800b46a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d902      	bls.n	800b142 <f_lseek+0x114>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	683a      	ldr	r2, [r7, #0]
 800b146:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f000 818d 	beq.w	800b46a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	3b01      	subs	r3, #1
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7fe fc55 	bl	8009a06 <clmt_clust>
 800b15c:	4602      	mov	r2, r0
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	69db      	ldr	r3, [r3, #28]
 800b168:	4619      	mov	r1, r3
 800b16a:	4610      	mov	r0, r2
 800b16c:	f7fe f942 	bl	80093f4 <clust2sect>
 800b170:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d104      	bne.n	800b182 <f_lseek+0x154>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2202      	movs	r2, #2
 800b17c:	755a      	strb	r2, [r3, #21]
 800b17e:	2302      	movs	r3, #2
 800b180:	e175      	b.n	800b46e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	3b01      	subs	r3, #1
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	8992      	ldrh	r2, [r2, #12]
 800b18a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	8952      	ldrh	r2, [r2, #10]
 800b192:	3a01      	subs	r2, #1
 800b194:	4013      	ands	r3, r2
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	4413      	add	r3, r2
 800b19a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	8992      	ldrh	r2, [r2, #12]
 800b1a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1a8:	fb01 f202 	mul.w	r2, r1, r2
 800b1ac:	1a9b      	subs	r3, r3, r2
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 815b 	beq.w	800b46a <f_lseek+0x43c>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	f000 8155 	beq.w	800b46a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7d1b      	ldrb	r3, [r3, #20]
 800b1c4:	b25b      	sxtb	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	da18      	bge.n	800b1fc <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	7858      	ldrb	r0, [r3, #1]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1a      	ldr	r2, [r3, #32]
 800b1d8:	2301      	movs	r3, #1
 800b1da:	f7fd fd7d 	bl	8008cd8 <disk_write>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d004      	beq.n	800b1ee <f_lseek+0x1c0>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	755a      	strb	r2, [r3, #21]
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e13f      	b.n	800b46e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	7d1b      	ldrb	r3, [r3, #20]
 800b1f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	7858      	ldrb	r0, [r3, #1]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b206:	2301      	movs	r3, #1
 800b208:	69ba      	ldr	r2, [r7, #24]
 800b20a:	f7fd fd45 	bl	8008c98 <disk_read>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d004      	beq.n	800b21e <f_lseek+0x1f0>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	755a      	strb	r2, [r3, #21]
 800b21a:	2301      	movs	r3, #1
 800b21c:	e127      	b.n	800b46e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	621a      	str	r2, [r3, #32]
 800b224:	e121      	b.n	800b46a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d908      	bls.n	800b242 <f_lseek+0x214>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	7d1b      	ldrb	r3, [r3, #20]
 800b234:	f003 0302 	and.w	r3, r3, #2
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d102      	bne.n	800b242 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b250:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 80b5 	beq.w	800b3c4 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	895b      	ldrh	r3, [r3, #10]
 800b25e:	461a      	mov	r2, r3
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	899b      	ldrh	r3, [r3, #12]
 800b264:	fb02 f303 	mul.w	r3, r2, r3
 800b268:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d01b      	beq.n	800b2a8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	1e5a      	subs	r2, r3, #1
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	fbb2 f2f3 	udiv	r2, r2, r3
 800b27a:	6a3b      	ldr	r3, [r7, #32]
 800b27c:	1e59      	subs	r1, r3, #1
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b284:	429a      	cmp	r2, r3
 800b286:	d30f      	bcc.n	800b2a8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	1e5a      	subs	r2, r3, #1
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	425b      	negs	r3, r3
 800b290:	401a      	ands	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	69db      	ldr	r3, [r3, #28]
 800b2a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2a6:	e022      	b.n	800b2ee <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d119      	bne.n	800b2e8 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fe fb0c 	bl	80098d6 <create_chain>
 800b2be:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d104      	bne.n	800b2d0 <f_lseek+0x2a2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2202      	movs	r2, #2
 800b2ca:	755a      	strb	r2, [r3, #21]
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	e0ce      	b.n	800b46e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d6:	d104      	bne.n	800b2e2 <f_lseek+0x2b4>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	755a      	strb	r2, [r3, #21]
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e0c5      	b.n	800b46e <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2e6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2ec:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d067      	beq.n	800b3c4 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b2f4:	e03a      	b.n	800b36c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	603b      	str	r3, [r7, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	699a      	ldr	r2, [r3, #24]
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	441a      	add	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7d1b      	ldrb	r3, [r3, #20]
 800b30e:	f003 0302 	and.w	r3, r3, #2
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00b      	beq.n	800b32e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe fadb 	bl	80098d6 <create_chain>
 800b320:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b324:	2b00      	cmp	r3, #0
 800b326:	d108      	bne.n	800b33a <f_lseek+0x30c>
							ofs = 0; break;
 800b328:	2300      	movs	r3, #0
 800b32a:	603b      	str	r3, [r7, #0]
 800b32c:	e022      	b.n	800b374 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe f87d 	bl	8009432 <get_fat>
 800b338:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b340:	d104      	bne.n	800b34c <f_lseek+0x31e>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2201      	movs	r2, #1
 800b346:	755a      	strb	r2, [r3, #21]
 800b348:	2301      	movs	r3, #1
 800b34a:	e090      	b.n	800b46e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d904      	bls.n	800b35c <f_lseek+0x32e>
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b358:	429a      	cmp	r2, r3
 800b35a:	d304      	bcc.n	800b366 <f_lseek+0x338>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2202      	movs	r2, #2
 800b360:	755a      	strb	r2, [r3, #21]
 800b362:	2302      	movs	r3, #2
 800b364:	e083      	b.n	800b46e <f_lseek+0x440>
					fp->clust = clst;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b36a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	429a      	cmp	r2, r3
 800b372:	d8c0      	bhi.n	800b2f6 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	699a      	ldr	r2, [r3, #24]
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	441a      	add	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	899b      	ldrh	r3, [r3, #12]
 800b384:	461a      	mov	r2, r3
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	fbb3 f1f2 	udiv	r1, r3, r2
 800b38c:	fb01 f202 	mul.w	r2, r1, r2
 800b390:	1a9b      	subs	r3, r3, r2
 800b392:	2b00      	cmp	r3, #0
 800b394:	d016      	beq.n	800b3c4 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fe f82a 	bl	80093f4 <clust2sect>
 800b3a0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d104      	bne.n	800b3b2 <f_lseek+0x384>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	755a      	strb	r2, [r3, #21]
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	e05d      	b.n	800b46e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	899b      	ldrh	r3, [r3, #12]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3c0:	4413      	add	r3, r2
 800b3c2:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	699a      	ldr	r2, [r3, #24]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d90a      	bls.n	800b3e6 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	699a      	ldr	r2, [r3, #24]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	7d1b      	ldrb	r3, [r3, #20]
 800b3dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	8992      	ldrh	r2, [r2, #12]
 800b3ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3f2:	fb01 f202 	mul.w	r2, r1, r2
 800b3f6:	1a9b      	subs	r3, r3, r2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d036      	beq.n	800b46a <f_lseek+0x43c>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b402:	429a      	cmp	r2, r3
 800b404:	d031      	beq.n	800b46a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	7d1b      	ldrb	r3, [r3, #20]
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	da18      	bge.n	800b442 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	7858      	ldrb	r0, [r3, #1]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1a      	ldr	r2, [r3, #32]
 800b41e:	2301      	movs	r3, #1
 800b420:	f7fd fc5a 	bl	8008cd8 <disk_write>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d004      	beq.n	800b434 <f_lseek+0x406>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	755a      	strb	r2, [r3, #21]
 800b430:	2301      	movs	r3, #1
 800b432:	e01c      	b.n	800b46e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	7d1b      	ldrb	r3, [r3, #20]
 800b438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	7858      	ldrb	r0, [r3, #1]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b44c:	2301      	movs	r3, #1
 800b44e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b450:	f7fd fc22 	bl	8008c98 <disk_read>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d004      	beq.n	800b464 <f_lseek+0x436>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	755a      	strb	r2, [r3, #21]
 800b460:	2301      	movs	r3, #1
 800b462:	e004      	b.n	800b46e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b468:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b46a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3740      	adds	r7, #64	@ 0x40
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b092      	sub	sp, #72	@ 0x48
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	60f8      	str	r0, [r7, #12]
 800b47e:	60b9      	str	r1, [r7, #8]
 800b480:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b482:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b486:	f107 030c 	add.w	r3, r7, #12
 800b48a:	2200      	movs	r2, #0
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fe ff03 	bl	800a298 <find_volume>
 800b492:	4603      	mov	r3, r0
 800b494:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800b498:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f040 8099 	bne.w	800b5d4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b4a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	695a      	ldr	r2, [r3, #20]
 800b4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	3b02      	subs	r3, #2
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d804      	bhi.n	800b4c0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b8:	695a      	ldr	r2, [r3, #20]
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	e089      	b.n	800b5d4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d128      	bne.n	800b51e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b4d4:	f107 0314 	add.w	r3, r7, #20
 800b4d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fd ffa9 	bl	8009432 <get_fat>
 800b4e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e8:	d103      	bne.n	800b4f2 <f_getfree+0x7c>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b4f0:	e063      	b.n	800b5ba <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d103      	bne.n	800b500 <f_getfree+0x8a>
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b4fe:	e05c      	b.n	800b5ba <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b502:	2b00      	cmp	r3, #0
 800b504:	d102      	bne.n	800b50c <f_getfree+0x96>
 800b506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b508:	3301      	adds	r3, #1
 800b50a:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800b50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b50e:	3301      	adds	r3, #1
 800b510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b518:	429a      	cmp	r2, r3
 800b51a:	d3db      	bcc.n	800b4d4 <f_getfree+0x5e>
 800b51c:	e04d      	b.n	800b5ba <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b528:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b52e:	2300      	movs	r3, #0
 800b530:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800b532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b534:	2b00      	cmp	r3, #0
 800b536:	d113      	bne.n	800b560 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53c:	1c5a      	adds	r2, r3, #1
 800b53e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b540:	4619      	mov	r1, r3
 800b542:	f7fd feb9 	bl	80092b8 <move_window>
 800b546:	4603      	mov	r3, r0
 800b548:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800b54c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b550:	2b00      	cmp	r3, #0
 800b552:	d131      	bne.n	800b5b8 <f_getfree+0x142>
							p = fs->win;
 800b554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b556:	3334      	adds	r3, #52	@ 0x34
 800b558:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800b55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55c:	899b      	ldrh	r3, [r3, #12]
 800b55e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d10f      	bne.n	800b588 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b56a:	f7fd fbf3 	bl	8008d54 <ld_word>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <f_getfree+0x104>
 800b574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b576:	3301      	adds	r3, #1
 800b578:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800b57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57c:	3302      	adds	r3, #2
 800b57e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b582:	3b02      	subs	r3, #2
 800b584:	637b      	str	r3, [r7, #52]	@ 0x34
 800b586:	e010      	b.n	800b5aa <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b58a:	f7fd fbfc 	bl	8008d86 <ld_dword>
 800b58e:	4603      	mov	r3, r0
 800b590:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d102      	bne.n	800b59e <f_getfree+0x128>
 800b598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b59a:	3301      	adds	r3, #1
 800b59c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	3304      	adds	r3, #4
 800b5a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a6:	3b04      	subs	r3, #4
 800b5a8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800b5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1bd      	bne.n	800b532 <f_getfree+0xbc>
 800b5b6:	e000      	b.n	800b5ba <f_getfree+0x144>
							if (res != FR_OK) break;
 800b5b8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5be:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5c4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c8:	791a      	ldrb	r2, [r3, #4]
 800b5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5cc:	f042 0201 	orr.w	r2, r2, #1
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b5d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3748      	adds	r7, #72	@ 0x48
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b5f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b674 <FATFS_LinkDriverEx+0x94>)
 800b5f8:	7a5b      	ldrb	r3, [r3, #9]
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d131      	bne.n	800b664 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b600:	4b1c      	ldr	r3, [pc, #112]	@ (800b674 <FATFS_LinkDriverEx+0x94>)
 800b602:	7a5b      	ldrb	r3, [r3, #9]
 800b604:	b2db      	uxtb	r3, r3
 800b606:	461a      	mov	r2, r3
 800b608:	4b1a      	ldr	r3, [pc, #104]	@ (800b674 <FATFS_LinkDriverEx+0x94>)
 800b60a:	2100      	movs	r1, #0
 800b60c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b60e:	4b19      	ldr	r3, [pc, #100]	@ (800b674 <FATFS_LinkDriverEx+0x94>)
 800b610:	7a5b      	ldrb	r3, [r3, #9]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	4a17      	ldr	r2, [pc, #92]	@ (800b674 <FATFS_LinkDriverEx+0x94>)
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b61e:	4b15      	ldr	r3, [pc, #84]	@ (800b674 <FATFS_LinkDriverEx+0x94>)
 800b620:	7a5b      	ldrb	r3, [r3, #9]
 800b622:	b2db      	uxtb	r3, r3
 800b624:	461a      	mov	r2, r3
 800b626:	4b13      	ldr	r3, [pc, #76]	@ (800b674 <FATFS_LinkDriverEx+0x94>)
 800b628:	4413      	add	r3, r2
 800b62a:	79fa      	ldrb	r2, [r7, #7]
 800b62c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b62e:	4b11      	ldr	r3, [pc, #68]	@ (800b674 <FATFS_LinkDriverEx+0x94>)
 800b630:	7a5b      	ldrb	r3, [r3, #9]
 800b632:	b2db      	uxtb	r3, r3
 800b634:	1c5a      	adds	r2, r3, #1
 800b636:	b2d1      	uxtb	r1, r2
 800b638:	4a0e      	ldr	r2, [pc, #56]	@ (800b674 <FATFS_LinkDriverEx+0x94>)
 800b63a:	7251      	strb	r1, [r2, #9]
 800b63c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b63e:	7dbb      	ldrb	r3, [r7, #22]
 800b640:	3330      	adds	r3, #48	@ 0x30
 800b642:	b2da      	uxtb	r2, r3
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	3301      	adds	r3, #1
 800b64c:	223a      	movs	r2, #58	@ 0x3a
 800b64e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	3302      	adds	r3, #2
 800b654:	222f      	movs	r2, #47	@ 0x2f
 800b656:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	3303      	adds	r3, #3
 800b65c:	2200      	movs	r2, #0
 800b65e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b664:	7dfb      	ldrb	r3, [r7, #23]
}
 800b666:	4618      	mov	r0, r3
 800b668:	371c      	adds	r7, #28
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	24001474 	.word	0x24001474

0800b678 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b682:	2200      	movs	r2, #0
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff ffaa 	bl	800b5e0 <FATFS_LinkDriverEx>
 800b68c:	4603      	mov	r3, r0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <std>:
 800b698:	2300      	movs	r3, #0
 800b69a:	b510      	push	{r4, lr}
 800b69c:	4604      	mov	r4, r0
 800b69e:	e9c0 3300 	strd	r3, r3, [r0]
 800b6a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6a6:	6083      	str	r3, [r0, #8]
 800b6a8:	8181      	strh	r1, [r0, #12]
 800b6aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800b6ac:	81c2      	strh	r2, [r0, #14]
 800b6ae:	6183      	str	r3, [r0, #24]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	2208      	movs	r2, #8
 800b6b4:	305c      	adds	r0, #92	@ 0x5c
 800b6b6:	f000 f9f9 	bl	800baac <memset>
 800b6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f0 <std+0x58>)
 800b6bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b6be:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f4 <std+0x5c>)
 800b6c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f8 <std+0x60>)
 800b6c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b6fc <std+0x64>)
 800b6c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b700 <std+0x68>)
 800b6cc:	6224      	str	r4, [r4, #32]
 800b6ce:	429c      	cmp	r4, r3
 800b6d0:	d006      	beq.n	800b6e0 <std+0x48>
 800b6d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b6d6:	4294      	cmp	r4, r2
 800b6d8:	d002      	beq.n	800b6e0 <std+0x48>
 800b6da:	33d0      	adds	r3, #208	@ 0xd0
 800b6dc:	429c      	cmp	r4, r3
 800b6de:	d105      	bne.n	800b6ec <std+0x54>
 800b6e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e8:	f000 ba58 	b.w	800bb9c <__retarget_lock_init_recursive>
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	bf00      	nop
 800b6f0:	0800b8fd 	.word	0x0800b8fd
 800b6f4:	0800b91f 	.word	0x0800b91f
 800b6f8:	0800b957 	.word	0x0800b957
 800b6fc:	0800b97b 	.word	0x0800b97b
 800b700:	24001480 	.word	0x24001480

0800b704 <stdio_exit_handler>:
 800b704:	4a02      	ldr	r2, [pc, #8]	@ (800b710 <stdio_exit_handler+0xc>)
 800b706:	4903      	ldr	r1, [pc, #12]	@ (800b714 <stdio_exit_handler+0x10>)
 800b708:	4803      	ldr	r0, [pc, #12]	@ (800b718 <stdio_exit_handler+0x14>)
 800b70a:	f000 b869 	b.w	800b7e0 <_fwalk_sglue>
 800b70e:	bf00      	nop
 800b710:	24000010 	.word	0x24000010
 800b714:	0800c439 	.word	0x0800c439
 800b718:	24000020 	.word	0x24000020

0800b71c <cleanup_stdio>:
 800b71c:	6841      	ldr	r1, [r0, #4]
 800b71e:	4b0c      	ldr	r3, [pc, #48]	@ (800b750 <cleanup_stdio+0x34>)
 800b720:	4299      	cmp	r1, r3
 800b722:	b510      	push	{r4, lr}
 800b724:	4604      	mov	r4, r0
 800b726:	d001      	beq.n	800b72c <cleanup_stdio+0x10>
 800b728:	f000 fe86 	bl	800c438 <_fflush_r>
 800b72c:	68a1      	ldr	r1, [r4, #8]
 800b72e:	4b09      	ldr	r3, [pc, #36]	@ (800b754 <cleanup_stdio+0x38>)
 800b730:	4299      	cmp	r1, r3
 800b732:	d002      	beq.n	800b73a <cleanup_stdio+0x1e>
 800b734:	4620      	mov	r0, r4
 800b736:	f000 fe7f 	bl	800c438 <_fflush_r>
 800b73a:	68e1      	ldr	r1, [r4, #12]
 800b73c:	4b06      	ldr	r3, [pc, #24]	@ (800b758 <cleanup_stdio+0x3c>)
 800b73e:	4299      	cmp	r1, r3
 800b740:	d004      	beq.n	800b74c <cleanup_stdio+0x30>
 800b742:	4620      	mov	r0, r4
 800b744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b748:	f000 be76 	b.w	800c438 <_fflush_r>
 800b74c:	bd10      	pop	{r4, pc}
 800b74e:	bf00      	nop
 800b750:	24001480 	.word	0x24001480
 800b754:	240014e8 	.word	0x240014e8
 800b758:	24001550 	.word	0x24001550

0800b75c <global_stdio_init.part.0>:
 800b75c:	b510      	push	{r4, lr}
 800b75e:	4b0b      	ldr	r3, [pc, #44]	@ (800b78c <global_stdio_init.part.0+0x30>)
 800b760:	4c0b      	ldr	r4, [pc, #44]	@ (800b790 <global_stdio_init.part.0+0x34>)
 800b762:	4a0c      	ldr	r2, [pc, #48]	@ (800b794 <global_stdio_init.part.0+0x38>)
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	4620      	mov	r0, r4
 800b768:	2200      	movs	r2, #0
 800b76a:	2104      	movs	r1, #4
 800b76c:	f7ff ff94 	bl	800b698 <std>
 800b770:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b774:	2201      	movs	r2, #1
 800b776:	2109      	movs	r1, #9
 800b778:	f7ff ff8e 	bl	800b698 <std>
 800b77c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b780:	2202      	movs	r2, #2
 800b782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b786:	2112      	movs	r1, #18
 800b788:	f7ff bf86 	b.w	800b698 <std>
 800b78c:	240015b8 	.word	0x240015b8
 800b790:	24001480 	.word	0x24001480
 800b794:	0800b705 	.word	0x0800b705

0800b798 <__sfp_lock_acquire>:
 800b798:	4801      	ldr	r0, [pc, #4]	@ (800b7a0 <__sfp_lock_acquire+0x8>)
 800b79a:	f000 ba00 	b.w	800bb9e <__retarget_lock_acquire_recursive>
 800b79e:	bf00      	nop
 800b7a0:	240015c1 	.word	0x240015c1

0800b7a4 <__sfp_lock_release>:
 800b7a4:	4801      	ldr	r0, [pc, #4]	@ (800b7ac <__sfp_lock_release+0x8>)
 800b7a6:	f000 b9fb 	b.w	800bba0 <__retarget_lock_release_recursive>
 800b7aa:	bf00      	nop
 800b7ac:	240015c1 	.word	0x240015c1

0800b7b0 <__sinit>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	f7ff fff0 	bl	800b798 <__sfp_lock_acquire>
 800b7b8:	6a23      	ldr	r3, [r4, #32]
 800b7ba:	b11b      	cbz	r3, 800b7c4 <__sinit+0x14>
 800b7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7c0:	f7ff bff0 	b.w	800b7a4 <__sfp_lock_release>
 800b7c4:	4b04      	ldr	r3, [pc, #16]	@ (800b7d8 <__sinit+0x28>)
 800b7c6:	6223      	str	r3, [r4, #32]
 800b7c8:	4b04      	ldr	r3, [pc, #16]	@ (800b7dc <__sinit+0x2c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1f5      	bne.n	800b7bc <__sinit+0xc>
 800b7d0:	f7ff ffc4 	bl	800b75c <global_stdio_init.part.0>
 800b7d4:	e7f2      	b.n	800b7bc <__sinit+0xc>
 800b7d6:	bf00      	nop
 800b7d8:	0800b71d 	.word	0x0800b71d
 800b7dc:	240015b8 	.word	0x240015b8

0800b7e0 <_fwalk_sglue>:
 800b7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	4688      	mov	r8, r1
 800b7e8:	4614      	mov	r4, r2
 800b7ea:	2600      	movs	r6, #0
 800b7ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7f0:	f1b9 0901 	subs.w	r9, r9, #1
 800b7f4:	d505      	bpl.n	800b802 <_fwalk_sglue+0x22>
 800b7f6:	6824      	ldr	r4, [r4, #0]
 800b7f8:	2c00      	cmp	r4, #0
 800b7fa:	d1f7      	bne.n	800b7ec <_fwalk_sglue+0xc>
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b802:	89ab      	ldrh	r3, [r5, #12]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d907      	bls.n	800b818 <_fwalk_sglue+0x38>
 800b808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b80c:	3301      	adds	r3, #1
 800b80e:	d003      	beq.n	800b818 <_fwalk_sglue+0x38>
 800b810:	4629      	mov	r1, r5
 800b812:	4638      	mov	r0, r7
 800b814:	47c0      	blx	r8
 800b816:	4306      	orrs	r6, r0
 800b818:	3568      	adds	r5, #104	@ 0x68
 800b81a:	e7e9      	b.n	800b7f0 <_fwalk_sglue+0x10>

0800b81c <iprintf>:
 800b81c:	b40f      	push	{r0, r1, r2, r3}
 800b81e:	b507      	push	{r0, r1, r2, lr}
 800b820:	4906      	ldr	r1, [pc, #24]	@ (800b83c <iprintf+0x20>)
 800b822:	ab04      	add	r3, sp, #16
 800b824:	6808      	ldr	r0, [r1, #0]
 800b826:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82a:	6881      	ldr	r1, [r0, #8]
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	f000 fadb 	bl	800bde8 <_vfiprintf_r>
 800b832:	b003      	add	sp, #12
 800b834:	f85d eb04 	ldr.w	lr, [sp], #4
 800b838:	b004      	add	sp, #16
 800b83a:	4770      	bx	lr
 800b83c:	2400001c 	.word	0x2400001c

0800b840 <_puts_r>:
 800b840:	6a03      	ldr	r3, [r0, #32]
 800b842:	b570      	push	{r4, r5, r6, lr}
 800b844:	6884      	ldr	r4, [r0, #8]
 800b846:	4605      	mov	r5, r0
 800b848:	460e      	mov	r6, r1
 800b84a:	b90b      	cbnz	r3, 800b850 <_puts_r+0x10>
 800b84c:	f7ff ffb0 	bl	800b7b0 <__sinit>
 800b850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b852:	07db      	lsls	r3, r3, #31
 800b854:	d405      	bmi.n	800b862 <_puts_r+0x22>
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	0598      	lsls	r0, r3, #22
 800b85a:	d402      	bmi.n	800b862 <_puts_r+0x22>
 800b85c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b85e:	f000 f99e 	bl	800bb9e <__retarget_lock_acquire_recursive>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	0719      	lsls	r1, r3, #28
 800b866:	d502      	bpl.n	800b86e <_puts_r+0x2e>
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d135      	bne.n	800b8da <_puts_r+0x9a>
 800b86e:	4621      	mov	r1, r4
 800b870:	4628      	mov	r0, r5
 800b872:	f000 f8c5 	bl	800ba00 <__swsetup_r>
 800b876:	b380      	cbz	r0, 800b8da <_puts_r+0x9a>
 800b878:	f04f 35ff 	mov.w	r5, #4294967295
 800b87c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b87e:	07da      	lsls	r2, r3, #31
 800b880:	d405      	bmi.n	800b88e <_puts_r+0x4e>
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	059b      	lsls	r3, r3, #22
 800b886:	d402      	bmi.n	800b88e <_puts_r+0x4e>
 800b888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b88a:	f000 f989 	bl	800bba0 <__retarget_lock_release_recursive>
 800b88e:	4628      	mov	r0, r5
 800b890:	bd70      	pop	{r4, r5, r6, pc}
 800b892:	2b00      	cmp	r3, #0
 800b894:	da04      	bge.n	800b8a0 <_puts_r+0x60>
 800b896:	69a2      	ldr	r2, [r4, #24]
 800b898:	429a      	cmp	r2, r3
 800b89a:	dc17      	bgt.n	800b8cc <_puts_r+0x8c>
 800b89c:	290a      	cmp	r1, #10
 800b89e:	d015      	beq.n	800b8cc <_puts_r+0x8c>
 800b8a0:	6823      	ldr	r3, [r4, #0]
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	6022      	str	r2, [r4, #0]
 800b8a6:	7019      	strb	r1, [r3, #0]
 800b8a8:	68a3      	ldr	r3, [r4, #8]
 800b8aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	60a3      	str	r3, [r4, #8]
 800b8b2:	2900      	cmp	r1, #0
 800b8b4:	d1ed      	bne.n	800b892 <_puts_r+0x52>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	da11      	bge.n	800b8de <_puts_r+0x9e>
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	210a      	movs	r1, #10
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f000 f85f 	bl	800b982 <__swbuf_r>
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d0d7      	beq.n	800b878 <_puts_r+0x38>
 800b8c8:	250a      	movs	r5, #10
 800b8ca:	e7d7      	b.n	800b87c <_puts_r+0x3c>
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	f000 f857 	bl	800b982 <__swbuf_r>
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d1e7      	bne.n	800b8a8 <_puts_r+0x68>
 800b8d8:	e7ce      	b.n	800b878 <_puts_r+0x38>
 800b8da:	3e01      	subs	r6, #1
 800b8dc:	e7e4      	b.n	800b8a8 <_puts_r+0x68>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	1c5a      	adds	r2, r3, #1
 800b8e2:	6022      	str	r2, [r4, #0]
 800b8e4:	220a      	movs	r2, #10
 800b8e6:	701a      	strb	r2, [r3, #0]
 800b8e8:	e7ee      	b.n	800b8c8 <_puts_r+0x88>
	...

0800b8ec <puts>:
 800b8ec:	4b02      	ldr	r3, [pc, #8]	@ (800b8f8 <puts+0xc>)
 800b8ee:	4601      	mov	r1, r0
 800b8f0:	6818      	ldr	r0, [r3, #0]
 800b8f2:	f7ff bfa5 	b.w	800b840 <_puts_r>
 800b8f6:	bf00      	nop
 800b8f8:	2400001c 	.word	0x2400001c

0800b8fc <__sread>:
 800b8fc:	b510      	push	{r4, lr}
 800b8fe:	460c      	mov	r4, r1
 800b900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b904:	f000 f8fc 	bl	800bb00 <_read_r>
 800b908:	2800      	cmp	r0, #0
 800b90a:	bfab      	itete	ge
 800b90c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b90e:	89a3      	ldrhlt	r3, [r4, #12]
 800b910:	181b      	addge	r3, r3, r0
 800b912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b916:	bfac      	ite	ge
 800b918:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b91a:	81a3      	strhlt	r3, [r4, #12]
 800b91c:	bd10      	pop	{r4, pc}

0800b91e <__swrite>:
 800b91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b922:	461f      	mov	r7, r3
 800b924:	898b      	ldrh	r3, [r1, #12]
 800b926:	05db      	lsls	r3, r3, #23
 800b928:	4605      	mov	r5, r0
 800b92a:	460c      	mov	r4, r1
 800b92c:	4616      	mov	r6, r2
 800b92e:	d505      	bpl.n	800b93c <__swrite+0x1e>
 800b930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b934:	2302      	movs	r3, #2
 800b936:	2200      	movs	r2, #0
 800b938:	f000 f8d0 	bl	800badc <_lseek_r>
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b946:	81a3      	strh	r3, [r4, #12]
 800b948:	4632      	mov	r2, r6
 800b94a:	463b      	mov	r3, r7
 800b94c:	4628      	mov	r0, r5
 800b94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b952:	f000 b8e7 	b.w	800bb24 <_write_r>

0800b956 <__sseek>:
 800b956:	b510      	push	{r4, lr}
 800b958:	460c      	mov	r4, r1
 800b95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b95e:	f000 f8bd 	bl	800badc <_lseek_r>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	bf15      	itete	ne
 800b968:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b96a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b96e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b972:	81a3      	strheq	r3, [r4, #12]
 800b974:	bf18      	it	ne
 800b976:	81a3      	strhne	r3, [r4, #12]
 800b978:	bd10      	pop	{r4, pc}

0800b97a <__sclose>:
 800b97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b97e:	f000 b89d 	b.w	800babc <_close_r>

0800b982 <__swbuf_r>:
 800b982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b984:	460e      	mov	r6, r1
 800b986:	4614      	mov	r4, r2
 800b988:	4605      	mov	r5, r0
 800b98a:	b118      	cbz	r0, 800b994 <__swbuf_r+0x12>
 800b98c:	6a03      	ldr	r3, [r0, #32]
 800b98e:	b90b      	cbnz	r3, 800b994 <__swbuf_r+0x12>
 800b990:	f7ff ff0e 	bl	800b7b0 <__sinit>
 800b994:	69a3      	ldr	r3, [r4, #24]
 800b996:	60a3      	str	r3, [r4, #8]
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	071a      	lsls	r2, r3, #28
 800b99c:	d501      	bpl.n	800b9a2 <__swbuf_r+0x20>
 800b99e:	6923      	ldr	r3, [r4, #16]
 800b9a0:	b943      	cbnz	r3, 800b9b4 <__swbuf_r+0x32>
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	f000 f82b 	bl	800ba00 <__swsetup_r>
 800b9aa:	b118      	cbz	r0, 800b9b4 <__swbuf_r+0x32>
 800b9ac:	f04f 37ff 	mov.w	r7, #4294967295
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	6922      	ldr	r2, [r4, #16]
 800b9b8:	1a98      	subs	r0, r3, r2
 800b9ba:	6963      	ldr	r3, [r4, #20]
 800b9bc:	b2f6      	uxtb	r6, r6
 800b9be:	4283      	cmp	r3, r0
 800b9c0:	4637      	mov	r7, r6
 800b9c2:	dc05      	bgt.n	800b9d0 <__swbuf_r+0x4e>
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	f000 fd36 	bl	800c438 <_fflush_r>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d1ed      	bne.n	800b9ac <__swbuf_r+0x2a>
 800b9d0:	68a3      	ldr	r3, [r4, #8]
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	60a3      	str	r3, [r4, #8]
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	6022      	str	r2, [r4, #0]
 800b9dc:	701e      	strb	r6, [r3, #0]
 800b9de:	6962      	ldr	r2, [r4, #20]
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d004      	beq.n	800b9f0 <__swbuf_r+0x6e>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	07db      	lsls	r3, r3, #31
 800b9ea:	d5e1      	bpl.n	800b9b0 <__swbuf_r+0x2e>
 800b9ec:	2e0a      	cmp	r6, #10
 800b9ee:	d1df      	bne.n	800b9b0 <__swbuf_r+0x2e>
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f000 fd20 	bl	800c438 <_fflush_r>
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d0d9      	beq.n	800b9b0 <__swbuf_r+0x2e>
 800b9fc:	e7d6      	b.n	800b9ac <__swbuf_r+0x2a>
	...

0800ba00 <__swsetup_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4b29      	ldr	r3, [pc, #164]	@ (800baa8 <__swsetup_r+0xa8>)
 800ba04:	4605      	mov	r5, r0
 800ba06:	6818      	ldr	r0, [r3, #0]
 800ba08:	460c      	mov	r4, r1
 800ba0a:	b118      	cbz	r0, 800ba14 <__swsetup_r+0x14>
 800ba0c:	6a03      	ldr	r3, [r0, #32]
 800ba0e:	b90b      	cbnz	r3, 800ba14 <__swsetup_r+0x14>
 800ba10:	f7ff fece 	bl	800b7b0 <__sinit>
 800ba14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba18:	0719      	lsls	r1, r3, #28
 800ba1a:	d422      	bmi.n	800ba62 <__swsetup_r+0x62>
 800ba1c:	06da      	lsls	r2, r3, #27
 800ba1e:	d407      	bmi.n	800ba30 <__swsetup_r+0x30>
 800ba20:	2209      	movs	r2, #9
 800ba22:	602a      	str	r2, [r5, #0]
 800ba24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba28:	81a3      	strh	r3, [r4, #12]
 800ba2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2e:	e033      	b.n	800ba98 <__swsetup_r+0x98>
 800ba30:	0758      	lsls	r0, r3, #29
 800ba32:	d512      	bpl.n	800ba5a <__swsetup_r+0x5a>
 800ba34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba36:	b141      	cbz	r1, 800ba4a <__swsetup_r+0x4a>
 800ba38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba3c:	4299      	cmp	r1, r3
 800ba3e:	d002      	beq.n	800ba46 <__swsetup_r+0x46>
 800ba40:	4628      	mov	r0, r5
 800ba42:	f000 f8af 	bl	800bba4 <_free_r>
 800ba46:	2300      	movs	r3, #0
 800ba48:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba4a:	89a3      	ldrh	r3, [r4, #12]
 800ba4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba50:	81a3      	strh	r3, [r4, #12]
 800ba52:	2300      	movs	r3, #0
 800ba54:	6063      	str	r3, [r4, #4]
 800ba56:	6923      	ldr	r3, [r4, #16]
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	89a3      	ldrh	r3, [r4, #12]
 800ba5c:	f043 0308 	orr.w	r3, r3, #8
 800ba60:	81a3      	strh	r3, [r4, #12]
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	b94b      	cbnz	r3, 800ba7a <__swsetup_r+0x7a>
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba70:	d003      	beq.n	800ba7a <__swsetup_r+0x7a>
 800ba72:	4621      	mov	r1, r4
 800ba74:	4628      	mov	r0, r5
 800ba76:	f000 fd2d 	bl	800c4d4 <__smakebuf_r>
 800ba7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba7e:	f013 0201 	ands.w	r2, r3, #1
 800ba82:	d00a      	beq.n	800ba9a <__swsetup_r+0x9a>
 800ba84:	2200      	movs	r2, #0
 800ba86:	60a2      	str	r2, [r4, #8]
 800ba88:	6962      	ldr	r2, [r4, #20]
 800ba8a:	4252      	negs	r2, r2
 800ba8c:	61a2      	str	r2, [r4, #24]
 800ba8e:	6922      	ldr	r2, [r4, #16]
 800ba90:	b942      	cbnz	r2, 800baa4 <__swsetup_r+0xa4>
 800ba92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba96:	d1c5      	bne.n	800ba24 <__swsetup_r+0x24>
 800ba98:	bd38      	pop	{r3, r4, r5, pc}
 800ba9a:	0799      	lsls	r1, r3, #30
 800ba9c:	bf58      	it	pl
 800ba9e:	6962      	ldrpl	r2, [r4, #20]
 800baa0:	60a2      	str	r2, [r4, #8]
 800baa2:	e7f4      	b.n	800ba8e <__swsetup_r+0x8e>
 800baa4:	2000      	movs	r0, #0
 800baa6:	e7f7      	b.n	800ba98 <__swsetup_r+0x98>
 800baa8:	2400001c 	.word	0x2400001c

0800baac <memset>:
 800baac:	4402      	add	r2, r0
 800baae:	4603      	mov	r3, r0
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d100      	bne.n	800bab6 <memset+0xa>
 800bab4:	4770      	bx	lr
 800bab6:	f803 1b01 	strb.w	r1, [r3], #1
 800baba:	e7f9      	b.n	800bab0 <memset+0x4>

0800babc <_close_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d06      	ldr	r5, [pc, #24]	@ (800bad8 <_close_r+0x1c>)
 800bac0:	2300      	movs	r3, #0
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	f7f5 fde7 	bl	800169a <_close>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_close_r+0x1a>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_close_r+0x1a>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	240015bc 	.word	0x240015bc

0800badc <_lseek_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4d07      	ldr	r5, [pc, #28]	@ (800bafc <_lseek_r+0x20>)
 800bae0:	4604      	mov	r4, r0
 800bae2:	4608      	mov	r0, r1
 800bae4:	4611      	mov	r1, r2
 800bae6:	2200      	movs	r2, #0
 800bae8:	602a      	str	r2, [r5, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	f7f5 fdfc 	bl	80016e8 <_lseek>
 800baf0:	1c43      	adds	r3, r0, #1
 800baf2:	d102      	bne.n	800bafa <_lseek_r+0x1e>
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	b103      	cbz	r3, 800bafa <_lseek_r+0x1e>
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	240015bc 	.word	0x240015bc

0800bb00 <_read_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d07      	ldr	r5, [pc, #28]	@ (800bb20 <_read_r+0x20>)
 800bb04:	4604      	mov	r4, r0
 800bb06:	4608      	mov	r0, r1
 800bb08:	4611      	mov	r1, r2
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	602a      	str	r2, [r5, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	f7f5 fd8a 	bl	8001628 <_read>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d102      	bne.n	800bb1e <_read_r+0x1e>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b103      	cbz	r3, 800bb1e <_read_r+0x1e>
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	240015bc 	.word	0x240015bc

0800bb24 <_write_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4d07      	ldr	r5, [pc, #28]	@ (800bb44 <_write_r+0x20>)
 800bb28:	4604      	mov	r4, r0
 800bb2a:	4608      	mov	r0, r1
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	2200      	movs	r2, #0
 800bb30:	602a      	str	r2, [r5, #0]
 800bb32:	461a      	mov	r2, r3
 800bb34:	f7f5 fd95 	bl	8001662 <_write>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d102      	bne.n	800bb42 <_write_r+0x1e>
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	b103      	cbz	r3, 800bb42 <_write_r+0x1e>
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	240015bc 	.word	0x240015bc

0800bb48 <__errno>:
 800bb48:	4b01      	ldr	r3, [pc, #4]	@ (800bb50 <__errno+0x8>)
 800bb4a:	6818      	ldr	r0, [r3, #0]
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	2400001c 	.word	0x2400001c

0800bb54 <__libc_init_array>:
 800bb54:	b570      	push	{r4, r5, r6, lr}
 800bb56:	4d0d      	ldr	r5, [pc, #52]	@ (800bb8c <__libc_init_array+0x38>)
 800bb58:	4c0d      	ldr	r4, [pc, #52]	@ (800bb90 <__libc_init_array+0x3c>)
 800bb5a:	1b64      	subs	r4, r4, r5
 800bb5c:	10a4      	asrs	r4, r4, #2
 800bb5e:	2600      	movs	r6, #0
 800bb60:	42a6      	cmp	r6, r4
 800bb62:	d109      	bne.n	800bb78 <__libc_init_array+0x24>
 800bb64:	4d0b      	ldr	r5, [pc, #44]	@ (800bb94 <__libc_init_array+0x40>)
 800bb66:	4c0c      	ldr	r4, [pc, #48]	@ (800bb98 <__libc_init_array+0x44>)
 800bb68:	f000 fd22 	bl	800c5b0 <_init>
 800bb6c:	1b64      	subs	r4, r4, r5
 800bb6e:	10a4      	asrs	r4, r4, #2
 800bb70:	2600      	movs	r6, #0
 800bb72:	42a6      	cmp	r6, r4
 800bb74:	d105      	bne.n	800bb82 <__libc_init_array+0x2e>
 800bb76:	bd70      	pop	{r4, r5, r6, pc}
 800bb78:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb7c:	4798      	blx	r3
 800bb7e:	3601      	adds	r6, #1
 800bb80:	e7ee      	b.n	800bb60 <__libc_init_array+0xc>
 800bb82:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb86:	4798      	blx	r3
 800bb88:	3601      	adds	r6, #1
 800bb8a:	e7f2      	b.n	800bb72 <__libc_init_array+0x1e>
 800bb8c:	0800cb74 	.word	0x0800cb74
 800bb90:	0800cb74 	.word	0x0800cb74
 800bb94:	0800cb74 	.word	0x0800cb74
 800bb98:	0800cb78 	.word	0x0800cb78

0800bb9c <__retarget_lock_init_recursive>:
 800bb9c:	4770      	bx	lr

0800bb9e <__retarget_lock_acquire_recursive>:
 800bb9e:	4770      	bx	lr

0800bba0 <__retarget_lock_release_recursive>:
 800bba0:	4770      	bx	lr
	...

0800bba4 <_free_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	4605      	mov	r5, r0
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	d041      	beq.n	800bc30 <_free_r+0x8c>
 800bbac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb0:	1f0c      	subs	r4, r1, #4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	bfb8      	it	lt
 800bbb6:	18e4      	addlt	r4, r4, r3
 800bbb8:	f000 f8e0 	bl	800bd7c <__malloc_lock>
 800bbbc:	4a1d      	ldr	r2, [pc, #116]	@ (800bc34 <_free_r+0x90>)
 800bbbe:	6813      	ldr	r3, [r2, #0]
 800bbc0:	b933      	cbnz	r3, 800bbd0 <_free_r+0x2c>
 800bbc2:	6063      	str	r3, [r4, #4]
 800bbc4:	6014      	str	r4, [r2, #0]
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbcc:	f000 b8dc 	b.w	800bd88 <__malloc_unlock>
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	d908      	bls.n	800bbe6 <_free_r+0x42>
 800bbd4:	6820      	ldr	r0, [r4, #0]
 800bbd6:	1821      	adds	r1, r4, r0
 800bbd8:	428b      	cmp	r3, r1
 800bbda:	bf01      	itttt	eq
 800bbdc:	6819      	ldreq	r1, [r3, #0]
 800bbde:	685b      	ldreq	r3, [r3, #4]
 800bbe0:	1809      	addeq	r1, r1, r0
 800bbe2:	6021      	streq	r1, [r4, #0]
 800bbe4:	e7ed      	b.n	800bbc2 <_free_r+0x1e>
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	b10b      	cbz	r3, 800bbf0 <_free_r+0x4c>
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	d9fa      	bls.n	800bbe6 <_free_r+0x42>
 800bbf0:	6811      	ldr	r1, [r2, #0]
 800bbf2:	1850      	adds	r0, r2, r1
 800bbf4:	42a0      	cmp	r0, r4
 800bbf6:	d10b      	bne.n	800bc10 <_free_r+0x6c>
 800bbf8:	6820      	ldr	r0, [r4, #0]
 800bbfa:	4401      	add	r1, r0
 800bbfc:	1850      	adds	r0, r2, r1
 800bbfe:	4283      	cmp	r3, r0
 800bc00:	6011      	str	r1, [r2, #0]
 800bc02:	d1e0      	bne.n	800bbc6 <_free_r+0x22>
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	6053      	str	r3, [r2, #4]
 800bc0a:	4408      	add	r0, r1
 800bc0c:	6010      	str	r0, [r2, #0]
 800bc0e:	e7da      	b.n	800bbc6 <_free_r+0x22>
 800bc10:	d902      	bls.n	800bc18 <_free_r+0x74>
 800bc12:	230c      	movs	r3, #12
 800bc14:	602b      	str	r3, [r5, #0]
 800bc16:	e7d6      	b.n	800bbc6 <_free_r+0x22>
 800bc18:	6820      	ldr	r0, [r4, #0]
 800bc1a:	1821      	adds	r1, r4, r0
 800bc1c:	428b      	cmp	r3, r1
 800bc1e:	bf04      	itt	eq
 800bc20:	6819      	ldreq	r1, [r3, #0]
 800bc22:	685b      	ldreq	r3, [r3, #4]
 800bc24:	6063      	str	r3, [r4, #4]
 800bc26:	bf04      	itt	eq
 800bc28:	1809      	addeq	r1, r1, r0
 800bc2a:	6021      	streq	r1, [r4, #0]
 800bc2c:	6054      	str	r4, [r2, #4]
 800bc2e:	e7ca      	b.n	800bbc6 <_free_r+0x22>
 800bc30:	bd38      	pop	{r3, r4, r5, pc}
 800bc32:	bf00      	nop
 800bc34:	240015c8 	.word	0x240015c8

0800bc38 <sbrk_aligned>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	4e0f      	ldr	r6, [pc, #60]	@ (800bc78 <sbrk_aligned+0x40>)
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	6831      	ldr	r1, [r6, #0]
 800bc40:	4605      	mov	r5, r0
 800bc42:	b911      	cbnz	r1, 800bc4a <sbrk_aligned+0x12>
 800bc44:	f000 fca4 	bl	800c590 <_sbrk_r>
 800bc48:	6030      	str	r0, [r6, #0]
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	f000 fc9f 	bl	800c590 <_sbrk_r>
 800bc52:	1c43      	adds	r3, r0, #1
 800bc54:	d103      	bne.n	800bc5e <sbrk_aligned+0x26>
 800bc56:	f04f 34ff 	mov.w	r4, #4294967295
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	bd70      	pop	{r4, r5, r6, pc}
 800bc5e:	1cc4      	adds	r4, r0, #3
 800bc60:	f024 0403 	bic.w	r4, r4, #3
 800bc64:	42a0      	cmp	r0, r4
 800bc66:	d0f8      	beq.n	800bc5a <sbrk_aligned+0x22>
 800bc68:	1a21      	subs	r1, r4, r0
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	f000 fc90 	bl	800c590 <_sbrk_r>
 800bc70:	3001      	adds	r0, #1
 800bc72:	d1f2      	bne.n	800bc5a <sbrk_aligned+0x22>
 800bc74:	e7ef      	b.n	800bc56 <sbrk_aligned+0x1e>
 800bc76:	bf00      	nop
 800bc78:	240015c4 	.word	0x240015c4

0800bc7c <_malloc_r>:
 800bc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc80:	1ccd      	adds	r5, r1, #3
 800bc82:	f025 0503 	bic.w	r5, r5, #3
 800bc86:	3508      	adds	r5, #8
 800bc88:	2d0c      	cmp	r5, #12
 800bc8a:	bf38      	it	cc
 800bc8c:	250c      	movcc	r5, #12
 800bc8e:	2d00      	cmp	r5, #0
 800bc90:	4606      	mov	r6, r0
 800bc92:	db01      	blt.n	800bc98 <_malloc_r+0x1c>
 800bc94:	42a9      	cmp	r1, r5
 800bc96:	d904      	bls.n	800bca2 <_malloc_r+0x26>
 800bc98:	230c      	movs	r3, #12
 800bc9a:	6033      	str	r3, [r6, #0]
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd78 <_malloc_r+0xfc>
 800bca6:	f000 f869 	bl	800bd7c <__malloc_lock>
 800bcaa:	f8d8 3000 	ldr.w	r3, [r8]
 800bcae:	461c      	mov	r4, r3
 800bcb0:	bb44      	cbnz	r4, 800bd04 <_malloc_r+0x88>
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff ffbf 	bl	800bc38 <sbrk_aligned>
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	d158      	bne.n	800bd72 <_malloc_r+0xf6>
 800bcc0:	f8d8 4000 	ldr.w	r4, [r8]
 800bcc4:	4627      	mov	r7, r4
 800bcc6:	2f00      	cmp	r7, #0
 800bcc8:	d143      	bne.n	800bd52 <_malloc_r+0xd6>
 800bcca:	2c00      	cmp	r4, #0
 800bccc:	d04b      	beq.n	800bd66 <_malloc_r+0xea>
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	4639      	mov	r1, r7
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	eb04 0903 	add.w	r9, r4, r3
 800bcd8:	f000 fc5a 	bl	800c590 <_sbrk_r>
 800bcdc:	4581      	cmp	r9, r0
 800bcde:	d142      	bne.n	800bd66 <_malloc_r+0xea>
 800bce0:	6821      	ldr	r1, [r4, #0]
 800bce2:	1a6d      	subs	r5, r5, r1
 800bce4:	4629      	mov	r1, r5
 800bce6:	4630      	mov	r0, r6
 800bce8:	f7ff ffa6 	bl	800bc38 <sbrk_aligned>
 800bcec:	3001      	adds	r0, #1
 800bcee:	d03a      	beq.n	800bd66 <_malloc_r+0xea>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	442b      	add	r3, r5
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	f8d8 3000 	ldr.w	r3, [r8]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	bb62      	cbnz	r2, 800bd58 <_malloc_r+0xdc>
 800bcfe:	f8c8 7000 	str.w	r7, [r8]
 800bd02:	e00f      	b.n	800bd24 <_malloc_r+0xa8>
 800bd04:	6822      	ldr	r2, [r4, #0]
 800bd06:	1b52      	subs	r2, r2, r5
 800bd08:	d420      	bmi.n	800bd4c <_malloc_r+0xd0>
 800bd0a:	2a0b      	cmp	r2, #11
 800bd0c:	d917      	bls.n	800bd3e <_malloc_r+0xc2>
 800bd0e:	1961      	adds	r1, r4, r5
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	6025      	str	r5, [r4, #0]
 800bd14:	bf18      	it	ne
 800bd16:	6059      	strne	r1, [r3, #4]
 800bd18:	6863      	ldr	r3, [r4, #4]
 800bd1a:	bf08      	it	eq
 800bd1c:	f8c8 1000 	streq.w	r1, [r8]
 800bd20:	5162      	str	r2, [r4, r5]
 800bd22:	604b      	str	r3, [r1, #4]
 800bd24:	4630      	mov	r0, r6
 800bd26:	f000 f82f 	bl	800bd88 <__malloc_unlock>
 800bd2a:	f104 000b 	add.w	r0, r4, #11
 800bd2e:	1d23      	adds	r3, r4, #4
 800bd30:	f020 0007 	bic.w	r0, r0, #7
 800bd34:	1ac2      	subs	r2, r0, r3
 800bd36:	bf1c      	itt	ne
 800bd38:	1a1b      	subne	r3, r3, r0
 800bd3a:	50a3      	strne	r3, [r4, r2]
 800bd3c:	e7af      	b.n	800bc9e <_malloc_r+0x22>
 800bd3e:	6862      	ldr	r2, [r4, #4]
 800bd40:	42a3      	cmp	r3, r4
 800bd42:	bf0c      	ite	eq
 800bd44:	f8c8 2000 	streq.w	r2, [r8]
 800bd48:	605a      	strne	r2, [r3, #4]
 800bd4a:	e7eb      	b.n	800bd24 <_malloc_r+0xa8>
 800bd4c:	4623      	mov	r3, r4
 800bd4e:	6864      	ldr	r4, [r4, #4]
 800bd50:	e7ae      	b.n	800bcb0 <_malloc_r+0x34>
 800bd52:	463c      	mov	r4, r7
 800bd54:	687f      	ldr	r7, [r7, #4]
 800bd56:	e7b6      	b.n	800bcc6 <_malloc_r+0x4a>
 800bd58:	461a      	mov	r2, r3
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	42a3      	cmp	r3, r4
 800bd5e:	d1fb      	bne.n	800bd58 <_malloc_r+0xdc>
 800bd60:	2300      	movs	r3, #0
 800bd62:	6053      	str	r3, [r2, #4]
 800bd64:	e7de      	b.n	800bd24 <_malloc_r+0xa8>
 800bd66:	230c      	movs	r3, #12
 800bd68:	6033      	str	r3, [r6, #0]
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f000 f80c 	bl	800bd88 <__malloc_unlock>
 800bd70:	e794      	b.n	800bc9c <_malloc_r+0x20>
 800bd72:	6005      	str	r5, [r0, #0]
 800bd74:	e7d6      	b.n	800bd24 <_malloc_r+0xa8>
 800bd76:	bf00      	nop
 800bd78:	240015c8 	.word	0x240015c8

0800bd7c <__malloc_lock>:
 800bd7c:	4801      	ldr	r0, [pc, #4]	@ (800bd84 <__malloc_lock+0x8>)
 800bd7e:	f7ff bf0e 	b.w	800bb9e <__retarget_lock_acquire_recursive>
 800bd82:	bf00      	nop
 800bd84:	240015c0 	.word	0x240015c0

0800bd88 <__malloc_unlock>:
 800bd88:	4801      	ldr	r0, [pc, #4]	@ (800bd90 <__malloc_unlock+0x8>)
 800bd8a:	f7ff bf09 	b.w	800bba0 <__retarget_lock_release_recursive>
 800bd8e:	bf00      	nop
 800bd90:	240015c0 	.word	0x240015c0

0800bd94 <__sfputc_r>:
 800bd94:	6893      	ldr	r3, [r2, #8]
 800bd96:	3b01      	subs	r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	b410      	push	{r4}
 800bd9c:	6093      	str	r3, [r2, #8]
 800bd9e:	da08      	bge.n	800bdb2 <__sfputc_r+0x1e>
 800bda0:	6994      	ldr	r4, [r2, #24]
 800bda2:	42a3      	cmp	r3, r4
 800bda4:	db01      	blt.n	800bdaa <__sfputc_r+0x16>
 800bda6:	290a      	cmp	r1, #10
 800bda8:	d103      	bne.n	800bdb2 <__sfputc_r+0x1e>
 800bdaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdae:	f7ff bde8 	b.w	800b982 <__swbuf_r>
 800bdb2:	6813      	ldr	r3, [r2, #0]
 800bdb4:	1c58      	adds	r0, r3, #1
 800bdb6:	6010      	str	r0, [r2, #0]
 800bdb8:	7019      	strb	r1, [r3, #0]
 800bdba:	4608      	mov	r0, r1
 800bdbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <__sfputs_r>:
 800bdc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	460f      	mov	r7, r1
 800bdc8:	4614      	mov	r4, r2
 800bdca:	18d5      	adds	r5, r2, r3
 800bdcc:	42ac      	cmp	r4, r5
 800bdce:	d101      	bne.n	800bdd4 <__sfputs_r+0x12>
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	e007      	b.n	800bde4 <__sfputs_r+0x22>
 800bdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd8:	463a      	mov	r2, r7
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7ff ffda 	bl	800bd94 <__sfputc_r>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d1f3      	bne.n	800bdcc <__sfputs_r+0xa>
 800bde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bde8 <_vfiprintf_r>:
 800bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdec:	460d      	mov	r5, r1
 800bdee:	b09d      	sub	sp, #116	@ 0x74
 800bdf0:	4614      	mov	r4, r2
 800bdf2:	4698      	mov	r8, r3
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	b118      	cbz	r0, 800be00 <_vfiprintf_r+0x18>
 800bdf8:	6a03      	ldr	r3, [r0, #32]
 800bdfa:	b90b      	cbnz	r3, 800be00 <_vfiprintf_r+0x18>
 800bdfc:	f7ff fcd8 	bl	800b7b0 <__sinit>
 800be00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be02:	07d9      	lsls	r1, r3, #31
 800be04:	d405      	bmi.n	800be12 <_vfiprintf_r+0x2a>
 800be06:	89ab      	ldrh	r3, [r5, #12]
 800be08:	059a      	lsls	r2, r3, #22
 800be0a:	d402      	bmi.n	800be12 <_vfiprintf_r+0x2a>
 800be0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be0e:	f7ff fec6 	bl	800bb9e <__retarget_lock_acquire_recursive>
 800be12:	89ab      	ldrh	r3, [r5, #12]
 800be14:	071b      	lsls	r3, r3, #28
 800be16:	d501      	bpl.n	800be1c <_vfiprintf_r+0x34>
 800be18:	692b      	ldr	r3, [r5, #16]
 800be1a:	b99b      	cbnz	r3, 800be44 <_vfiprintf_r+0x5c>
 800be1c:	4629      	mov	r1, r5
 800be1e:	4630      	mov	r0, r6
 800be20:	f7ff fdee 	bl	800ba00 <__swsetup_r>
 800be24:	b170      	cbz	r0, 800be44 <_vfiprintf_r+0x5c>
 800be26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be28:	07dc      	lsls	r4, r3, #31
 800be2a:	d504      	bpl.n	800be36 <_vfiprintf_r+0x4e>
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	b01d      	add	sp, #116	@ 0x74
 800be32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be36:	89ab      	ldrh	r3, [r5, #12]
 800be38:	0598      	lsls	r0, r3, #22
 800be3a:	d4f7      	bmi.n	800be2c <_vfiprintf_r+0x44>
 800be3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be3e:	f7ff feaf 	bl	800bba0 <__retarget_lock_release_recursive>
 800be42:	e7f3      	b.n	800be2c <_vfiprintf_r+0x44>
 800be44:	2300      	movs	r3, #0
 800be46:	9309      	str	r3, [sp, #36]	@ 0x24
 800be48:	2320      	movs	r3, #32
 800be4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800be52:	2330      	movs	r3, #48	@ 0x30
 800be54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c004 <_vfiprintf_r+0x21c>
 800be58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be5c:	f04f 0901 	mov.w	r9, #1
 800be60:	4623      	mov	r3, r4
 800be62:	469a      	mov	sl, r3
 800be64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be68:	b10a      	cbz	r2, 800be6e <_vfiprintf_r+0x86>
 800be6a:	2a25      	cmp	r2, #37	@ 0x25
 800be6c:	d1f9      	bne.n	800be62 <_vfiprintf_r+0x7a>
 800be6e:	ebba 0b04 	subs.w	fp, sl, r4
 800be72:	d00b      	beq.n	800be8c <_vfiprintf_r+0xa4>
 800be74:	465b      	mov	r3, fp
 800be76:	4622      	mov	r2, r4
 800be78:	4629      	mov	r1, r5
 800be7a:	4630      	mov	r0, r6
 800be7c:	f7ff ffa1 	bl	800bdc2 <__sfputs_r>
 800be80:	3001      	adds	r0, #1
 800be82:	f000 80a7 	beq.w	800bfd4 <_vfiprintf_r+0x1ec>
 800be86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be88:	445a      	add	r2, fp
 800be8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800be8c:	f89a 3000 	ldrb.w	r3, [sl]
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 809f 	beq.w	800bfd4 <_vfiprintf_r+0x1ec>
 800be96:	2300      	movs	r3, #0
 800be98:	f04f 32ff 	mov.w	r2, #4294967295
 800be9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bea0:	f10a 0a01 	add.w	sl, sl, #1
 800bea4:	9304      	str	r3, [sp, #16]
 800bea6:	9307      	str	r3, [sp, #28]
 800bea8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800beac:	931a      	str	r3, [sp, #104]	@ 0x68
 800beae:	4654      	mov	r4, sl
 800beb0:	2205      	movs	r2, #5
 800beb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb6:	4853      	ldr	r0, [pc, #332]	@ (800c004 <_vfiprintf_r+0x21c>)
 800beb8:	f7f4 fa2a 	bl	8000310 <memchr>
 800bebc:	9a04      	ldr	r2, [sp, #16]
 800bebe:	b9d8      	cbnz	r0, 800bef8 <_vfiprintf_r+0x110>
 800bec0:	06d1      	lsls	r1, r2, #27
 800bec2:	bf44      	itt	mi
 800bec4:	2320      	movmi	r3, #32
 800bec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800beca:	0713      	lsls	r3, r2, #28
 800becc:	bf44      	itt	mi
 800bece:	232b      	movmi	r3, #43	@ 0x2b
 800bed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bed4:	f89a 3000 	ldrb.w	r3, [sl]
 800bed8:	2b2a      	cmp	r3, #42	@ 0x2a
 800beda:	d015      	beq.n	800bf08 <_vfiprintf_r+0x120>
 800bedc:	9a07      	ldr	r2, [sp, #28]
 800bede:	4654      	mov	r4, sl
 800bee0:	2000      	movs	r0, #0
 800bee2:	f04f 0c0a 	mov.w	ip, #10
 800bee6:	4621      	mov	r1, r4
 800bee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beec:	3b30      	subs	r3, #48	@ 0x30
 800beee:	2b09      	cmp	r3, #9
 800bef0:	d94b      	bls.n	800bf8a <_vfiprintf_r+0x1a2>
 800bef2:	b1b0      	cbz	r0, 800bf22 <_vfiprintf_r+0x13a>
 800bef4:	9207      	str	r2, [sp, #28]
 800bef6:	e014      	b.n	800bf22 <_vfiprintf_r+0x13a>
 800bef8:	eba0 0308 	sub.w	r3, r0, r8
 800befc:	fa09 f303 	lsl.w	r3, r9, r3
 800bf00:	4313      	orrs	r3, r2
 800bf02:	9304      	str	r3, [sp, #16]
 800bf04:	46a2      	mov	sl, r4
 800bf06:	e7d2      	b.n	800beae <_vfiprintf_r+0xc6>
 800bf08:	9b03      	ldr	r3, [sp, #12]
 800bf0a:	1d19      	adds	r1, r3, #4
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	9103      	str	r1, [sp, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bfbb      	ittet	lt
 800bf14:	425b      	neglt	r3, r3
 800bf16:	f042 0202 	orrlt.w	r2, r2, #2
 800bf1a:	9307      	strge	r3, [sp, #28]
 800bf1c:	9307      	strlt	r3, [sp, #28]
 800bf1e:	bfb8      	it	lt
 800bf20:	9204      	strlt	r2, [sp, #16]
 800bf22:	7823      	ldrb	r3, [r4, #0]
 800bf24:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf26:	d10a      	bne.n	800bf3e <_vfiprintf_r+0x156>
 800bf28:	7863      	ldrb	r3, [r4, #1]
 800bf2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf2c:	d132      	bne.n	800bf94 <_vfiprintf_r+0x1ac>
 800bf2e:	9b03      	ldr	r3, [sp, #12]
 800bf30:	1d1a      	adds	r2, r3, #4
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	9203      	str	r2, [sp, #12]
 800bf36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf3a:	3402      	adds	r4, #2
 800bf3c:	9305      	str	r3, [sp, #20]
 800bf3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c014 <_vfiprintf_r+0x22c>
 800bf42:	7821      	ldrb	r1, [r4, #0]
 800bf44:	2203      	movs	r2, #3
 800bf46:	4650      	mov	r0, sl
 800bf48:	f7f4 f9e2 	bl	8000310 <memchr>
 800bf4c:	b138      	cbz	r0, 800bf5e <_vfiprintf_r+0x176>
 800bf4e:	9b04      	ldr	r3, [sp, #16]
 800bf50:	eba0 000a 	sub.w	r0, r0, sl
 800bf54:	2240      	movs	r2, #64	@ 0x40
 800bf56:	4082      	lsls	r2, r0
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	3401      	adds	r4, #1
 800bf5c:	9304      	str	r3, [sp, #16]
 800bf5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf62:	4829      	ldr	r0, [pc, #164]	@ (800c008 <_vfiprintf_r+0x220>)
 800bf64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf68:	2206      	movs	r2, #6
 800bf6a:	f7f4 f9d1 	bl	8000310 <memchr>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d03f      	beq.n	800bff2 <_vfiprintf_r+0x20a>
 800bf72:	4b26      	ldr	r3, [pc, #152]	@ (800c00c <_vfiprintf_r+0x224>)
 800bf74:	bb1b      	cbnz	r3, 800bfbe <_vfiprintf_r+0x1d6>
 800bf76:	9b03      	ldr	r3, [sp, #12]
 800bf78:	3307      	adds	r3, #7
 800bf7a:	f023 0307 	bic.w	r3, r3, #7
 800bf7e:	3308      	adds	r3, #8
 800bf80:	9303      	str	r3, [sp, #12]
 800bf82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf84:	443b      	add	r3, r7
 800bf86:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf88:	e76a      	b.n	800be60 <_vfiprintf_r+0x78>
 800bf8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf8e:	460c      	mov	r4, r1
 800bf90:	2001      	movs	r0, #1
 800bf92:	e7a8      	b.n	800bee6 <_vfiprintf_r+0xfe>
 800bf94:	2300      	movs	r3, #0
 800bf96:	3401      	adds	r4, #1
 800bf98:	9305      	str	r3, [sp, #20]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	f04f 0c0a 	mov.w	ip, #10
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa6:	3a30      	subs	r2, #48	@ 0x30
 800bfa8:	2a09      	cmp	r2, #9
 800bfaa:	d903      	bls.n	800bfb4 <_vfiprintf_r+0x1cc>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d0c6      	beq.n	800bf3e <_vfiprintf_r+0x156>
 800bfb0:	9105      	str	r1, [sp, #20]
 800bfb2:	e7c4      	b.n	800bf3e <_vfiprintf_r+0x156>
 800bfb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfb8:	4604      	mov	r4, r0
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e7f0      	b.n	800bfa0 <_vfiprintf_r+0x1b8>
 800bfbe:	ab03      	add	r3, sp, #12
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	462a      	mov	r2, r5
 800bfc4:	4b12      	ldr	r3, [pc, #72]	@ (800c010 <_vfiprintf_r+0x228>)
 800bfc6:	a904      	add	r1, sp, #16
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f3af 8000 	nop.w
 800bfce:	4607      	mov	r7, r0
 800bfd0:	1c78      	adds	r0, r7, #1
 800bfd2:	d1d6      	bne.n	800bf82 <_vfiprintf_r+0x19a>
 800bfd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfd6:	07d9      	lsls	r1, r3, #31
 800bfd8:	d405      	bmi.n	800bfe6 <_vfiprintf_r+0x1fe>
 800bfda:	89ab      	ldrh	r3, [r5, #12]
 800bfdc:	059a      	lsls	r2, r3, #22
 800bfde:	d402      	bmi.n	800bfe6 <_vfiprintf_r+0x1fe>
 800bfe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfe2:	f7ff fddd 	bl	800bba0 <__retarget_lock_release_recursive>
 800bfe6:	89ab      	ldrh	r3, [r5, #12]
 800bfe8:	065b      	lsls	r3, r3, #25
 800bfea:	f53f af1f 	bmi.w	800be2c <_vfiprintf_r+0x44>
 800bfee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bff0:	e71e      	b.n	800be30 <_vfiprintf_r+0x48>
 800bff2:	ab03      	add	r3, sp, #12
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	462a      	mov	r2, r5
 800bff8:	4b05      	ldr	r3, [pc, #20]	@ (800c010 <_vfiprintf_r+0x228>)
 800bffa:	a904      	add	r1, sp, #16
 800bffc:	4630      	mov	r0, r6
 800bffe:	f000 f879 	bl	800c0f4 <_printf_i>
 800c002:	e7e4      	b.n	800bfce <_vfiprintf_r+0x1e6>
 800c004:	0800cb38 	.word	0x0800cb38
 800c008:	0800cb42 	.word	0x0800cb42
 800c00c:	00000000 	.word	0x00000000
 800c010:	0800bdc3 	.word	0x0800bdc3
 800c014:	0800cb3e 	.word	0x0800cb3e

0800c018 <_printf_common>:
 800c018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c01c:	4616      	mov	r6, r2
 800c01e:	4698      	mov	r8, r3
 800c020:	688a      	ldr	r2, [r1, #8]
 800c022:	690b      	ldr	r3, [r1, #16]
 800c024:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c028:	4293      	cmp	r3, r2
 800c02a:	bfb8      	it	lt
 800c02c:	4613      	movlt	r3, r2
 800c02e:	6033      	str	r3, [r6, #0]
 800c030:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c034:	4607      	mov	r7, r0
 800c036:	460c      	mov	r4, r1
 800c038:	b10a      	cbz	r2, 800c03e <_printf_common+0x26>
 800c03a:	3301      	adds	r3, #1
 800c03c:	6033      	str	r3, [r6, #0]
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	0699      	lsls	r1, r3, #26
 800c042:	bf42      	ittt	mi
 800c044:	6833      	ldrmi	r3, [r6, #0]
 800c046:	3302      	addmi	r3, #2
 800c048:	6033      	strmi	r3, [r6, #0]
 800c04a:	6825      	ldr	r5, [r4, #0]
 800c04c:	f015 0506 	ands.w	r5, r5, #6
 800c050:	d106      	bne.n	800c060 <_printf_common+0x48>
 800c052:	f104 0a19 	add.w	sl, r4, #25
 800c056:	68e3      	ldr	r3, [r4, #12]
 800c058:	6832      	ldr	r2, [r6, #0]
 800c05a:	1a9b      	subs	r3, r3, r2
 800c05c:	42ab      	cmp	r3, r5
 800c05e:	dc26      	bgt.n	800c0ae <_printf_common+0x96>
 800c060:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c064:	6822      	ldr	r2, [r4, #0]
 800c066:	3b00      	subs	r3, #0
 800c068:	bf18      	it	ne
 800c06a:	2301      	movne	r3, #1
 800c06c:	0692      	lsls	r2, r2, #26
 800c06e:	d42b      	bmi.n	800c0c8 <_printf_common+0xb0>
 800c070:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c074:	4641      	mov	r1, r8
 800c076:	4638      	mov	r0, r7
 800c078:	47c8      	blx	r9
 800c07a:	3001      	adds	r0, #1
 800c07c:	d01e      	beq.n	800c0bc <_printf_common+0xa4>
 800c07e:	6823      	ldr	r3, [r4, #0]
 800c080:	6922      	ldr	r2, [r4, #16]
 800c082:	f003 0306 	and.w	r3, r3, #6
 800c086:	2b04      	cmp	r3, #4
 800c088:	bf02      	ittt	eq
 800c08a:	68e5      	ldreq	r5, [r4, #12]
 800c08c:	6833      	ldreq	r3, [r6, #0]
 800c08e:	1aed      	subeq	r5, r5, r3
 800c090:	68a3      	ldr	r3, [r4, #8]
 800c092:	bf0c      	ite	eq
 800c094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c098:	2500      	movne	r5, #0
 800c09a:	4293      	cmp	r3, r2
 800c09c:	bfc4      	itt	gt
 800c09e:	1a9b      	subgt	r3, r3, r2
 800c0a0:	18ed      	addgt	r5, r5, r3
 800c0a2:	2600      	movs	r6, #0
 800c0a4:	341a      	adds	r4, #26
 800c0a6:	42b5      	cmp	r5, r6
 800c0a8:	d11a      	bne.n	800c0e0 <_printf_common+0xc8>
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	e008      	b.n	800c0c0 <_printf_common+0xa8>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	4652      	mov	r2, sl
 800c0b2:	4641      	mov	r1, r8
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	47c8      	blx	r9
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d103      	bne.n	800c0c4 <_printf_common+0xac>
 800c0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c4:	3501      	adds	r5, #1
 800c0c6:	e7c6      	b.n	800c056 <_printf_common+0x3e>
 800c0c8:	18e1      	adds	r1, r4, r3
 800c0ca:	1c5a      	adds	r2, r3, #1
 800c0cc:	2030      	movs	r0, #48	@ 0x30
 800c0ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c0d2:	4422      	add	r2, r4
 800c0d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c0d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c0dc:	3302      	adds	r3, #2
 800c0de:	e7c7      	b.n	800c070 <_printf_common+0x58>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	4622      	mov	r2, r4
 800c0e4:	4641      	mov	r1, r8
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	47c8      	blx	r9
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	d0e6      	beq.n	800c0bc <_printf_common+0xa4>
 800c0ee:	3601      	adds	r6, #1
 800c0f0:	e7d9      	b.n	800c0a6 <_printf_common+0x8e>
	...

0800c0f4 <_printf_i>:
 800c0f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f8:	7e0f      	ldrb	r7, [r1, #24]
 800c0fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c0fc:	2f78      	cmp	r7, #120	@ 0x78
 800c0fe:	4691      	mov	r9, r2
 800c100:	4680      	mov	r8, r0
 800c102:	460c      	mov	r4, r1
 800c104:	469a      	mov	sl, r3
 800c106:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c10a:	d807      	bhi.n	800c11c <_printf_i+0x28>
 800c10c:	2f62      	cmp	r7, #98	@ 0x62
 800c10e:	d80a      	bhi.n	800c126 <_printf_i+0x32>
 800c110:	2f00      	cmp	r7, #0
 800c112:	f000 80d1 	beq.w	800c2b8 <_printf_i+0x1c4>
 800c116:	2f58      	cmp	r7, #88	@ 0x58
 800c118:	f000 80b8 	beq.w	800c28c <_printf_i+0x198>
 800c11c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c120:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c124:	e03a      	b.n	800c19c <_printf_i+0xa8>
 800c126:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c12a:	2b15      	cmp	r3, #21
 800c12c:	d8f6      	bhi.n	800c11c <_printf_i+0x28>
 800c12e:	a101      	add	r1, pc, #4	@ (adr r1, 800c134 <_printf_i+0x40>)
 800c130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c134:	0800c18d 	.word	0x0800c18d
 800c138:	0800c1a1 	.word	0x0800c1a1
 800c13c:	0800c11d 	.word	0x0800c11d
 800c140:	0800c11d 	.word	0x0800c11d
 800c144:	0800c11d 	.word	0x0800c11d
 800c148:	0800c11d 	.word	0x0800c11d
 800c14c:	0800c1a1 	.word	0x0800c1a1
 800c150:	0800c11d 	.word	0x0800c11d
 800c154:	0800c11d 	.word	0x0800c11d
 800c158:	0800c11d 	.word	0x0800c11d
 800c15c:	0800c11d 	.word	0x0800c11d
 800c160:	0800c29f 	.word	0x0800c29f
 800c164:	0800c1cb 	.word	0x0800c1cb
 800c168:	0800c259 	.word	0x0800c259
 800c16c:	0800c11d 	.word	0x0800c11d
 800c170:	0800c11d 	.word	0x0800c11d
 800c174:	0800c2c1 	.word	0x0800c2c1
 800c178:	0800c11d 	.word	0x0800c11d
 800c17c:	0800c1cb 	.word	0x0800c1cb
 800c180:	0800c11d 	.word	0x0800c11d
 800c184:	0800c11d 	.word	0x0800c11d
 800c188:	0800c261 	.word	0x0800c261
 800c18c:	6833      	ldr	r3, [r6, #0]
 800c18e:	1d1a      	adds	r2, r3, #4
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6032      	str	r2, [r6, #0]
 800c194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c198:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c19c:	2301      	movs	r3, #1
 800c19e:	e09c      	b.n	800c2da <_printf_i+0x1e6>
 800c1a0:	6833      	ldr	r3, [r6, #0]
 800c1a2:	6820      	ldr	r0, [r4, #0]
 800c1a4:	1d19      	adds	r1, r3, #4
 800c1a6:	6031      	str	r1, [r6, #0]
 800c1a8:	0606      	lsls	r6, r0, #24
 800c1aa:	d501      	bpl.n	800c1b0 <_printf_i+0xbc>
 800c1ac:	681d      	ldr	r5, [r3, #0]
 800c1ae:	e003      	b.n	800c1b8 <_printf_i+0xc4>
 800c1b0:	0645      	lsls	r5, r0, #25
 800c1b2:	d5fb      	bpl.n	800c1ac <_printf_i+0xb8>
 800c1b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c1b8:	2d00      	cmp	r5, #0
 800c1ba:	da03      	bge.n	800c1c4 <_printf_i+0xd0>
 800c1bc:	232d      	movs	r3, #45	@ 0x2d
 800c1be:	426d      	negs	r5, r5
 800c1c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1c4:	4858      	ldr	r0, [pc, #352]	@ (800c328 <_printf_i+0x234>)
 800c1c6:	230a      	movs	r3, #10
 800c1c8:	e011      	b.n	800c1ee <_printf_i+0xfa>
 800c1ca:	6821      	ldr	r1, [r4, #0]
 800c1cc:	6833      	ldr	r3, [r6, #0]
 800c1ce:	0608      	lsls	r0, r1, #24
 800c1d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c1d4:	d402      	bmi.n	800c1dc <_printf_i+0xe8>
 800c1d6:	0649      	lsls	r1, r1, #25
 800c1d8:	bf48      	it	mi
 800c1da:	b2ad      	uxthmi	r5, r5
 800c1dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c1de:	4852      	ldr	r0, [pc, #328]	@ (800c328 <_printf_i+0x234>)
 800c1e0:	6033      	str	r3, [r6, #0]
 800c1e2:	bf14      	ite	ne
 800c1e4:	230a      	movne	r3, #10
 800c1e6:	2308      	moveq	r3, #8
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c1ee:	6866      	ldr	r6, [r4, #4]
 800c1f0:	60a6      	str	r6, [r4, #8]
 800c1f2:	2e00      	cmp	r6, #0
 800c1f4:	db05      	blt.n	800c202 <_printf_i+0x10e>
 800c1f6:	6821      	ldr	r1, [r4, #0]
 800c1f8:	432e      	orrs	r6, r5
 800c1fa:	f021 0104 	bic.w	r1, r1, #4
 800c1fe:	6021      	str	r1, [r4, #0]
 800c200:	d04b      	beq.n	800c29a <_printf_i+0x1a6>
 800c202:	4616      	mov	r6, r2
 800c204:	fbb5 f1f3 	udiv	r1, r5, r3
 800c208:	fb03 5711 	mls	r7, r3, r1, r5
 800c20c:	5dc7      	ldrb	r7, [r0, r7]
 800c20e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c212:	462f      	mov	r7, r5
 800c214:	42bb      	cmp	r3, r7
 800c216:	460d      	mov	r5, r1
 800c218:	d9f4      	bls.n	800c204 <_printf_i+0x110>
 800c21a:	2b08      	cmp	r3, #8
 800c21c:	d10b      	bne.n	800c236 <_printf_i+0x142>
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	07df      	lsls	r7, r3, #31
 800c222:	d508      	bpl.n	800c236 <_printf_i+0x142>
 800c224:	6923      	ldr	r3, [r4, #16]
 800c226:	6861      	ldr	r1, [r4, #4]
 800c228:	4299      	cmp	r1, r3
 800c22a:	bfde      	ittt	le
 800c22c:	2330      	movle	r3, #48	@ 0x30
 800c22e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c232:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c236:	1b92      	subs	r2, r2, r6
 800c238:	6122      	str	r2, [r4, #16]
 800c23a:	f8cd a000 	str.w	sl, [sp]
 800c23e:	464b      	mov	r3, r9
 800c240:	aa03      	add	r2, sp, #12
 800c242:	4621      	mov	r1, r4
 800c244:	4640      	mov	r0, r8
 800c246:	f7ff fee7 	bl	800c018 <_printf_common>
 800c24a:	3001      	adds	r0, #1
 800c24c:	d14a      	bne.n	800c2e4 <_printf_i+0x1f0>
 800c24e:	f04f 30ff 	mov.w	r0, #4294967295
 800c252:	b004      	add	sp, #16
 800c254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	f043 0320 	orr.w	r3, r3, #32
 800c25e:	6023      	str	r3, [r4, #0]
 800c260:	4832      	ldr	r0, [pc, #200]	@ (800c32c <_printf_i+0x238>)
 800c262:	2778      	movs	r7, #120	@ 0x78
 800c264:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c268:	6823      	ldr	r3, [r4, #0]
 800c26a:	6831      	ldr	r1, [r6, #0]
 800c26c:	061f      	lsls	r7, r3, #24
 800c26e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c272:	d402      	bmi.n	800c27a <_printf_i+0x186>
 800c274:	065f      	lsls	r7, r3, #25
 800c276:	bf48      	it	mi
 800c278:	b2ad      	uxthmi	r5, r5
 800c27a:	6031      	str	r1, [r6, #0]
 800c27c:	07d9      	lsls	r1, r3, #31
 800c27e:	bf44      	itt	mi
 800c280:	f043 0320 	orrmi.w	r3, r3, #32
 800c284:	6023      	strmi	r3, [r4, #0]
 800c286:	b11d      	cbz	r5, 800c290 <_printf_i+0x19c>
 800c288:	2310      	movs	r3, #16
 800c28a:	e7ad      	b.n	800c1e8 <_printf_i+0xf4>
 800c28c:	4826      	ldr	r0, [pc, #152]	@ (800c328 <_printf_i+0x234>)
 800c28e:	e7e9      	b.n	800c264 <_printf_i+0x170>
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	f023 0320 	bic.w	r3, r3, #32
 800c296:	6023      	str	r3, [r4, #0]
 800c298:	e7f6      	b.n	800c288 <_printf_i+0x194>
 800c29a:	4616      	mov	r6, r2
 800c29c:	e7bd      	b.n	800c21a <_printf_i+0x126>
 800c29e:	6833      	ldr	r3, [r6, #0]
 800c2a0:	6825      	ldr	r5, [r4, #0]
 800c2a2:	6961      	ldr	r1, [r4, #20]
 800c2a4:	1d18      	adds	r0, r3, #4
 800c2a6:	6030      	str	r0, [r6, #0]
 800c2a8:	062e      	lsls	r6, r5, #24
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	d501      	bpl.n	800c2b2 <_printf_i+0x1be>
 800c2ae:	6019      	str	r1, [r3, #0]
 800c2b0:	e002      	b.n	800c2b8 <_printf_i+0x1c4>
 800c2b2:	0668      	lsls	r0, r5, #25
 800c2b4:	d5fb      	bpl.n	800c2ae <_printf_i+0x1ba>
 800c2b6:	8019      	strh	r1, [r3, #0]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	6123      	str	r3, [r4, #16]
 800c2bc:	4616      	mov	r6, r2
 800c2be:	e7bc      	b.n	800c23a <_printf_i+0x146>
 800c2c0:	6833      	ldr	r3, [r6, #0]
 800c2c2:	1d1a      	adds	r2, r3, #4
 800c2c4:	6032      	str	r2, [r6, #0]
 800c2c6:	681e      	ldr	r6, [r3, #0]
 800c2c8:	6862      	ldr	r2, [r4, #4]
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7f4 f81f 	bl	8000310 <memchr>
 800c2d2:	b108      	cbz	r0, 800c2d8 <_printf_i+0x1e4>
 800c2d4:	1b80      	subs	r0, r0, r6
 800c2d6:	6060      	str	r0, [r4, #4]
 800c2d8:	6863      	ldr	r3, [r4, #4]
 800c2da:	6123      	str	r3, [r4, #16]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2e2:	e7aa      	b.n	800c23a <_printf_i+0x146>
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	4632      	mov	r2, r6
 800c2e8:	4649      	mov	r1, r9
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	47d0      	blx	sl
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	d0ad      	beq.n	800c24e <_printf_i+0x15a>
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	079b      	lsls	r3, r3, #30
 800c2f6:	d413      	bmi.n	800c320 <_printf_i+0x22c>
 800c2f8:	68e0      	ldr	r0, [r4, #12]
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	4298      	cmp	r0, r3
 800c2fe:	bfb8      	it	lt
 800c300:	4618      	movlt	r0, r3
 800c302:	e7a6      	b.n	800c252 <_printf_i+0x15e>
 800c304:	2301      	movs	r3, #1
 800c306:	4632      	mov	r2, r6
 800c308:	4649      	mov	r1, r9
 800c30a:	4640      	mov	r0, r8
 800c30c:	47d0      	blx	sl
 800c30e:	3001      	adds	r0, #1
 800c310:	d09d      	beq.n	800c24e <_printf_i+0x15a>
 800c312:	3501      	adds	r5, #1
 800c314:	68e3      	ldr	r3, [r4, #12]
 800c316:	9903      	ldr	r1, [sp, #12]
 800c318:	1a5b      	subs	r3, r3, r1
 800c31a:	42ab      	cmp	r3, r5
 800c31c:	dcf2      	bgt.n	800c304 <_printf_i+0x210>
 800c31e:	e7eb      	b.n	800c2f8 <_printf_i+0x204>
 800c320:	2500      	movs	r5, #0
 800c322:	f104 0619 	add.w	r6, r4, #25
 800c326:	e7f5      	b.n	800c314 <_printf_i+0x220>
 800c328:	0800cb49 	.word	0x0800cb49
 800c32c:	0800cb5a 	.word	0x0800cb5a

0800c330 <__sflush_r>:
 800c330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c338:	0716      	lsls	r6, r2, #28
 800c33a:	4605      	mov	r5, r0
 800c33c:	460c      	mov	r4, r1
 800c33e:	d454      	bmi.n	800c3ea <__sflush_r+0xba>
 800c340:	684b      	ldr	r3, [r1, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	dc02      	bgt.n	800c34c <__sflush_r+0x1c>
 800c346:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c348:	2b00      	cmp	r3, #0
 800c34a:	dd48      	ble.n	800c3de <__sflush_r+0xae>
 800c34c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c34e:	2e00      	cmp	r6, #0
 800c350:	d045      	beq.n	800c3de <__sflush_r+0xae>
 800c352:	2300      	movs	r3, #0
 800c354:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c358:	682f      	ldr	r7, [r5, #0]
 800c35a:	6a21      	ldr	r1, [r4, #32]
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	d030      	beq.n	800c3c2 <__sflush_r+0x92>
 800c360:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	0759      	lsls	r1, r3, #29
 800c366:	d505      	bpl.n	800c374 <__sflush_r+0x44>
 800c368:	6863      	ldr	r3, [r4, #4]
 800c36a:	1ad2      	subs	r2, r2, r3
 800c36c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c36e:	b10b      	cbz	r3, 800c374 <__sflush_r+0x44>
 800c370:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c372:	1ad2      	subs	r2, r2, r3
 800c374:	2300      	movs	r3, #0
 800c376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c378:	6a21      	ldr	r1, [r4, #32]
 800c37a:	4628      	mov	r0, r5
 800c37c:	47b0      	blx	r6
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	d106      	bne.n	800c392 <__sflush_r+0x62>
 800c384:	6829      	ldr	r1, [r5, #0]
 800c386:	291d      	cmp	r1, #29
 800c388:	d82b      	bhi.n	800c3e2 <__sflush_r+0xb2>
 800c38a:	4a2a      	ldr	r2, [pc, #168]	@ (800c434 <__sflush_r+0x104>)
 800c38c:	40ca      	lsrs	r2, r1
 800c38e:	07d6      	lsls	r6, r2, #31
 800c390:	d527      	bpl.n	800c3e2 <__sflush_r+0xb2>
 800c392:	2200      	movs	r2, #0
 800c394:	6062      	str	r2, [r4, #4]
 800c396:	04d9      	lsls	r1, r3, #19
 800c398:	6922      	ldr	r2, [r4, #16]
 800c39a:	6022      	str	r2, [r4, #0]
 800c39c:	d504      	bpl.n	800c3a8 <__sflush_r+0x78>
 800c39e:	1c42      	adds	r2, r0, #1
 800c3a0:	d101      	bne.n	800c3a6 <__sflush_r+0x76>
 800c3a2:	682b      	ldr	r3, [r5, #0]
 800c3a4:	b903      	cbnz	r3, 800c3a8 <__sflush_r+0x78>
 800c3a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3aa:	602f      	str	r7, [r5, #0]
 800c3ac:	b1b9      	cbz	r1, 800c3de <__sflush_r+0xae>
 800c3ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3b2:	4299      	cmp	r1, r3
 800c3b4:	d002      	beq.n	800c3bc <__sflush_r+0x8c>
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f7ff fbf4 	bl	800bba4 <_free_r>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3c0:	e00d      	b.n	800c3de <__sflush_r+0xae>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	47b0      	blx	r6
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	1c50      	adds	r0, r2, #1
 800c3cc:	d1c9      	bne.n	800c362 <__sflush_r+0x32>
 800c3ce:	682b      	ldr	r3, [r5, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d0c6      	beq.n	800c362 <__sflush_r+0x32>
 800c3d4:	2b1d      	cmp	r3, #29
 800c3d6:	d001      	beq.n	800c3dc <__sflush_r+0xac>
 800c3d8:	2b16      	cmp	r3, #22
 800c3da:	d11e      	bne.n	800c41a <__sflush_r+0xea>
 800c3dc:	602f      	str	r7, [r5, #0]
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e022      	b.n	800c428 <__sflush_r+0xf8>
 800c3e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3e6:	b21b      	sxth	r3, r3
 800c3e8:	e01b      	b.n	800c422 <__sflush_r+0xf2>
 800c3ea:	690f      	ldr	r7, [r1, #16]
 800c3ec:	2f00      	cmp	r7, #0
 800c3ee:	d0f6      	beq.n	800c3de <__sflush_r+0xae>
 800c3f0:	0793      	lsls	r3, r2, #30
 800c3f2:	680e      	ldr	r6, [r1, #0]
 800c3f4:	bf08      	it	eq
 800c3f6:	694b      	ldreq	r3, [r1, #20]
 800c3f8:	600f      	str	r7, [r1, #0]
 800c3fa:	bf18      	it	ne
 800c3fc:	2300      	movne	r3, #0
 800c3fe:	eba6 0807 	sub.w	r8, r6, r7
 800c402:	608b      	str	r3, [r1, #8]
 800c404:	f1b8 0f00 	cmp.w	r8, #0
 800c408:	dde9      	ble.n	800c3de <__sflush_r+0xae>
 800c40a:	6a21      	ldr	r1, [r4, #32]
 800c40c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c40e:	4643      	mov	r3, r8
 800c410:	463a      	mov	r2, r7
 800c412:	4628      	mov	r0, r5
 800c414:	47b0      	blx	r6
 800c416:	2800      	cmp	r0, #0
 800c418:	dc08      	bgt.n	800c42c <__sflush_r+0xfc>
 800c41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c422:	81a3      	strh	r3, [r4, #12]
 800c424:	f04f 30ff 	mov.w	r0, #4294967295
 800c428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c42c:	4407      	add	r7, r0
 800c42e:	eba8 0800 	sub.w	r8, r8, r0
 800c432:	e7e7      	b.n	800c404 <__sflush_r+0xd4>
 800c434:	20400001 	.word	0x20400001

0800c438 <_fflush_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	690b      	ldr	r3, [r1, #16]
 800c43c:	4605      	mov	r5, r0
 800c43e:	460c      	mov	r4, r1
 800c440:	b913      	cbnz	r3, 800c448 <_fflush_r+0x10>
 800c442:	2500      	movs	r5, #0
 800c444:	4628      	mov	r0, r5
 800c446:	bd38      	pop	{r3, r4, r5, pc}
 800c448:	b118      	cbz	r0, 800c452 <_fflush_r+0x1a>
 800c44a:	6a03      	ldr	r3, [r0, #32]
 800c44c:	b90b      	cbnz	r3, 800c452 <_fflush_r+0x1a>
 800c44e:	f7ff f9af 	bl	800b7b0 <__sinit>
 800c452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0f3      	beq.n	800c442 <_fflush_r+0xa>
 800c45a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c45c:	07d0      	lsls	r0, r2, #31
 800c45e:	d404      	bmi.n	800c46a <_fflush_r+0x32>
 800c460:	0599      	lsls	r1, r3, #22
 800c462:	d402      	bmi.n	800c46a <_fflush_r+0x32>
 800c464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c466:	f7ff fb9a 	bl	800bb9e <__retarget_lock_acquire_recursive>
 800c46a:	4628      	mov	r0, r5
 800c46c:	4621      	mov	r1, r4
 800c46e:	f7ff ff5f 	bl	800c330 <__sflush_r>
 800c472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c474:	07da      	lsls	r2, r3, #31
 800c476:	4605      	mov	r5, r0
 800c478:	d4e4      	bmi.n	800c444 <_fflush_r+0xc>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	059b      	lsls	r3, r3, #22
 800c47e:	d4e1      	bmi.n	800c444 <_fflush_r+0xc>
 800c480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c482:	f7ff fb8d 	bl	800bba0 <__retarget_lock_release_recursive>
 800c486:	e7dd      	b.n	800c444 <_fflush_r+0xc>

0800c488 <__swhatbuf_r>:
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	460c      	mov	r4, r1
 800c48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c490:	2900      	cmp	r1, #0
 800c492:	b096      	sub	sp, #88	@ 0x58
 800c494:	4615      	mov	r5, r2
 800c496:	461e      	mov	r6, r3
 800c498:	da0d      	bge.n	800c4b6 <__swhatbuf_r+0x2e>
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c4a0:	f04f 0100 	mov.w	r1, #0
 800c4a4:	bf14      	ite	ne
 800c4a6:	2340      	movne	r3, #64	@ 0x40
 800c4a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	6031      	str	r1, [r6, #0]
 800c4b0:	602b      	str	r3, [r5, #0]
 800c4b2:	b016      	add	sp, #88	@ 0x58
 800c4b4:	bd70      	pop	{r4, r5, r6, pc}
 800c4b6:	466a      	mov	r2, sp
 800c4b8:	f000 f848 	bl	800c54c <_fstat_r>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	dbec      	blt.n	800c49a <__swhatbuf_r+0x12>
 800c4c0:	9901      	ldr	r1, [sp, #4]
 800c4c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c4c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c4ca:	4259      	negs	r1, r3
 800c4cc:	4159      	adcs	r1, r3
 800c4ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4d2:	e7eb      	b.n	800c4ac <__swhatbuf_r+0x24>

0800c4d4 <__smakebuf_r>:
 800c4d4:	898b      	ldrh	r3, [r1, #12]
 800c4d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4d8:	079d      	lsls	r5, r3, #30
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460c      	mov	r4, r1
 800c4de:	d507      	bpl.n	800c4f0 <__smakebuf_r+0x1c>
 800c4e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	6123      	str	r3, [r4, #16]
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	6163      	str	r3, [r4, #20]
 800c4ec:	b003      	add	sp, #12
 800c4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f0:	ab01      	add	r3, sp, #4
 800c4f2:	466a      	mov	r2, sp
 800c4f4:	f7ff ffc8 	bl	800c488 <__swhatbuf_r>
 800c4f8:	9f00      	ldr	r7, [sp, #0]
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	4639      	mov	r1, r7
 800c4fe:	4630      	mov	r0, r6
 800c500:	f7ff fbbc 	bl	800bc7c <_malloc_r>
 800c504:	b948      	cbnz	r0, 800c51a <__smakebuf_r+0x46>
 800c506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c50a:	059a      	lsls	r2, r3, #22
 800c50c:	d4ee      	bmi.n	800c4ec <__smakebuf_r+0x18>
 800c50e:	f023 0303 	bic.w	r3, r3, #3
 800c512:	f043 0302 	orr.w	r3, r3, #2
 800c516:	81a3      	strh	r3, [r4, #12]
 800c518:	e7e2      	b.n	800c4e0 <__smakebuf_r+0xc>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	6020      	str	r0, [r4, #0]
 800c51e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	9b01      	ldr	r3, [sp, #4]
 800c526:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c52a:	b15b      	cbz	r3, 800c544 <__smakebuf_r+0x70>
 800c52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c530:	4630      	mov	r0, r6
 800c532:	f000 f81d 	bl	800c570 <_isatty_r>
 800c536:	b128      	cbz	r0, 800c544 <__smakebuf_r+0x70>
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	f023 0303 	bic.w	r3, r3, #3
 800c53e:	f043 0301 	orr.w	r3, r3, #1
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	431d      	orrs	r5, r3
 800c548:	81a5      	strh	r5, [r4, #12]
 800c54a:	e7cf      	b.n	800c4ec <__smakebuf_r+0x18>

0800c54c <_fstat_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d07      	ldr	r5, [pc, #28]	@ (800c56c <_fstat_r+0x20>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	4611      	mov	r1, r2
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	f7f5 f8aa 	bl	80016b2 <_fstat>
 800c55e:	1c43      	adds	r3, r0, #1
 800c560:	d102      	bne.n	800c568 <_fstat_r+0x1c>
 800c562:	682b      	ldr	r3, [r5, #0]
 800c564:	b103      	cbz	r3, 800c568 <_fstat_r+0x1c>
 800c566:	6023      	str	r3, [r4, #0]
 800c568:	bd38      	pop	{r3, r4, r5, pc}
 800c56a:	bf00      	nop
 800c56c:	240015bc 	.word	0x240015bc

0800c570 <_isatty_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d06      	ldr	r5, [pc, #24]	@ (800c58c <_isatty_r+0x1c>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	602b      	str	r3, [r5, #0]
 800c57c:	f7f5 f8a9 	bl	80016d2 <_isatty>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_isatty_r+0x1a>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_isatty_r+0x1a>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	240015bc 	.word	0x240015bc

0800c590 <_sbrk_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4d06      	ldr	r5, [pc, #24]	@ (800c5ac <_sbrk_r+0x1c>)
 800c594:	2300      	movs	r3, #0
 800c596:	4604      	mov	r4, r0
 800c598:	4608      	mov	r0, r1
 800c59a:	602b      	str	r3, [r5, #0]
 800c59c:	f7f5 f8b2 	bl	8001704 <_sbrk>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_sbrk_r+0x1a>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_sbrk_r+0x1a>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	240015bc 	.word	0x240015bc

0800c5b0 <_init>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	bf00      	nop
 800c5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b6:	bc08      	pop	{r3}
 800c5b8:	469e      	mov	lr, r3
 800c5ba:	4770      	bx	lr

0800c5bc <_fini>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	bf00      	nop
 800c5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c2:	bc08      	pop	{r3}
 800c5c4:	469e      	mov	lr, r3
 800c5c6:	4770      	bx	lr
