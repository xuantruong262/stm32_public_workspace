
Display_TFT_320x240.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f188  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  0800f458  0800f458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080102b8  080102b8  000112b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080102c0  080102c0  000112c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080102c4  080102c4  000112c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  080102c8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00028ee4  24000070  08010338  00012070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24028f54  08010338  00012f54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015183  00000000  00000000  0001209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003732  00000000  00000000  00027221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001088  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c6b  00000000  00000000  0002b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003610d  00000000  00000000  0002c64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ba5c  00000000  00000000  00062758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014354a  00000000  00000000  0007e1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c16fe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004afc  00000000  00000000  001c1744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008c  00000000  00000000  001c6240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f440 	.word	0x0800f440

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	0800f440 	.word	0x0800f440

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <SendCommand>:

// This define for image
#define w_per_chunk 16

void SendCommand(uint8_t cmd)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_TransMode_GPIO_Port, TFT_TransMode_Pin, GPIO_PIN_RESET); // Command mode
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c0:	480c      	ldr	r0, [pc, #48]	@ (80003f4 <SendCommand+0x44>)
 80003c2:	f006 fd7d 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003cc:	4809      	ldr	r0, [pc, #36]	@ (80003f4 <SendCommand+0x44>)
 80003ce:	f006 fd77 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80003d2:	1df9      	adds	r1, r7, #7
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295
 80003d8:	2201      	movs	r2, #1
 80003da:	4807      	ldr	r0, [pc, #28]	@ (80003f8 <SendCommand+0x48>)
 80003dc:	f009 f8f6 	bl	80095cc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003e6:	4803      	ldr	r0, [pc, #12]	@ (80003f4 <SendCommand+0x44>)
 80003e8:	f006 fd6a 	bl	8006ec0 <HAL_GPIO_WritePin>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	58021000 	.word	0x58021000
 80003f8:	2402791c 	.word	0x2402791c

080003fc <SendData>:

void SendData(uint8_t* data, uint16_t size)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(TFT_TransMode_GPIO_Port, TFT_TransMode_Pin, GPIO_PIN_SET); // Data mode
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040e:	480d      	ldr	r0, [pc, #52]	@ (8000444 <SendData+0x48>)
 8000410:	f006 fd56 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800041a:	480a      	ldr	r0, [pc, #40]	@ (8000444 <SendData+0x48>)
 800041c:	f006 fd50 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, HAL_MAX_DELAY);
 8000420:	887a      	ldrh	r2, [r7, #2]
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	4807      	ldr	r0, [pc, #28]	@ (8000448 <SendData+0x4c>)
 800042a:	f009 f8cf 	bl	80095cc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000434:	4803      	ldr	r0, [pc, #12]	@ (8000444 <SendData+0x48>)
 8000436:	f006 fd43 	bl	8006ec0 <HAL_GPIO_WritePin>
}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	58021000 	.word	0x58021000
 8000448:	2402791c 	.word	0x2402791c

0800044c <Reset>:

void Reset(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_RS_GPIO_Port, TFT_RS_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000456:	4808      	ldr	r0, [pc, #32]	@ (8000478 <Reset+0x2c>)
 8000458:	f006 fd32 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800045c:	200a      	movs	r0, #10
 800045e:	f003 fb97 	bl	8003b90 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RS_GPIO_Port, TFT_RS_Pin, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000468:	4803      	ldr	r0, [pc, #12]	@ (8000478 <Reset+0x2c>)
 800046a:	f006 fd29 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800046e:	200a      	movs	r0, #10
 8000470:	f003 fb8e 	bl	8003b90 <HAL_Delay>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	58021000 	.word	0x58021000

0800047c <writedata>:

void writedata(uint8_t dt)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_TransMode_GPIO_Port, TFT_TransMode_Pin, GPIO_PIN_SET); // Data mode
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800048c:	480c      	ldr	r0, [pc, #48]	@ (80004c0 <writedata+0x44>)
 800048e:	f006 fd17 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000498:	4809      	ldr	r0, [pc, #36]	@ (80004c0 <writedata+0x44>)
 800049a:	f006 fd11 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &dt, 1, HAL_MAX_DELAY);
 800049e:	1df9      	adds	r1, r7, #7
 80004a0:	f04f 33ff 	mov.w	r3, #4294967295
 80004a4:	2201      	movs	r2, #1
 80004a6:	4807      	ldr	r0, [pc, #28]	@ (80004c4 <writedata+0x48>)
 80004a8:	f009 f890 	bl	80095cc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004b2:	4803      	ldr	r0, [pc, #12]	@ (80004c0 <writedata+0x44>)
 80004b4:	f006 fd04 	bl	8006ec0 <HAL_GPIO_WritePin>
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	58021000 	.word	0x58021000
 80004c4:	2402791c 	.word	0x2402791c

080004c8 <LCD_Init>:

void LCD_Init(uint8_t IsHorizol)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]

    Reset();
 80004d2:	f7ff ffbb 	bl	800044c <Reset>
    // Software reset
    SendCommand(0x01);
 80004d6:	2001      	movs	r0, #1
 80004d8:	f7ff ff6a 	bl	80003b0 <SendCommand>
    HAL_Delay(150);
 80004dc:	2096      	movs	r0, #150	@ 0x96
 80004de:	f003 fb57 	bl	8003b90 <HAL_Delay>
    // Sleep out
    SendCommand(0x11);
 80004e2:	2011      	movs	r0, #17
 80004e4:	f7ff ff64 	bl	80003b0 <SendCommand>
    HAL_Delay(150);
 80004e8:	2096      	movs	r0, #150	@ 0x96
 80004ea:	f003 fb51 	bl	8003b90 <HAL_Delay>
    // Interface Pixel Format
    SendCommand(0x3A);
 80004ee:	203a      	movs	r0, #58	@ 0x3a
 80004f0:	f7ff ff5e 	bl	80003b0 <SendCommand>
    uint8_t data = 0x55; // 16-bit color
 80004f4:	2355      	movs	r3, #85	@ 0x55
 80004f6:	73fb      	strb	r3, [r7, #15]
    SendData(&data, 1);
 80004f8:	f107 030f 	add.w	r3, r7, #15
 80004fc:	2101      	movs	r1, #1
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff7c 	bl	80003fc <SendData>
    // Gamma
    SendCommand(ILI9341_GAMMASET); // Gamma curve selected
 8000504:	2026      	movs	r0, #38	@ 0x26
 8000506:	f7ff ff53 	bl	80003b0 <SendCommand>
    writedata(2);
 800050a:	2002      	movs	r0, #2
 800050c:	f7ff ffb6 	bl	800047c <writedata>
    SendCommand(ILI9341_GAMMASET); // Gamma curve selected
 8000510:	2026      	movs	r0, #38	@ 0x26
 8000512:	f7ff ff4d 	bl	80003b0 <SendCommand>
    writedata(1);
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff ffb0 	bl	800047c <writedata>

    // Coordinate display
    SendCommand(0x36);
 800051c:	2036      	movs	r0, #54	@ 0x36
 800051e:	f7ff ff47 	bl	80003b0 <SendCommand>
    uint8_t ctl = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	73bb      	strb	r3, [r7, #14]
    ctl = IsHorizol ? 0xe8 : 0x00;
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <LCD_Init+0x68>
 800052c:	23e8      	movs	r3, #232	@ 0xe8
 800052e:	e000      	b.n	8000532 <LCD_Init+0x6a>
 8000530:	2300      	movs	r3, #0
 8000532:	73bb      	strb	r3, [r7, #14]
    //    ctl = IsHorizol ? 0x60 : 0x00;
    SendData(&ctl, 1);
 8000534:	f107 030e 	add.w	r3, r7, #14
 8000538:	2101      	movs	r1, #1
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff ff5e 	bl	80003fc <SendData>

    //Litle endian


    // Display ON
    SendCommand(0x29);
 8000540:	2029      	movs	r0, #41	@ 0x29
 8000542:	f7ff ff35 	bl	80003b0 <SendCommand>
    HAL_Delay(10);
 8000546:	200a      	movs	r0, #10
 8000548:	f003 fb22 	bl	8003b90 <HAL_Delay>
    SendCommand(0xf6);
 800054c:	20f6      	movs	r0, #246	@ 0xf6
 800054e:	f7ff ff2f 	bl	80003b0 <SendCommand>
    writedata(0x0);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ff92 	bl	800047c <writedata>
    writedata(0x0);
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff ff8f 	bl	800047c <writedata>
    writedata(0x0);
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ff8c 	bl	800047c <writedata>
    writedata(0x0);
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff ff89 	bl	800047c <writedata>
    writedata(0x0);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff86 	bl	800047c <writedata>
    writedata(0x20);
 8000570:	2020      	movs	r0, #32
 8000572:	f7ff ff83 	bl	800047c <writedata>
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <FillScreen>:

// Fill entire screen by 1 color
void FillScreen(uint16_t color, uint16_t end_x, uint16_t end_y)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
 800058a:	460b      	mov	r3, r1
 800058c:	80bb      	strh	r3, [r7, #4]
 800058e:	4613      	mov	r3, r2
 8000590:	807b      	strh	r3, [r7, #2]


    uint8_t data[2] = {color >> 8, color & 0xFF};
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	753b      	strb	r3, [r7, #20]
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	757b      	strb	r3, [r7, #21]
    uint16_t w = end_x;
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	837b      	strh	r3, [r7, #26]
    uint16_t h = end_y;
 80005a6:	887b      	ldrh	r3, [r7, #2]
 80005a8:	833b      	strh	r3, [r7, #24]
    SendCommand(0x2A);                                                  // Column addr set
 80005aa:	202a      	movs	r0, #42	@ 0x2a
 80005ac:	f7ff ff00 	bl	80003b0 <SendCommand>
    uint8_t col[] = {0x00, 0x00, (end_x - 1) >> 8, (end_x - 1) & 0xFF}; // x0 to x127
 80005b0:	2300      	movs	r3, #0
 80005b2:	743b      	strb	r3, [r7, #16]
 80005b4:	2300      	movs	r3, #0
 80005b6:	747b      	strb	r3, [r7, #17]
 80005b8:	88bb      	ldrh	r3, [r7, #4]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	121b      	asrs	r3, r3, #8
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	74bb      	strb	r3, [r7, #18]
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	3b01      	subs	r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	74fb      	strb	r3, [r7, #19]
    SendData(col, 4);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff12 	bl	80003fc <SendData>

    SendCommand(0x2B);                                                  // Row addr set
 80005d8:	202b      	movs	r0, #43	@ 0x2b
 80005da:	f7ff fee9 	bl	80003b0 <SendCommand>
    uint8_t row[] = {0x00, 0x00, (end_y - 1) >> 8, (end_y - 1) & 0xFF}; // y0 to y159
 80005de:	2300      	movs	r3, #0
 80005e0:	733b      	strb	r3, [r7, #12]
 80005e2:	2300      	movs	r3, #0
 80005e4:	737b      	strb	r3, [r7, #13]
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	121b      	asrs	r3, r3, #8
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	73bb      	strb	r3, [r7, #14]
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	3b01      	subs	r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	73fb      	strb	r3, [r7, #15]
    SendData(row, 4);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2104      	movs	r1, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fefb 	bl	80003fc <SendData>

    SendCommand(0x2C); // Memory write
 8000606:	202c      	movs	r0, #44	@ 0x2c
 8000608:	f7ff fed2 	bl	80003b0 <SendCommand>

    HAL_GPIO_WritePin(TFT_TransMode_GPIO_Port, TFT_TransMode_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000612:	4814      	ldr	r0, [pc, #80]	@ (8000664 <FillScreen+0xe4>)
 8000614:	f006 fc54 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800061e:	4811      	ldr	r0, [pc, #68]	@ (8000664 <FillScreen+0xe4>)
 8000620:	f006 fc4e 	bl	8006ec0 <HAL_GPIO_WritePin>
    for (int i = 0; i < w * h; i++)
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
 8000628:	e00a      	b.n	8000640 <FillScreen+0xc0>
    {
        HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 800062a:	f107 0114 	add.w	r1, r7, #20
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	2202      	movs	r2, #2
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <FillScreen+0xe8>)
 8000636:	f008 ffc9 	bl	80095cc <HAL_SPI_Transmit>
    for (int i = 0; i < w * h; i++)
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3301      	adds	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	8b7b      	ldrh	r3, [r7, #26]
 8000642:	8b3a      	ldrh	r2, [r7, #24]
 8000644:	fb02 f303 	mul.w	r3, r2, r3
 8000648:	69fa      	ldr	r2, [r7, #28]
 800064a:	429a      	cmp	r2, r3
 800064c:	dbed      	blt.n	800062a <FillScreen+0xaa>
    }

    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000654:	4803      	ldr	r0, [pc, #12]	@ (8000664 <FillScreen+0xe4>)
 8000656:	f006 fc33 	bl	8006ec0 <HAL_GPIO_WritePin>

}
 800065a:	bf00      	nop
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58021000 	.word	0x58021000
 8000668:	2402791c 	.word	0x2402791c

0800066c <TFT_AdjustGamma>:

void TFT_AdjustGamma(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b089      	sub	sp, #36	@ 0x24
 8000670:	af00      	add	r7, sp, #0
    SendCommand(0xE0); // Positive Gamma Correction
 8000672:	20e0      	movs	r0, #224	@ 0xe0
 8000674:	f7ff fe9c 	bl	80003b0 <SendCommand>
    uint8_t gamma_pos[] = {0x1F, 0x35, 0x2F, 0x10, 0x12, 0x0A, 0x50, 0xF5, 0x3A, 0x0A, 0x12, 0x05, 0x12, 0x0C, 0x00};
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <TFT_AdjustGamma+0x54>)
 800067a:	f107 0410 	add.w	r4, r7, #16
 800067e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000680:	c407      	stmia	r4!, {r0, r1, r2}
 8000682:	8023      	strh	r3, [r4, #0]
 8000684:	3402      	adds	r4, #2
 8000686:	0c1b      	lsrs	r3, r3, #16
 8000688:	7023      	strb	r3, [r4, #0]
    SendData(gamma_pos, sizeof(gamma_pos));
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	210f      	movs	r1, #15
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff feb3 	bl	80003fc <SendData>

    SendCommand(0xE1); // Negative Gamma Correction
 8000696:	20e1      	movs	r0, #225	@ 0xe1
 8000698:	f7ff fe8a 	bl	80003b0 <SendCommand>
    uint8_t gamma_neg[] = {0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F};
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <TFT_AdjustGamma+0x58>)
 800069e:	463c      	mov	r4, r7
 80006a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a2:	c407      	stmia	r4!, {r0, r1, r2}
 80006a4:	8023      	strh	r3, [r4, #0]
 80006a6:	3402      	adds	r4, #2
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	7023      	strb	r3, [r4, #0]
    SendData(gamma_neg, sizeof(gamma_neg));
 80006ac:	463b      	mov	r3, r7
 80006ae:	210f      	movs	r1, #15
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fea3 	bl	80003fc <SendData>
}
 80006b6:	bf00      	nop
 80006b8:	3724      	adds	r7, #36	@ 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd90      	pop	{r4, r7, pc}
 80006be:	bf00      	nop
 80006c0:	0800f458 	.word	0x0800f458
 80006c4:	0800f468 	.word	0x0800f468

080006c8 <Draw_PixData>:
    }
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
}

void Draw_PixData(uint16_t pos_x, uint16_t pos_y, uint16_t width, uint16_t height, uint16_t* data_frame)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b089      	sub	sp, #36	@ 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4604      	mov	r4, r0
 80006d0:	4608      	mov	r0, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4623      	mov	r3, r4
 80006d8:	80fb      	strh	r3, [r7, #6]
 80006da:	4603      	mov	r3, r0
 80006dc:	80bb      	strh	r3, [r7, #4]
 80006de:	460b      	mov	r3, r1
 80006e0:	807b      	strh	r3, [r7, #2]
 80006e2:	4613      	mov	r3, r2
 80006e4:	803b      	strh	r3, [r7, #0]
#ifdef ILI9341
    SendCommand(0x2A); // Column addr set
 80006e6:	202a      	movs	r0, #42	@ 0x2a
 80006e8:	f7ff fe62 	bl	80003b0 <SendCommand>
    uint8_t col[] = {0 >> 8, 0 & 0xff, ((320 - 1) >> 8), ((320 - 1) & 0xff)}; // x0 to 319
 80006ec:	4b3d      	ldr	r3, [pc, #244]	@ (80007e4 <Draw_PixData+0x11c>)
 80006ee:	613b      	str	r3, [r7, #16]
    SendData(col, 4);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	2104      	movs	r1, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fe80 	bl	80003fc <SendData>
    SendCommand(0x2B);
 80006fc:	202b      	movs	r0, #43	@ 0x2b
 80006fe:	f7ff fe57 	bl	80003b0 <SendCommand>
    uint8_t row[] = {0 >> 8, 0 & 0xff, ((240 - 1) >> 8), ((240 - 1) & 0xff)}; // y0 to 239
 8000702:	f04f 436f 	mov.w	r3, #4009754624	@ 0xef000000
 8000706:	60fb      	str	r3, [r7, #12]
    SendData(row, 4);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2104      	movs	r1, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fe74 	bl	80003fc <SendData>
    uint8_t row[] = {0x00, pos_y, 0x00, pos_y + height - 1}; // y0 to y159
    SendData(row, 4);
#endif


    SendCommand(0x2C); // Memory write
 8000714:	202c      	movs	r0, #44	@ 0x2c
 8000716:	f7ff fe4b 	bl	80003b0 <SendCommand>
    HAL_GPIO_WritePin(TFT_TransMode_GPIO_Port, TFT_TransMode_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000720:	4831      	ldr	r0, [pc, #196]	@ (80007e8 <Draw_PixData+0x120>)
 8000722:	f006 fbcd 	bl	8006ec0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800072c:	482e      	ldr	r0, [pc, #184]	@ (80007e8 <Draw_PixData+0x120>)
 800072e:	f006 fbc7 	bl	8006ec0 <HAL_GPIO_WritePin>
//             da[1] = (*(data_frame + i*width + j) & 0xFF);
//             line[j] =  (da[0] << 8)  | (da[1]) ;
//        }
//        HAL_SPI_Transmit(&hspi2, (uint8_t*)line, 320*2, HAL_MAX_DELAY);
//    }
    uint32_t total_byte = width * height * 2;
 8000732:	887b      	ldrh	r3, [r7, #2]
 8000734:	883a      	ldrh	r2, [r7, #0]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
    uint8_t words_pack = (total_byte + 65535) / 65535;
 800073e:	69ba      	ldr	r2, [r7, #24]
 8000740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000744:	4413      	add	r3, r2
 8000746:	4a29      	ldr	r2, [pc, #164]	@ (80007ec <Draw_PixData+0x124>)
 8000748:	fba2 2303 	umull	r2, r3, r2, r3
 800074c:	0bdb      	lsrs	r3, r3, #15
 800074e:	75fb      	strb	r3, [r7, #23]

    if(total_byte > 65535){
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000756:	d32d      	bcc.n	80007b4 <Draw_PixData+0xec>
    	for(int  i = 0; i < words_pack ; ++i){
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	e025      	b.n	80007aa <Draw_PixData+0xe2>
    		dma_tx_done_spi2 = 0;
 800075e:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <Draw_PixData+0x128>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
    		HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800076a:	481f      	ldr	r0, [pc, #124]	@ (80007e8 <Draw_PixData+0x120>)
 800076c:	f006 fba8 	bl	8006ec0 <HAL_GPIO_WritePin>
    		HAL_SPI_Transmit_DMA(&hspi2, data_frame + i*(total_byte / (words_pack*2)), total_byte / words_pack);
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	461a      	mov	r2, r3
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	fbb3 f3f2 	udiv	r3, r3, r2
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000786:	18d1      	adds	r1, r2, r3
 8000788:	7dfb      	ldrb	r3, [r7, #23]
 800078a:	69ba      	ldr	r2, [r7, #24]
 800078c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000790:	b29b      	uxth	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	4817      	ldr	r0, [pc, #92]	@ (80007f4 <Draw_PixData+0x12c>)
 8000796:	f009 fc41 	bl	800a01c <HAL_SPI_Transmit_DMA>
            while (!dma_tx_done_spi2);
 800079a:	bf00      	nop
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <Draw_PixData+0x128>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0fb      	beq.n	800079c <Draw_PixData+0xd4>
    	for(int  i = 0; i < words_pack ; ++i){
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	3301      	adds	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	7dfb      	ldrb	r3, [r7, #23]
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	dbd5      	blt.n	800075e <Draw_PixData+0x96>
 80007b2:	e00c      	b.n	80007ce <Draw_PixData+0x106>
    	}
    }
    else{
    	HAL_SPI_Transmit(&hspi2, data_frame, total_byte, HAL_MAX_DELAY);
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80007be:	480d      	ldr	r0, [pc, #52]	@ (80007f4 <Draw_PixData+0x12c>)
 80007c0:	f008 ff04 	bl	80095cc <HAL_SPI_Transmit>
    	while (!dma_tx_done_spi2);
 80007c4:	bf00      	nop
 80007c6:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <Draw_PixData+0x128>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0fb      	beq.n	80007c6 <Draw_PixData+0xfe>
    }
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <Draw_PixData+0x120>)
 80007d6:	f006 fb73 	bl	8006ec0 <HAL_GPIO_WritePin>
}
 80007da:	bf00      	nop
 80007dc:	3724      	adds	r7, #36	@ 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	bf00      	nop
 80007e4:	3f010000 	.word	0x3f010000
 80007e8:	58021000 	.word	0x58021000
 80007ec:	80008001 	.word	0x80008001
 80007f0:	24000000 	.word	0x24000000
 80007f4:	2402791c 	.word	0x2402791c

080007f8 <STM32_in_func>:

BYTE Buff[8192] __attribute__((aligned(4))); // 8192  16384  32768   76800
uint16_t frame_buffer[240][320] __attribute__((aligned(4)));;

UINT STM32_in_func(JDEC* jd, BYTE* buff, UINT nd)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
    UINT rb;
    FIL* dev = (FIL*) jd->device;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000808:	617b      	str	r3, [r7, #20]

    if (buff)
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d008      	beq.n	8000822 <STM32_in_func+0x2a>
    {
        f_read(dev, buff, nd, &rb);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	f00c fe83 	bl	800d524 <f_read>
        return rb;
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	e00d      	b.n	800083e <STM32_in_func+0x46>
    }
    else
    {
        return (f_lseek(dev, f_tell(dev) + nd) == FR_OK) ? nd : 0;
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	699a      	ldr	r2, [r3, #24]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	4619      	mov	r1, r3
 800082c:	6978      	ldr	r0, [r7, #20]
 800082e:	f00d f880 	bl	800d932 <f_lseek>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <STM32_in_func+0x44>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	e000      	b.n	800083e <STM32_in_func+0x46>
 800083c:	2300      	movs	r3, #0
    }
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <STM32_out_func>:

UINT STM32_out_func(

    JDEC* jd, void* bitmap, JRECT* rect)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b08b      	sub	sp, #44	@ 0x2c
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
    jd = jd;

    uint16_t w = rect->right - rect->left + 1;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	885a      	ldrh	r2, [r3, #2]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	b29b      	uxth	r3, r3
 8000860:	3301      	adds	r3, #1
 8000862:	837b      	strh	r3, [r7, #26]
    uint16_t h = rect->bottom - rect->top + 1;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	88da      	ldrh	r2, [r3, #6]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	889b      	ldrh	r3, [r3, #4]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	b29b      	uxth	r3, r3
 8000870:	3301      	adds	r3, #1
 8000872:	833b      	strh	r3, [r7, #24]
    uint8_t* src = (uint8_t*) bitmap;
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	617b      	str	r3, [r7, #20]
    int j = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lo = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	74fb      	strb	r3, [r7, #19]
    uint8_t hi = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	74bb      	strb	r3, [r7, #18]
    for (int i = rect->top; i < rect->bottom + 1; i++)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	889b      	ldrh	r3, [r3, #4]
 8000888:	623b      	str	r3, [r7, #32]
 800088a:	e05d      	b.n	8000948 <STM32_out_func+0x100>
    {
        memcpy(&frame_buffer[i][rect->left], src + j * 32, w * 2);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	019b      	lsls	r3, r3, #6
 800089c:	440b      	add	r3, r1
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4a2f      	ldr	r2, [pc, #188]	@ (8000960 <STM32_out_func+0x118>)
 80008a2:	1898      	adds	r0, r3, r2
 80008a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a6:	015b      	lsls	r3, r3, #5
 80008a8:	461a      	mov	r2, r3
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	1899      	adds	r1, r3, r2
 80008ae:	8b7b      	ldrh	r3, [r7, #26]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	461a      	mov	r2, r3
 80008b4:	f00d ffc5 	bl	800e842 <memcpy>
        for(int k = 0; k < w; k++){
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	e03a      	b.n	8000934 <STM32_out_func+0xec>
        	hi = (frame_buffer[i][rect->left + k] & 0xff);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	18d1      	adds	r1, r2, r3
 80008c8:	4825      	ldr	r0, [pc, #148]	@ (8000960 <STM32_out_func+0x118>)
 80008ca:	6a3a      	ldr	r2, [r7, #32]
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	019b      	lsls	r3, r3, #6
 80008d4:	440b      	add	r3, r1
 80008d6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80008da:	74bb      	strb	r3, [r7, #18]
        	lo = (frame_buffer[i][rect->left + k] >> 8);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	18d1      	adds	r1, r2, r3
 80008e6:	481e      	ldr	r0, [pc, #120]	@ (8000960 <STM32_out_func+0x118>)
 80008e8:	6a3a      	ldr	r2, [r7, #32]
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	440b      	add	r3, r1
 80008f4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	74fb      	strb	r3, [r7, #19]
        	frame_buffer[i][rect->left + k] =  (hi << 8) | lo;
 80008fe:	7cbb      	ldrb	r3, [r7, #18]
 8000900:	b21b      	sxth	r3, r3
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21a      	sxth	r2, r3
 8000906:	7cfb      	ldrb	r3, [r7, #19]
 8000908:	b21b      	sxth	r3, r3
 800090a:	4313      	orrs	r3, r2
 800090c:	b21a      	sxth	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	4419      	add	r1, r3
 8000918:	b294      	uxth	r4, r2
 800091a:	4811      	ldr	r0, [pc, #68]	@ (8000960 <STM32_out_func+0x118>)
 800091c:	6a3a      	ldr	r2, [r7, #32]
 800091e:	4613      	mov	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	019b      	lsls	r3, r3, #6
 8000926:	440b      	add	r3, r1
 8000928:	4622      	mov	r2, r4
 800092a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(int k = 0; k < w; k++){
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3301      	adds	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
 8000934:	8b7b      	ldrh	r3, [r7, #26]
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbc0      	blt.n	80008be <STM32_out_func+0x76>
        }
        j++;
 800093c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093e:	3301      	adds	r3, #1
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = rect->top; i < rect->bottom + 1; i++)
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	3301      	adds	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	88db      	ldrh	r3, [r3, #6]
 800094c:	461a      	mov	r2, r3
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	4293      	cmp	r3, r2
 8000952:	dd9b      	ble.n	800088c <STM32_out_func+0x44>
    }
    // Draw_PixData(rect->left,rect->top,w, h,(uint16_t *)bitmap);
    return 1;
 8000954:	2301      	movs	r3, #1
}
 8000956:	4618      	mov	r0, r3
 8000958:	372c      	adds	r7, #44	@ 0x2c
 800095a:	46bd      	mov	sp, r7
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	bf00      	nop
 8000960:	24002094 	.word	0x24002094

08000964 <STM32_JPEG_DISPLAY>:

uint32_t STM32_JPEG_DISPLAY(FIL* f_Jpeg, const char* filename)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0a4      	sub	sp, #144	@ 0x90
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
    FRESULT Res_FatFs;   // FATFSϵͳ��������ֵ
    JDEC jd;             /* ������Ķ������Ϣ��¼�� */
    JRESULT Res_TjpgDec; // TjpgDecϵͳ��������ֵ
    BYTE scale;          // ͼ���������

    Res_FatFs = f_open(f_Jpeg, filename, FA_READ);
 800096e:	2201      	movs	r2, #1
 8000970:	6839      	ldr	r1, [r7, #0]
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f00c fbfe 	bl	800d174 <f_open>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    if (Res_FatFs != FR_OK)
 800097e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8000982:	2b00      	cmp	r3, #0
 8000984:	d008      	beq.n	8000998 <STM32_JPEG_DISPLAY+0x34>
    {
        HAL_Delay(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f003 f902 	bl	8003b90 <HAL_Delay>
        f_close(f_Jpeg);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f00c ffa6 	bl	800d8de <f_close>
        return Res_FatFs;
 8000992:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8000996:	e058      	b.n	8000a4a <STM32_JPEG_DISPLAY+0xe6>
    }

    Res_TjpgDec = jd_prepare(&jd, STM32_in_func, Buff, sizeof(Buff), f_Jpeg);
 8000998:	f107 0008 	add.w	r0, r7, #8
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a54 <STM32_JPEG_DISPLAY+0xf0>)
 80009a6:	492c      	ldr	r1, [pc, #176]	@ (8000a58 <STM32_JPEG_DISPLAY+0xf4>)
 80009a8:	f002 fd3e 	bl	8003428 <jd_prepare>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

    Height_Of_Jpeg = jd.height;
 80009b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b4:	4a29      	ldr	r2, [pc, #164]	@ (8000a5c <STM32_JPEG_DISPLAY+0xf8>)
 80009b6:	6013      	str	r3, [r2, #0]

    if (Res_TjpgDec == JDR_OK)
 80009b8:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d13f      	bne.n	8000a40 <STM32_JPEG_DISPLAY+0xdc>
    {

        for (scale = 0; scale < 3; scale++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80009c6:	e013      	b.n	80009f0 <STM32_JPEG_DISPLAY+0x8c>
        {
            if ((jd.width >> scale) <= 320 && (jd.height >> scale) <= 240)
 80009c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009ca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80009ce:	fa22 f303 	lsr.w	r3, r2, r3
 80009d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009d6:	d806      	bhi.n	80009e6 <STM32_JPEG_DISPLAY+0x82>
 80009d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009da:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80009de:	fa22 f303 	lsr.w	r3, r2, r3
 80009e2:	2bf0      	cmp	r3, #240	@ 0xf0
 80009e4:	d909      	bls.n	80009fa <STM32_JPEG_DISPLAY+0x96>
        for (scale = 0; scale < 3; scale++)
 80009e6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80009ea:	3301      	adds	r3, #1
 80009ec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80009f0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d9e7      	bls.n	80009c8 <STM32_JPEG_DISPLAY+0x64>
 80009f8:	e000      	b.n	80009fc <STM32_JPEG_DISPLAY+0x98>
            {
                break;
 80009fa:	bf00      	nop
            }
        }

        if (scale)
 80009fc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d004      	beq.n	8000a0e <STM32_JPEG_DISPLAY+0xaa>
            scale--;
 8000a04:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

        Res_TjpgDec = jd_decomp(&jd, STM32_out_func, scale);
 8000a0e:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4912      	ldr	r1, [pc, #72]	@ (8000a60 <STM32_JPEG_DISPLAY+0xfc>)
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 ffad 	bl	8003978 <jd_decomp>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
        Draw_PixData(0, 0, 320, 240, &frame_buffer[0][0]);
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <STM32_JPEG_DISPLAY+0x100>)
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	23f0      	movs	r3, #240	@ 0xf0
 8000a2a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fe49 	bl	80006c8 <Draw_PixData>
        //		HAL_Delay(1);
        f_close(f_Jpeg);
        return Res_TjpgDec;
    }

    f_close(f_Jpeg);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f00c ff51 	bl	800d8de <f_close>

    return 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e004      	b.n	8000a4a <STM32_JPEG_DISPLAY+0xe6>
        f_close(f_Jpeg);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f00c ff4c 	bl	800d8de <f_close>
        return Res_TjpgDec;
 8000a46:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3788      	adds	r7, #136	@ 0x88
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	24000094 	.word	0x24000094
 8000a58:	080007f9 	.word	0x080007f9
 8000a5c:	24000090 	.word	0x24000090
 8000a60:	08000849 	.word	0x08000849
 8000a64:	24002094 	.word	0x24002094

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	f5ad 5d85 	sub.w	sp, sp, #4256	@ 0x10a0
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    FIL video_f;
    UINT br;
    uint32_t frame_num = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f241 0298 	movw	r2, #4248	@ 0x1098
 8000a76:	443a      	add	r2, r7
 8000a78:	6013      	str	r3, [r2, #0]

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a7a:	f000 fa5b 	bl	8000f34 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7e:	f002 fff5 	bl	8003a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a82:	f000 f859 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a86:	f000 f9a9 	bl	8000ddc <MX_GPIO_Init>
  MX_DMA_Init();
 8000a8a:	f000 f96f 	bl	8000d6c <MX_DMA_Init>
  MX_SPI1_Init();
 8000a8e:	f000 f8c1 	bl	8000c14 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a92:	f000 f915 	bl	8000cc0 <MX_SPI2_Init>
  MX_LIBJPEG_Init();
 8000a96:	f00a f94c 	bl	800ad32 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
    LCD_Init(1);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fd14 	bl	80004c8 <LCD_Init>
    TFT_AdjustGamma();
 8000aa0:	f7ff fde4 	bl	800066c <TFT_AdjustGamma>
    FillScreen(0xf800, 320, 240);
 8000aa4:	22f0      	movs	r2, #240	@ 0xf0
 8000aa6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000aaa:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000aae:	f7ff fd67 	bl	8000580 <FillScreen>
    while (1)
    {
        if (sd_mount() == FR_OK)
 8000ab2:	f000 fb6f 	bl	8001194 <sd_mount>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d000      	beq.n	8000abe <main+0x56>
 8000abc:	e7f9      	b.n	8000ab2 <main+0x4a>
        {
            break;
 8000abe:	bf00      	nop
#if DISPLAY_BMP_888
    Display_BMP_picture("image1_rgb888le_320x240.bmp");
#endif
    char file_name[100];
#ifdef JPEG
    uint8_t image_id = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f241 029f 	movw	r2, #4255	@ 0x109f
 8000ac6:	443a      	add	r2, r7
 8000ac8:	7013      	strb	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {

    	sprintf(file_name, "image%d_320x240.jpg", image_id);
 8000aca:	f241 039f 	movw	r3, #4255	@ 0x109f
 8000ace:	443b      	add	r3, r7
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <main+0xc4>)
 8000ad4:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8000ad8:	443b      	add	r3, r7
 8000ada:	4915      	ldr	r1, [pc, #84]	@ (8000b30 <main+0xc8>)
 8000adc:	4618      	mov	r0, r3
 8000ade:	f00d fd2b 	bl	800e538 <siprintf>
    	STM32_JPEG_DISPLAY(&video_f,file_name);
 8000ae2:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <main+0xc4>)
 8000ae4:	f502 5385 	add.w	r3, r2, #4256	@ 0x10a0
 8000ae8:	19da      	adds	r2, r3, r7
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <main+0xcc>)
 8000aec:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8000af0:	443b      	add	r3, r7
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff35 	bl	8000964 <STM32_JPEG_DISPLAY>
    	HAL_Delay(2000);
 8000afa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000afe:	f003 f847 	bl	8003b90 <HAL_Delay>
    	image_id++;
 8000b02:	f241 039f 	movw	r3, #4255	@ 0x109f
 8000b06:	443b      	add	r3, r7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	f241 029f 	movw	r2, #4255	@ 0x109f
 8000b10:	443a      	add	r2, r7
 8000b12:	7013      	strb	r3, [r2, #0]
    	if(image_id == 11){
 8000b14:	f241 039f 	movw	r3, #4255	@ 0x109f
 8000b18:	443b      	add	r3, r7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b0b      	cmp	r3, #11
 8000b1e:	d1d4      	bne.n	8000aca <main+0x62>
    		image_id = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	f241 029f 	movw	r2, #4255	@ 0x109f
 8000b26:	443a      	add	r2, r7
 8000b28:	7013      	strb	r3, [r2, #0]
    	sprintf(file_name, "image%d_320x240.jpg", image_id);
 8000b2a:	e7ce      	b.n	8000aca <main+0x62>
 8000b2c:	ffffef64 	.word	0xffffef64
 8000b30:	0800f488 	.word	0x0800f488
 8000b34:	ffffefc8 	.word	0xffffefc8

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09c      	sub	sp, #112	@ 0x70
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	224c      	movs	r2, #76	@ 0x4c
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00d fdf0 	bl	800e72c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2220      	movs	r2, #32
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f00d fdea 	bl	800e72c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f006 f9cb 	bl	8006ef4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b2b      	ldr	r3, [pc, #172]	@ (8000c10 <SystemClock_Config+0xd8>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4a2a      	ldr	r2, [pc, #168]	@ (8000c10 <SystemClock_Config+0xd8>)
 8000b68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b6c:	6193      	str	r3, [r2, #24]
 8000b6e:	4b28      	ldr	r3, [pc, #160]	@ (8000c10 <SystemClock_Config+0xd8>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b7a:	bf00      	nop
 8000b7c:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <SystemClock_Config+0xd8>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b88:	d1f8      	bne.n	8000b7c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b92:	2340      	movs	r3, #64	@ 0x40
 8000b94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000baa:	2303      	movs	r3, #3
 8000bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f006 f9d0 	bl	8006f68 <HAL_RCC_OscConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bce:	f000 f9dd 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd2:	233f      	movs	r3, #63	@ 0x3f
 8000bd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000be2:	2340      	movs	r3, #64	@ 0x40
 8000be4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf0:	2340      	movs	r3, #64	@ 0x40
 8000bf2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f006 fd8f 	bl	800771c <HAL_RCC_ClockConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c04:	f000 f9c2 	bl	8000f8c <Error_Handler>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3770      	adds	r7, #112	@ 0x70
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	58024800 	.word	0x58024800

08000c14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c18:	4b27      	ldr	r3, [pc, #156]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c1a:	4a28      	ldr	r2, [pc, #160]	@ (8000cbc <MX_SPI1_Init+0xa8>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c1e:	4b26      	ldr	r3, [pc, #152]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c26:	4b24      	ldr	r3, [pc, #144]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c2c:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c2e:	2207      	movs	r2, #7
 8000c30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c60:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_SPI1_Init+0xa4>)
 8000ca4:	f008 fb6e 	bl	8009384 <HAL_SPI_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000cae:	f000 f96d 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	24027894 	.word	0x24027894
 8000cbc:	40013000 	.word	0x40013000

08000cc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000cc6:	4a28      	ldr	r2, [pc, #160]	@ (8000d68 <MX_SPI2_Init+0xa8>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cca:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000ccc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd2:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd8:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000cda:	2207      	movs	r2, #7
 8000cdc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cde:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cea:	4b1e      	ldr	r3, [pc, #120]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000cec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cf0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cf8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d06:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_SPI2_Init+0xa4>)
 8000d50:	f008 fb18 	bl	8009384 <HAL_SPI_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000d5a:	f000 f917 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2402791c 	.word	0x2402791c
 8000d68:	40003800 	.word	0x40003800

08000d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_DMA_Init+0x6c>)
 8000d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d78:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <MX_DMA_Init+0x6c>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_DMA_Init+0x6c>)
 8000d84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	200b      	movs	r0, #11
 8000d96:	f002 fffa 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d9a:	200b      	movs	r0, #11
 8000d9c:	f003 f811 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	200c      	movs	r0, #12
 8000da6:	f002 fff2 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000daa:	200c      	movs	r0, #12
 8000dac:	f003 f809 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	200d      	movs	r0, #13
 8000db6:	f002 ffea 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dba:	200d      	movs	r0, #13
 8000dbc:	f003 f801 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	200e      	movs	r0, #14
 8000dc6:	f002 ffe2 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dca:	200e      	movs	r0, #14
 8000dcc:	f002 fff9 	bl	8003dc2 <HAL_NVIC_EnableIRQ>

}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	58024400 	.word	0x58024400

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	4b4c      	ldr	r3, [pc, #304]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a4a      	ldr	r2, [pc, #296]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e10:	4b44      	ldr	r3, [pc, #272]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a43      	ldr	r2, [pc, #268]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b40      	ldr	r3, [pc, #256]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a3b      	ldr	r2, [pc, #236]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b39      	ldr	r3, [pc, #228]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4c:	4b35      	ldr	r3, [pc, #212]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	4a34      	ldr	r2, [pc, #208]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5c:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	4a2c      	ldr	r2, [pc, #176]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e88:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	4a25      	ldr	r2, [pc, #148]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e98:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <MX_GPIO_Init+0x148>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	481f      	ldr	r0, [pc, #124]	@ (8000f28 <MX_GPIO_Init+0x14c>)
 8000eac:	f006 f808 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TFT_TransMode_Pin|TFT_RS_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000eb6:	481d      	ldr	r0, [pc, #116]	@ (8000f2c <MX_GPIO_Init+0x150>)
 8000eb8:	f006 f802 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_Led_GPIO_Port, Debug_Led_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2180      	movs	r1, #128	@ 0x80
 8000ec0:	481b      	ldr	r0, [pc, #108]	@ (8000f30 <MX_GPIO_Init+0x154>)
 8000ec2:	f005 fffd 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4812      	ldr	r0, [pc, #72]	@ (8000f28 <MX_GPIO_Init+0x14c>)
 8000ede:	f005 fe47 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_TransMode_Pin TFT_RS_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_TransMode_Pin|TFT_RS_Pin|TFT_CS_Pin;
 8000ee2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <MX_GPIO_Init+0x150>)
 8000efc:	f005 fe38 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Debug_Led_Pin */
  GPIO_InitStruct.Pin = Debug_Led_Pin;
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Debug_Led_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	@ (8000f30 <MX_GPIO_Init+0x154>)
 8000f18:	f005 fe2a 	bl	8006b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f1c:	bf00      	nop
 8000f1e:	3730      	adds	r7, #48	@ 0x30
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58020000 	.word	0x58020000
 8000f2c:	58021000 	.word	0x58021000
 8000f30:	58021800 	.word	0x58021800

08000f34 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f46:	f002 ff57 	bl	8003df8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f56:	231f      	movs	r3, #31
 8000f58:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f5a:	2387      	movs	r3, #135	@ 0x87
 8000f5c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f62:	2300      	movs	r3, #0
 8000f64:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f76:	463b      	mov	r3, r7
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 ff75 	bl	8003e68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f7e:	2004      	movs	r0, #4
 8000f80:	f002 ff52 	bl	8003e28 <HAL_MPU_Enable>

}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <Error_Handler+0x8>

08000f98 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SD_disk_status+0x14>
        return STA_NOINIT;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <SD_disk_status+0x16>
    return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e007      	b.n	8000fde <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 8000fce:	f000 fabb 	bl	8001548 <SD_SPI_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf14      	ite	ne
 8000fd8:	2301      	movne	r3, #1
 8000fda:	2300      	moveq	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <SD_disk_read+0x1c>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <SD_disk_read+0x20>
        return RES_PARERR;
 8001004:	2304      	movs	r3, #4
 8001006:	e010      	b.n	800102a <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <SD_disk_read+0x4c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <SD_disk_read+0x2c>
 8001010:	2303      	movs	r3, #3
 8001012:	e00a      	b.n	800102a <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	68b8      	ldr	r0, [r7, #8]
 800101a:	f000 fb87 	bl	800172c <SD_ReadBlocks>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	24028bc9 	.word	0x24028bc9

08001038 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <SD_disk_write+0x1c>
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <SD_disk_write+0x20>
 8001054:	2304      	movs	r3, #4
 8001056:	e010      	b.n	800107a <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <SD_disk_write+0x4c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <SD_disk_write+0x2c>
 8001060:	2303      	movs	r3, #3
 8001062:	e00a      	b.n	800107a <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	68b8      	ldr	r0, [r7, #8]
 800106a:	f000 fc33 	bl	80018d4 <SD_WriteBlocks>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf14      	ite	ne
 8001074:	2301      	movne	r3, #1
 8001076:	2300      	moveq	r3, #0
 8001078:	b2db      	uxtb	r3, r3
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	24028bc9 	.word	0x24028bc9

08001088 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	603a      	str	r2, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	460b      	mov	r3, r1
 8001096:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 800109e:	2304      	movs	r3, #4
 80010a0:	e022      	b.n	80010e8 <SD_disk_ioctl+0x60>

    switch (cmd) {
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d81e      	bhi.n	80010e6 <SD_disk_ioctl+0x5e>
 80010a8:	a201      	add	r2, pc, #4	@ (adr r2, 80010b0 <SD_disk_ioctl+0x28>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010c1 	.word	0x080010c1
 80010b4:	080010d1 	.word	0x080010d1
 80010b8:	080010c5 	.word	0x080010c5
 80010bc:	080010dd 	.word	0x080010dd
    case CTRL_SYNC:
        return RES_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	e011      	b.n	80010e8 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ca:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e00b      	b.n	80010e8 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010d6:	601a      	str	r2, [r3, #0]
        return RES_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	e005      	b.n	80010e8 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
        return RES_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 80010e6:	2304      	movs	r3, #4
    }
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <sd_format>:
#include "ffconf.h"

char sd_path[4];
FATFS fs;

int sd_format(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	// Pre-mount required for legacy FatFS
	f_mount(&fs, sd_path, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	4908      	ldr	r1, [pc, #32]	@ (8001120 <sd_format+0x2c>)
 80010fe:	4809      	ldr	r0, [pc, #36]	@ (8001124 <sd_format+0x30>)
 8001100:	f00b fff2 	bl	800d0e8 <f_mount>

	FRESULT res;
	//res = f_mkfs(sd_path, 1, 0);
	if (res != FR_OK) {
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <sd_format+0x20>
		printf("Format failed: f_mkfs returned %d\r\n", res);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	@ (8001128 <sd_format+0x34>)
 8001110:	f00d f9a2 	bl	800e458 <iprintf>
	}
		return res;
 8001114:	79fb      	ldrb	r3, [r7, #7]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	24027b84 	.word	0x24027b84
 8001124:	24027b88 	.word	0x24027b88
 8001128:	0800f49c 	.word	0x0800f49c

0800112c <sd_get_space_kb>:

int sd_get_space_kb(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 8001132:	f107 0208 	add.w	r2, r7, #8
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4814      	ldr	r0, [pc, #80]	@ (800118c <sd_get_space_kb+0x60>)
 800113c:	f00c fe1d 	bl	800dd7a <f_getfree>
 8001140:	4603      	mov	r3, r0
 8001142:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <sd_get_space_kb+0x22>
 800114a:	7ffb      	ldrb	r3, [r7, #31]
 800114c:	e01a      	b.n	8001184 <sd_get_space_kb+0x58>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	3b02      	subs	r3, #2
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	8952      	ldrh	r2, [r2, #10]
 8001158:	fb02 f303 	mul.w	r3, r2, r3
 800115c:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	895b      	ldrh	r3, [r3, #10]
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	085b      	lsrs	r3, r3, #1
 8001170:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	085b      	lsrs	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
	printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <sd_get_space_kb+0x64>)
 800117e:	f00d f96b 	bl	800e458 <iprintf>
	return FR_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	24027b84 	.word	0x24027b84
 8001190:	0800f4c0 	.word	0x0800f4c0

08001194 <sd_mount>:

int sd_mount(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 800119a:	4840      	ldr	r0, [pc, #256]	@ (800129c <sd_mount+0x108>)
 800119c:	f00d f9c4 	bl	800e528 <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 80011a0:	493f      	ldr	r1, [pc, #252]	@ (80012a0 <sd_mount+0x10c>)
 80011a2:	4840      	ldr	r0, [pc, #256]	@ (80012a4 <sd_mount+0x110>)
 80011a4:	f00c feea 	bl	800df7c <FATFS_LinkDriver>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <sd_mount+0x24>
		printf("FATFS_LinkDriver failed\n");
 80011ae:	483e      	ldr	r0, [pc, #248]	@ (80012a8 <sd_mount+0x114>)
 80011b0:	f00d f9ba 	bl	800e528 <puts>
		return FR_DISK_ERR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e06d      	b.n	8001294 <sd_mount+0x100>
	}

	printf("Initializing disk...\r\n");
 80011b8:	483c      	ldr	r0, [pc, #240]	@ (80012ac <sd_mount+0x118>)
 80011ba:	f00d f9b5 	bl	800e528 <puts>
	DSTATUS stat = disk_initialize(0);
 80011be:	2000      	movs	r0, #0
 80011c0:	f009 fdd8 	bl	800ad74 <disk_initialize>
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
	if (stat != 0) {
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <sd_mount+0x4e>
		printf("disk_initialize failed: 0x%02X\n", stat);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4837      	ldr	r0, [pc, #220]	@ (80012b0 <sd_mount+0x11c>)
 80011d4:	f00d f940 	bl	800e458 <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 80011d8:	4836      	ldr	r0, [pc, #216]	@ (80012b4 <sd_mount+0x120>)
 80011da:	f00d f9a5 	bl	800e528 <puts>
		return FR_NOT_READY;
 80011de:	2303      	movs	r3, #3
 80011e0:	e058      	b.n	8001294 <sd_mount+0x100>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 80011e2:	492f      	ldr	r1, [pc, #188]	@ (80012a0 <sd_mount+0x10c>)
 80011e4:	4834      	ldr	r0, [pc, #208]	@ (80012b8 <sd_mount+0x124>)
 80011e6:	f00d f937 	bl	800e458 <iprintf>
	res = f_mount(&fs, sd_path, 1);
 80011ea:	2201      	movs	r2, #1
 80011ec:	492c      	ldr	r1, [pc, #176]	@ (80012a0 <sd_mount+0x10c>)
 80011ee:	4833      	ldr	r0, [pc, #204]	@ (80012bc <sd_mount+0x128>)
 80011f0:	f00b ff7a 	bl	800d0e8 <f_mount>
 80011f4:	4603      	mov	r3, r0
 80011f6:	71bb      	strb	r3, [r7, #6]
	if (res == FR_OK)
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d113      	bne.n	8001226 <sd_mount+0x92>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 80011fe:	4928      	ldr	r1, [pc, #160]	@ (80012a0 <sd_mount+0x10c>)
 8001200:	482f      	ldr	r0, [pc, #188]	@ (80012c0 <sd_mount+0x12c>)
 8001202:	f00d f929 	bl	800e458 <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 8001206:	f000 f993 	bl	8001530 <sd_is_sdhc>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <sd_mount+0x80>
 8001210:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <sd_mount+0x130>)
 8001212:	e000      	b.n	8001216 <sd_mount+0x82>
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <sd_mount+0x134>)
 8001216:	4619      	mov	r1, r3
 8001218:	482c      	ldr	r0, [pc, #176]	@ (80012cc <sd_mount+0x138>)
 800121a:	f00d f91d 	bl	800e458 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 800121e:	f7ff ff85 	bl	800112c <sd_get_space_kb>
		return FR_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e036      	b.n	8001294 <sd_mount+0x100>
	}

//	 Handle no filesystem by creating one
	if (res == FR_NO_FILESYSTEM)
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	2b0d      	cmp	r3, #13
 800122a:	d12d      	bne.n	8001288 <sd_mount+0xf4>
	{
		printf("No filesystem found on SD card. Attempting format...\r\nThis will create 32MB Partition (Most Probably)\r\n");
 800122c:	4828      	ldr	r0, [pc, #160]	@ (80012d0 <sd_mount+0x13c>)
 800122e:	f00d f97b 	bl	800e528 <puts>
		printf("If you need the full sized SD card, use the computer to format into FAT32\r\n");
 8001232:	4828      	ldr	r0, [pc, #160]	@ (80012d4 <sd_mount+0x140>)
 8001234:	f00d f978 	bl	800e528 <puts>
		sd_format();
 8001238:	f7ff ff5c 	bl	80010f4 <sd_format>

		printf("Retrying mount after format...\r\n");
 800123c:	4826      	ldr	r0, [pc, #152]	@ (80012d8 <sd_mount+0x144>)
 800123e:	f00d f973 	bl	800e528 <puts>
		res = f_mount(&fs, sd_path, 1);
 8001242:	2201      	movs	r2, #1
 8001244:	4916      	ldr	r1, [pc, #88]	@ (80012a0 <sd_mount+0x10c>)
 8001246:	481d      	ldr	r0, [pc, #116]	@ (80012bc <sd_mount+0x128>)
 8001248:	f00b ff4e 	bl	800d0e8 <f_mount>
 800124c:	4603      	mov	r3, r0
 800124e:	71bb      	strb	r3, [r7, #6]
		if (res == FR_OK) {
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <sd_mount+0xe6>
			printf("SD card formatted and mounted successfully.\r\n");
 8001256:	4821      	ldr	r0, [pc, #132]	@ (80012dc <sd_mount+0x148>)
 8001258:	f00d f966 	bl	800e528 <puts>
			printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 800125c:	f000 f968 	bl	8001530 <sd_is_sdhc>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <sd_mount+0xd6>
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <sd_mount+0x130>)
 8001268:	e000      	b.n	800126c <sd_mount+0xd8>
 800126a:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <sd_mount+0x134>)
 800126c:	4619      	mov	r1, r3
 800126e:	4817      	ldr	r0, [pc, #92]	@ (80012cc <sd_mount+0x138>)
 8001270:	f00d f8f2 	bl	800e458 <iprintf>

			// Report capacity after format
			sd_get_space_kb();
 8001274:	f7ff ff5a 	bl	800112c <sd_get_space_kb>
 8001278:	e004      	b.n	8001284 <sd_mount+0xf0>
		}
		else {
			printf("Mount failed even after format: %d\r\n", res);
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	4619      	mov	r1, r3
 800127e:	4818      	ldr	r0, [pc, #96]	@ (80012e0 <sd_mount+0x14c>)
 8001280:	f00d f8ea 	bl	800e458 <iprintf>
		}
		return res;
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	e005      	b.n	8001294 <sd_mount+0x100>
	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	4619      	mov	r1, r3
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <sd_mount+0x150>)
 800128e:	f00d f8e3 	bl	800e458 <iprintf>
	return res;
 8001292:	79bb      	ldrb	r3, [r7, #6]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	0800f4e4 	.word	0x0800f4e4
 80012a0:	24027b84 	.word	0x24027b84
 80012a4:	0800f958 	.word	0x0800f958
 80012a8:	0800f4fc 	.word	0x0800f4fc
 80012ac:	0800f514 	.word	0x0800f514
 80012b0:	0800f52c 	.word	0x0800f52c
 80012b4:	0800f54c 	.word	0x0800f54c
 80012b8:	0800f584 	.word	0x0800f584
 80012bc:	24027b88 	.word	0x24027b88
 80012c0:	0800f5a0 	.word	0x0800f5a0
 80012c4:	0800f5c8 	.word	0x0800f5c8
 80012c8:	0800f5d4 	.word	0x0800f5d4
 80012cc:	0800f5dc 	.word	0x0800f5dc
 80012d0:	0800f5ec 	.word	0x0800f5ec
 80012d4:	0800f654 	.word	0x0800f654
 80012d8:	0800f6a0 	.word	0x0800f6a0
 80012dc:	0800f6c0 	.word	0x0800f6c0
 80012e0:	0800f6f0 	.word	0x0800f6f0
 80012e4:	0800f718 	.word	0x0800f718

080012e8 <HAL_SPI_TxCpltCallback>:
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;
extern int dma_tx_done_spi2;
extern int dma_rx_done_spi2;

 void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
     if (hspi == &SD_SPI_HANDLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001324 <HAL_SPI_TxCpltCallback+0x3c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d103      	bne.n	8001300 <HAL_SPI_TxCpltCallback+0x18>
     {
         dma_tx_done = 1;
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HAL_SPI_TxCpltCallback+0x40>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
     }
    else if(hspi == &hspi2){
        dma_tx_done_spi2 = 1;
        HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
    }
 }
 80012fe:	e00c      	b.n	800131a <HAL_SPI_TxCpltCallback+0x32>
    else if(hspi == &hspi2){
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <HAL_SPI_TxCpltCallback+0x44>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d108      	bne.n	800131a <HAL_SPI_TxCpltCallback+0x32>
        dma_tx_done_spi2 = 1;
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_SPI_TxCpltCallback+0x48>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001314:	4807      	ldr	r0, [pc, #28]	@ (8001334 <HAL_SPI_TxCpltCallback+0x4c>)
 8001316:	f005 fdd3 	bl	8006ec0 <HAL_GPIO_WritePin>
 }
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	24027894 	.word	0x24027894
 8001328:	24028bc0 	.word	0x24028bc0
 800132c:	2402791c 	.word	0x2402791c
 8001330:	24000000 	.word	0x24000000
 8001334:	58021000 	.word	0x58021000

08001338 <HAL_SPI_TxRxCpltCallback>:

 void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
     if (hspi == &hspi1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a0c      	ldr	r2, [pc, #48]	@ (8001374 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d103      	bne.n	8001350 <HAL_SPI_TxRxCpltCallback+0x18>
     {
         dma_rx_done = 1;
 8001348:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <HAL_SPI_TxRxCpltCallback+0x40>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]
    else if (hspi == &hspi2)
    {
        dma_rx_done_spi2 = 1;
        HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
    }
 }
 800134e:	e00c      	b.n	800136a <HAL_SPI_TxRxCpltCallback+0x32>
    else if (hspi == &hspi2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <HAL_SPI_TxRxCpltCallback+0x44>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d108      	bne.n	800136a <HAL_SPI_TxRxCpltCallback+0x32>
        dma_rx_done_spi2 = 1;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_SPI_TxRxCpltCallback+0x48>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001364:	4807      	ldr	r0, [pc, #28]	@ (8001384 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8001366:	f005 fdab 	bl	8006ec0 <HAL_GPIO_WritePin>
 }
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	24027894 	.word	0x24027894
 8001378:	24028bc4 	.word	0x24028bc4
 800137c:	2402791c 	.word	0x2402791c
 8001380:	2400008c 	.word	0x2400008c
 8001384:	58021000 	.word	0x58021000

08001388 <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8001392:	1df9      	adds	r1, r7, #7
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	2201      	movs	r2, #1
 800139a:	4803      	ldr	r0, [pc, #12]	@ (80013a8 <SD_TransmitByte+0x20>)
 800139c:	f008 f916 	bl	80095cc <HAL_SPI_Transmit>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	24027894 	.word	0x24027894

080013ac <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 80013b2:	23ff      	movs	r3, #255	@ 0xff
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	2300      	movs	r3, #0
 80013b8:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 80013ba:	1dba      	adds	r2, r7, #6
 80013bc:	1df9      	adds	r1, r7, #7
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <SD_ReceiveByte+0x2c>)
 80013c8:	f008 faee 	bl	80099a8 <HAL_SPI_TransmitReceive>
    return data;
 80013cc:	79bb      	ldrb	r3, [r7, #6]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	24027894 	.word	0x24027894

080013dc <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <SD_TransmitBuffer+0x34>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	461a      	mov	r2, r3
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4807      	ldr	r0, [pc, #28]	@ (8001414 <SD_TransmitBuffer+0x38>)
 80013f6:	f008 fe11 	bl	800a01c <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 80013fa:	bf00      	nop
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <SD_TransmitBuffer+0x34>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0fb      	beq.n	80013fc <SD_TransmitBuffer+0x20>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	24028bc0 	.word	0x24028bc0
 8001414:	24027894 	.word	0x24027894

08001418 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	e007      	b.n	800143a <SD_ReceiveBuffer+0x22>
 800142a:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <SD_ReceiveBuffer+0x50>)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	22ff      	movs	r2, #255	@ 0xff
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	429a      	cmp	r2, r3
 8001440:	dbf3      	blt.n	800142a <SD_ReceiveBuffer+0x12>
    dma_rx_done = 0;
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <SD_ReceiveBuffer+0x54>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4906      	ldr	r1, [pc, #24]	@ (8001468 <SD_ReceiveBuffer+0x50>)
 800144e:	4808      	ldr	r0, [pc, #32]	@ (8001470 <SD_ReceiveBuffer+0x58>)
 8001450:	f008 ff26 	bl	800a2a0 <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 8001454:	bf00      	nop
 8001456:	4b05      	ldr	r3, [pc, #20]	@ (800146c <SD_ReceiveBuffer+0x54>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0fb      	beq.n	8001456 <SD_ReceiveBuffer+0x3e>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	24028bcc 	.word	0x24028bcc
 800146c:	24028bc4 	.word	0x24028bc4
 8001470:	24027894 	.word	0x24027894

08001474 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 800147a:	f002 fb7d 	bl	8003b78 <HAL_GetTick>
 800147e:	4603      	mov	r3, r0
 8001480:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001484:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8001486:	f7ff ff91 	bl	80013ac <SD_ReceiveByte>
 800148a:	4603      	mov	r3, r0
 800148c:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	2bff      	cmp	r3, #255	@ 0xff
 8001492:	d101      	bne.n	8001498 <SD_WaitReady+0x24>
 8001494:	2300      	movs	r3, #0
 8001496:	e006      	b.n	80014a6 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8001498:	f002 fb6e 	bl	8003b78 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d8f0      	bhi.n	8001486 <SD_WaitReady+0x12>
    return SD_ERROR;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	6039      	str	r1, [r7, #0]
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	4613      	mov	r3, r2
 80014bc:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 80014be:	23ff      	movs	r3, #255	@ 0xff
 80014c0:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 80014c2:	f7ff ffd7 	bl	8001474 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff5a 	bl	8001388 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	0e1b      	lsrs	r3, r3, #24
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff54 	bl	8001388 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	0c1b      	lsrs	r3, r3, #16
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff4e 	bl	8001388 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff48 	bl	8001388 <SD_TransmitByte>
    SD_TransmitByte(arg);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff43 	bl	8001388 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff3f 	bl	8001388 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 800150a:	f7ff ff4f 	bl	80013ac <SD_ReceiveByte>
 800150e:	4603      	mov	r3, r0
 8001510:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8001512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001516:	2b00      	cmp	r3, #0
 8001518:	da05      	bge.n	8001526 <SD_SendCommand+0x78>
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	3b01      	subs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f1      	bne.n	800150a <SD_SendCommand+0x5c>

    return response;
 8001526:	7bbb      	ldrb	r3, [r7, #14]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
    return sdhc;
 8001534:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <sd_is_sdhc+0x14>)
 8001536:	781b      	ldrb	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	24028bc8 	.word	0x24028bc8

08001548 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 800154e:	2201      	movs	r2, #1
 8001550:	2110      	movs	r1, #16
 8001552:	4873      	ldr	r0, [pc, #460]	@ (8001720 <SD_SPI_Init+0x1d8>)
 8001554:	f005 fcb4 	bl	8006ec0 <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e005      	b.n	800156a <SD_SPI_Init+0x22>
 800155e:	20ff      	movs	r0, #255	@ 0xff
 8001560:	f7ff ff12 	bl	8001388 <SD_TransmitByte>
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	3301      	adds	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b09      	cmp	r3, #9
 800156e:	d9f6      	bls.n	800155e <SD_SPI_Init+0x16>

    SD_CS_LOW();
 8001570:	2200      	movs	r2, #0
 8001572:	2110      	movs	r1, #16
 8001574:	486a      	ldr	r0, [pc, #424]	@ (8001720 <SD_SPI_Init+0x1d8>)
 8001576:	f005 fca3 	bl	8006ec0 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 800157a:	2295      	movs	r2, #149	@ 0x95
 800157c:	2100      	movs	r1, #0
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff ff95 	bl	80014ae <SD_SendCommand>
 8001584:	4603      	mov	r3, r0
 8001586:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8001588:	2201      	movs	r2, #1
 800158a:	2110      	movs	r1, #16
 800158c:	4864      	ldr	r0, [pc, #400]	@ (8001720 <SD_SPI_Init+0x1d8>)
 800158e:	f005 fc97 	bl	8006ec0 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001592:	20ff      	movs	r0, #255	@ 0xff
 8001594:	f7ff fef8 	bl	8001388 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d001      	beq.n	80015a2 <SD_SPI_Init+0x5a>
 800159e:	2301      	movs	r3, #1
 80015a0:	e0ba      	b.n	8001718 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 80015a2:	2200      	movs	r2, #0
 80015a4:	2110      	movs	r1, #16
 80015a6:	485e      	ldr	r0, [pc, #376]	@ (8001720 <SD_SPI_Init+0x1d8>)
 80015a8:	f005 fc8a 	bl	8006ec0 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 80015ac:	2287      	movs	r2, #135	@ 0x87
 80015ae:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80015b2:	2008      	movs	r0, #8
 80015b4:	f7ff ff7b 	bl	80014ae <SD_SendCommand>
 80015b8:	4603      	mov	r3, r0
 80015ba:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e00c      	b.n	80015dc <SD_SPI_Init+0x94>
 80015c2:	7bfc      	ldrb	r4, [r7, #15]
 80015c4:	f7ff fef2 	bl	80013ac <SD_ReceiveByte>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	f104 0310 	add.w	r3, r4, #16
 80015d0:	443b      	add	r3, r7
 80015d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	3301      	adds	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d9ef      	bls.n	80015c2 <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 80015e2:	2201      	movs	r2, #1
 80015e4:	2110      	movs	r1, #16
 80015e6:	484e      	ldr	r0, [pc, #312]	@ (8001720 <SD_SPI_Init+0x1d8>)
 80015e8:	f005 fc6a 	bl	8006ec0 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80015ec:	20ff      	movs	r0, #255	@ 0xff
 80015ee:	f7ff fecb 	bl	8001388 <SD_TransmitByte>

    sdhc = 0;
 80015f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001724 <SD_SPI_Init+0x1dc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 80015f8:	f002 fabe 	bl	8003b78 <HAL_GetTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001602:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d15a      	bne.n	80016c0 <SD_SPI_Init+0x178>
 800160a:	79bb      	ldrb	r3, [r7, #6]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d157      	bne.n	80016c0 <SD_SPI_Init+0x178>
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2baa      	cmp	r3, #170	@ 0xaa
 8001614:	d154      	bne.n	80016c0 <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8001616:	2200      	movs	r2, #0
 8001618:	2110      	movs	r1, #16
 800161a:	4841      	ldr	r0, [pc, #260]	@ (8001720 <SD_SPI_Init+0x1d8>)
 800161c:	f005 fc50 	bl	8006ec0 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001620:	22ff      	movs	r2, #255	@ 0xff
 8001622:	2100      	movs	r1, #0
 8001624:	2037      	movs	r0, #55	@ 0x37
 8001626:	f7ff ff42 	bl	80014ae <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 800162a:	22ff      	movs	r2, #255	@ 0xff
 800162c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001630:	2029      	movs	r0, #41	@ 0x29
 8001632:	f7ff ff3c 	bl	80014ae <SD_SendCommand>
 8001636:	4603      	mov	r3, r0
 8001638:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 800163a:	2201      	movs	r2, #1
 800163c:	2110      	movs	r1, #16
 800163e:	4838      	ldr	r0, [pc, #224]	@ (8001720 <SD_SPI_Init+0x1d8>)
 8001640:	f005 fc3e 	bl	8006ec0 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001644:	20ff      	movs	r0, #255	@ 0xff
 8001646:	f7ff fe9f 	bl	8001388 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 800164a:	7bbb      	ldrb	r3, [r7, #14]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <SD_SPI_Init+0x114>
 8001650:	f002 fa92 	bl	8003b78 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4293      	cmp	r3, r2
 800165a:	d8dc      	bhi.n	8001616 <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 800165c:	7bbb      	ldrb	r3, [r7, #14]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SD_SPI_Init+0x11e>
 8001662:	2301      	movs	r3, #1
 8001664:	e058      	b.n	8001718 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8001666:	2200      	movs	r2, #0
 8001668:	2110      	movs	r1, #16
 800166a:	482d      	ldr	r0, [pc, #180]	@ (8001720 <SD_SPI_Init+0x1d8>)
 800166c:	f005 fc28 	bl	8006ec0 <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8001670:	22ff      	movs	r2, #255	@ 0xff
 8001672:	2100      	movs	r1, #0
 8001674:	203a      	movs	r0, #58	@ 0x3a
 8001676:	f7ff ff1a 	bl	80014ae <SD_SendCommand>
 800167a:	4603      	mov	r3, r0
 800167c:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	e00c      	b.n	800169e <SD_SPI_Init+0x156>
 8001684:	7bfc      	ldrb	r4, [r7, #15]
 8001686:	f7ff fe91 	bl	80013ac <SD_ReceiveByte>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	f104 0310 	add.w	r3, r4, #16
 8001692:	443b      	add	r3, r7
 8001694:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	3301      	adds	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d9ef      	bls.n	8001684 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 80016a4:	2201      	movs	r2, #1
 80016a6:	2110      	movs	r1, #16
 80016a8:	481d      	ldr	r0, [pc, #116]	@ (8001720 <SD_SPI_Init+0x1d8>)
 80016aa:	f005 fc09 	bl	8006ec0 <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 80016ae:	783b      	ldrb	r3, [r7, #0]
 80016b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d02a      	beq.n	800170e <SD_SPI_Init+0x1c6>
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <SD_SPI_Init+0x1dc>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 80016be:	e026      	b.n	800170e <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 80016c0:	2200      	movs	r2, #0
 80016c2:	2110      	movs	r1, #16
 80016c4:	4816      	ldr	r0, [pc, #88]	@ (8001720 <SD_SPI_Init+0x1d8>)
 80016c6:	f005 fbfb 	bl	8006ec0 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 80016ca:	22ff      	movs	r2, #255	@ 0xff
 80016cc:	2100      	movs	r1, #0
 80016ce:	2037      	movs	r0, #55	@ 0x37
 80016d0:	f7ff feed 	bl	80014ae <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 80016d4:	22ff      	movs	r2, #255	@ 0xff
 80016d6:	2100      	movs	r1, #0
 80016d8:	2029      	movs	r0, #41	@ 0x29
 80016da:	f7ff fee8 	bl	80014ae <SD_SendCommand>
 80016de:	4603      	mov	r3, r0
 80016e0:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 80016e2:	2201      	movs	r2, #1
 80016e4:	2110      	movs	r1, #16
 80016e6:	480e      	ldr	r0, [pc, #56]	@ (8001720 <SD_SPI_Init+0x1d8>)
 80016e8:	f005 fbea 	bl	8006ec0 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 80016ec:	20ff      	movs	r0, #255	@ 0xff
 80016ee:	f7ff fe4b 	bl	8001388 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <SD_SPI_Init+0x1bc>
 80016f8:	f002 fa3e 	bl	8003b78 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	4293      	cmp	r3, r2
 8001702:	d8dd      	bhi.n	80016c0 <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <SD_SPI_Init+0x1c8>
 800170a:	2301      	movs	r3, #1
 800170c:	e004      	b.n	8001718 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 800170e:	bf00      	nop
    }

    card_initialized = 1;
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <SD_SPI_Init+0x1e0>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bd90      	pop	{r4, r7, pc}
 8001720:	58020000 	.word	0x58020000
 8001724:	24028bc8 	.word	0x24028bc8
 8001728:	24028bc9 	.word	0x24028bc9

0800172c <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <SD_ReadBlocks+0x16>
 800173e:	2301      	movs	r3, #1
 8001740:	e054      	b.n	80017ec <SD_ReadBlocks+0xc0>
    if (!sdhc) sector *= 512;
 8001742:	4b2c      	ldr	r3, [pc, #176]	@ (80017f4 <SD_ReadBlocks+0xc8>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <SD_ReadBlocks+0x24>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	025b      	lsls	r3, r3, #9
 800174e:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d144      	bne.n	80017e0 <SD_ReadBlocks+0xb4>
        SD_CS_LOW();
 8001756:	2200      	movs	r2, #0
 8001758:	2110      	movs	r1, #16
 800175a:	4827      	ldr	r0, [pc, #156]	@ (80017f8 <SD_ReadBlocks+0xcc>)
 800175c:	f005 fbb0 	bl	8006ec0 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001760:	22ff      	movs	r2, #255	@ 0xff
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	2011      	movs	r0, #17
 8001766:	f7ff fea2 	bl	80014ae <SD_SendCommand>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 8001770:	2201      	movs	r2, #1
 8001772:	2110      	movs	r1, #16
 8001774:	4820      	ldr	r0, [pc, #128]	@ (80017f8 <SD_ReadBlocks+0xcc>)
 8001776:	f005 fba3 	bl	8006ec0 <HAL_GPIO_WritePin>
            return SD_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e036      	b.n	80017ec <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 800177e:	f002 f9fb 	bl	8003b78 <HAL_GetTick>
 8001782:	4603      	mov	r3, r0
 8001784:	33c8      	adds	r3, #200	@ 0xc8
 8001786:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8001788:	f7ff fe10 	bl	80013ac <SD_ReceiveByte>
 800178c:	4603      	mov	r3, r0
 800178e:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001790:	7cfb      	ldrb	r3, [r7, #19]
 8001792:	2bfe      	cmp	r3, #254	@ 0xfe
 8001794:	d006      	beq.n	80017a4 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8001796:	f002 f9ef 	bl	8003b78 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d8f2      	bhi.n	8001788 <SD_ReadBlocks+0x5c>
 80017a2:	e000      	b.n	80017a6 <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 80017a4:	bf00      	nop
        if (token != 0xFE) {
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80017aa:	d006      	beq.n	80017ba <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 80017ac:	2201      	movs	r2, #1
 80017ae:	2110      	movs	r1, #16
 80017b0:	4811      	ldr	r0, [pc, #68]	@ (80017f8 <SD_ReadBlocks+0xcc>)
 80017b2:	f005 fb85 	bl	8006ec0 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e018      	b.n	80017ec <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 80017ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff fe2a 	bl	8001418 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 80017c4:	f7ff fdf2 	bl	80013ac <SD_ReceiveByte>
        SD_ReceiveByte();
 80017c8:	f7ff fdf0 	bl	80013ac <SD_ReceiveByte>
        SD_CS_HIGH();
 80017cc:	2201      	movs	r2, #1
 80017ce:	2110      	movs	r1, #16
 80017d0:	4809      	ldr	r0, [pc, #36]	@ (80017f8 <SD_ReadBlocks+0xcc>)
 80017d2:	f005 fb75 	bl	8006ec0 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 80017d6:	20ff      	movs	r0, #255	@ 0xff
 80017d8:	f7ff fdd6 	bl	8001388 <SD_TransmitByte>
        return SD_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e005      	b.n	80017ec <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f809 	bl	80017fc <SD_ReadMultiBlocks>
 80017ea:	4603      	mov	r3, r0
    }
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	24028bc8 	.word	0x24028bc8
 80017f8:	58020000 	.word	0x58020000

080017fc <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <SD_ReadMultiBlocks+0x16>
 800180e:	2301      	movs	r3, #1
 8001810:	e058      	b.n	80018c4 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 8001812:	4b2e      	ldr	r3, [pc, #184]	@ (80018cc <SD_ReadMultiBlocks+0xd0>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <SD_ReadMultiBlocks+0x24>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001820:	2200      	movs	r2, #0
 8001822:	2110      	movs	r1, #16
 8001824:	482a      	ldr	r0, [pc, #168]	@ (80018d0 <SD_ReadMultiBlocks+0xd4>)
 8001826:	f005 fb4b 	bl	8006ec0 <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 800182a:	22ff      	movs	r2, #255	@ 0xff
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	2012      	movs	r0, #18
 8001830:	f7ff fe3d 	bl	80014ae <SD_SendCommand>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d031      	beq.n	800189e <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 800183a:	2201      	movs	r2, #1
 800183c:	2110      	movs	r1, #16
 800183e:	4824      	ldr	r0, [pc, #144]	@ (80018d0 <SD_ReadMultiBlocks+0xd4>)
 8001840:	f005 fb3e 	bl	8006ec0 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e03d      	b.n	80018c4 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001848:	f002 f996 	bl	8003b78 <HAL_GetTick>
 800184c:	4603      	mov	r3, r0
 800184e:	33c8      	adds	r3, #200	@ 0xc8
 8001850:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 8001852:	f7ff fdab 	bl	80013ac <SD_ReceiveByte>
 8001856:	4603      	mov	r3, r0
 8001858:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 800185a:	7cfb      	ldrb	r3, [r7, #19]
 800185c:	2bfe      	cmp	r3, #254	@ 0xfe
 800185e:	d006      	beq.n	800186e <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 8001860:	f002 f98a 	bl	8003b78 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	4293      	cmp	r3, r2
 800186a:	d8f2      	bhi.n	8001852 <SD_ReadMultiBlocks+0x56>
 800186c:	e000      	b.n	8001870 <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 800186e:	bf00      	nop

        if (token != 0xFE) {
 8001870:	7cfb      	ldrb	r3, [r7, #19]
 8001872:	2bfe      	cmp	r3, #254	@ 0xfe
 8001874:	d006      	beq.n	8001884 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 8001876:	2201      	movs	r2, #1
 8001878:	2110      	movs	r1, #16
 800187a:	4815      	ldr	r0, [pc, #84]	@ (80018d0 <SD_ReadMultiBlocks+0xd4>)
 800187c:	f005 fb20 	bl	8006ec0 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e01f      	b.n	80018c4 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8001884:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff fdc5 	bl	8001418 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 800188e:	f7ff fd8d 	bl	80013ac <SD_ReceiveByte>
        SD_ReceiveByte();
 8001892:	f7ff fd8b 	bl	80013ac <SD_ReceiveByte>

        buff += 512;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800189c:	60fb      	str	r3, [r7, #12]
    while (count--) {
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1cf      	bne.n	8001848 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 80018a8:	22ff      	movs	r2, #255	@ 0xff
 80018aa:	2100      	movs	r1, #0
 80018ac:	200c      	movs	r0, #12
 80018ae:	f7ff fdfe 	bl	80014ae <SD_SendCommand>
    SD_CS_HIGH();
 80018b2:	2201      	movs	r2, #1
 80018b4:	2110      	movs	r1, #16
 80018b6:	4806      	ldr	r0, [pc, #24]	@ (80018d0 <SD_ReadMultiBlocks+0xd4>)
 80018b8:	f005 fb02 	bl	8006ec0 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 80018bc:	20ff      	movs	r0, #255	@ 0xff
 80018be:	f7ff fd63 	bl	8001388 <SD_TransmitByte>

    return SD_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	24028bc8 	.word	0x24028bc8
 80018d0:	58020000 	.word	0x58020000

080018d4 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <SD_WriteBlocks+0x16>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e051      	b.n	800198e <SD_WriteBlocks+0xba>
    if (!sdhc) sector *= 512;
 80018ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <SD_WriteBlocks+0xc4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <SD_WriteBlocks+0x24>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	025b      	lsls	r3, r3, #9
 80018f6:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d141      	bne.n	8001982 <SD_WriteBlocks+0xae>
        SD_CS_LOW();
 80018fe:	2200      	movs	r2, #0
 8001900:	2110      	movs	r1, #16
 8001902:	4826      	ldr	r0, [pc, #152]	@ (800199c <SD_WriteBlocks+0xc8>)
 8001904:	f005 fadc 	bl	8006ec0 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8001908:	22ff      	movs	r2, #255	@ 0xff
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	2018      	movs	r0, #24
 800190e:	f7ff fdce 	bl	80014ae <SD_SendCommand>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 8001918:	2201      	movs	r2, #1
 800191a:	2110      	movs	r1, #16
 800191c:	481f      	ldr	r0, [pc, #124]	@ (800199c <SD_WriteBlocks+0xc8>)
 800191e:	f005 facf 	bl	8006ec0 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e033      	b.n	800198e <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 8001926:	20fe      	movs	r0, #254	@ 0xfe
 8001928:	f7ff fd2e 	bl	8001388 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 800192c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff fd53 	bl	80013dc <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8001936:	20ff      	movs	r0, #255	@ 0xff
 8001938:	f7ff fd26 	bl	8001388 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 800193c:	20ff      	movs	r0, #255	@ 0xff
 800193e:	f7ff fd23 	bl	8001388 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001942:	f7ff fd33 	bl	80013ac <SD_ReceiveByte>
 8001946:	4603      	mov	r3, r0
 8001948:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	2b05      	cmp	r3, #5
 8001952:	d006      	beq.n	8001962 <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 8001954:	2201      	movs	r2, #1
 8001956:	2110      	movs	r1, #16
 8001958:	4810      	ldr	r0, [pc, #64]	@ (800199c <SD_WriteBlocks+0xc8>)
 800195a:	f005 fab1 	bl	8006ec0 <HAL_GPIO_WritePin>
            return SD_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e015      	b.n	800198e <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 8001962:	bf00      	nop
 8001964:	f7ff fd22 	bl	80013ac <SD_ReceiveByte>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0fa      	beq.n	8001964 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 800196e:	2201      	movs	r2, #1
 8001970:	2110      	movs	r1, #16
 8001972:	480a      	ldr	r0, [pc, #40]	@ (800199c <SD_WriteBlocks+0xc8>)
 8001974:	f005 faa4 	bl	8006ec0 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001978:	20ff      	movs	r0, #255	@ 0xff
 800197a:	f7ff fd05 	bl	8001388 <SD_TransmitByte>

        return SD_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e005      	b.n	800198e <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f80a 	bl	80019a0 <SD_WriteMultiBlocks>
 800198c:	4603      	mov	r3, r0
    }
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	24028bc8 	.word	0x24028bc8
 800199c:	58020000 	.word	0x58020000

080019a0 <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <SD_WriteMultiBlocks+0x16>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e059      	b.n	8001a6a <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 80019b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a74 <SD_WriteMultiBlocks+0xd4>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <SD_WriteMultiBlocks+0x24>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 80019c4:	2200      	movs	r2, #0
 80019c6:	2110      	movs	r1, #16
 80019c8:	482b      	ldr	r0, [pc, #172]	@ (8001a78 <SD_WriteMultiBlocks+0xd8>)
 80019ca:	f005 fa79 	bl	8006ec0 <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 80019ce:	22ff      	movs	r2, #255	@ 0xff
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	2019      	movs	r0, #25
 80019d4:	f7ff fd6b 	bl	80014ae <SD_SendCommand>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d02e      	beq.n	8001a3c <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 80019de:	2201      	movs	r2, #1
 80019e0:	2110      	movs	r1, #16
 80019e2:	4825      	ldr	r0, [pc, #148]	@ (8001a78 <SD_WriteMultiBlocks+0xd8>)
 80019e4:	f005 fa6c 	bl	8006ec0 <HAL_GPIO_WritePin>
        return SD_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e03e      	b.n	8001a6a <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 80019ec:	20fc      	movs	r0, #252	@ 0xfc
 80019ee:	f7ff fccb 	bl	8001388 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 80019f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fcf0 	bl	80013dc <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 80019fc:	20ff      	movs	r0, #255	@ 0xff
 80019fe:	f7ff fcc3 	bl	8001388 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001a02:	20ff      	movs	r0, #255	@ 0xff
 8001a04:	f7ff fcc0 	bl	8001388 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001a08:	f7ff fcd0 	bl	80013ac <SD_ReceiveByte>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d006      	beq.n	8001a28 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2110      	movs	r1, #16
 8001a1e:	4816      	ldr	r0, [pc, #88]	@ (8001a78 <SD_WriteMultiBlocks+0xd8>)
 8001a20:	f005 fa4e 	bl	8006ec0 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e020      	b.n	8001a6a <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8001a28:	bf00      	nop
 8001a2a:	f7ff fcbf 	bl	80013ac <SD_ReceiveByte>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0fa      	beq.n	8001a2a <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001a3a:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1d2      	bne.n	80019ec <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 8001a46:	20fd      	movs	r0, #253	@ 0xfd
 8001a48:	f7ff fc9e 	bl	8001388 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8001a4c:	bf00      	nop
 8001a4e:	f7ff fcad 	bl	80013ac <SD_ReceiveByte>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0fa      	beq.n	8001a4e <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	4806      	ldr	r0, [pc, #24]	@ (8001a78 <SD_WriteMultiBlocks+0xd8>)
 8001a5e:	f005 fa2f 	bl	8006ec0 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001a62:	20ff      	movs	r0, #255	@ 0xff
 8001a64:	f7ff fc90 	bl	8001388 <SD_TransmitByte>

    return SD_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	24028bc8 	.word	0x24028bc8
 8001a78:	58020000 	.word	0x58020000

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_MspInit+0x30>)
 8001a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a88:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <HAL_MspInit+0x30>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_MspInit+0x30>)
 8001a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	58024400 	.word	0x58024400

08001ab0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0bc      	sub	sp, #240	@ 0xf0
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	22b8      	movs	r2, #184	@ 0xb8
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00c fe2b 	bl	800e72c <memset>
  if(hspi->Instance==SPI1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a56      	ldr	r2, [pc, #344]	@ (8001c34 <HAL_SPI_MspInit+0x184>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	f040 80b7 	bne.w	8001c50 <HAL_SPI_MspInit+0x1a0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001ae2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af2:	f107 0320 	add.w	r3, r7, #32
 8001af6:	4618      	mov	r0, r3
 8001af8:	f006 f940 	bl	8007d7c <HAL_RCCEx_PeriphCLKConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001b02:	f7ff fa43 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b06:	4b4c      	ldr	r3, [pc, #304]	@ (8001c38 <HAL_SPI_MspInit+0x188>)
 8001b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c38 <HAL_SPI_MspInit+0x188>)
 8001b0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b16:	4b48      	ldr	r3, [pc, #288]	@ (8001c38 <HAL_SPI_MspInit+0x188>)
 8001b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b44      	ldr	r3, [pc, #272]	@ (8001c38 <HAL_SPI_MspInit+0x188>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2a:	4a43      	ldr	r2, [pc, #268]	@ (8001c38 <HAL_SPI_MspInit+0x188>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b34:	4b40      	ldr	r3, [pc, #256]	@ (8001c38 <HAL_SPI_MspInit+0x188>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b42:	23e0      	movs	r3, #224	@ 0xe0
 8001b44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b64:	4619      	mov	r1, r3
 8001b66:	4835      	ldr	r0, [pc, #212]	@ (8001c3c <HAL_SPI_MspInit+0x18c>)
 8001b68:	f005 f802 	bl	8006b70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001b6c:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001b6e:	4a35      	ldr	r2, [pc, #212]	@ (8001c44 <HAL_SPI_MspInit+0x194>)
 8001b70:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001b72:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001b74:	2225      	movs	r2, #37	@ 0x25
 8001b76:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b78:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	4b30      	ldr	r3, [pc, #192]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b84:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b92:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001b98:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba4:	4b26      	ldr	r3, [pc, #152]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001baa:	4825      	ldr	r0, [pc, #148]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001bac:	f002 f99c 	bl	8003ee8 <HAL_DMA_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8001bb6:	f7ff f9e9 	bl	8000f8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a20      	ldr	r2, [pc, #128]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001bbe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <HAL_SPI_MspInit+0x190>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001bc8:	4a20      	ldr	r2, [pc, #128]	@ (8001c4c <HAL_SPI_MspInit+0x19c>)
 8001bca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001bce:	2226      	movs	r2, #38	@ 0x26
 8001bd0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001bd4:	2240      	movs	r2, #64	@ 0x40
 8001bd6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001be0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001be4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be6:	4b18      	ldr	r3, [pc, #96]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c04:	4810      	ldr	r0, [pc, #64]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001c06:	f002 f96f 	bl	8003ee8 <HAL_DMA_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001c10:	f7ff f9bc 	bl	8000f8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a0c      	ldr	r2, [pc, #48]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001c18:	679a      	str	r2, [r3, #120]	@ 0x78
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <HAL_SPI_MspInit+0x198>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2023      	movs	r0, #35	@ 0x23
 8001c26:	f002 f8b2 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c2a:	2023      	movs	r0, #35	@ 0x23
 8001c2c:	f002 f8c9 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c30:	e0e0      	b.n	8001df4 <HAL_SPI_MspInit+0x344>
 8001c32:	bf00      	nop
 8001c34:	40013000 	.word	0x40013000
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	58020000 	.word	0x58020000
 8001c40:	240279a4 	.word	0x240279a4
 8001c44:	40020010 	.word	0x40020010
 8001c48:	24027a1c 	.word	0x24027a1c
 8001c4c:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a69      	ldr	r2, [pc, #420]	@ (8001dfc <HAL_SPI_MspInit+0x34c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f040 80cc 	bne.w	8001df4 <HAL_SPI_MspInit+0x344>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	4618      	mov	r0, r3
 8001c72:	f006 f883 	bl	8007d7c <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_SPI_MspInit+0x1d0>
      Error_Handler();
 8001c7c:	f7ff f986 	bl	8000f8c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c80:	4b5f      	ldr	r3, [pc, #380]	@ (8001e00 <HAL_SPI_MspInit+0x350>)
 8001c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c86:	4a5e      	ldr	r2, [pc, #376]	@ (8001e00 <HAL_SPI_MspInit+0x350>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c90:	4b5b      	ldr	r3, [pc, #364]	@ (8001e00 <HAL_SPI_MspInit+0x350>)
 8001c92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b58      	ldr	r3, [pc, #352]	@ (8001e00 <HAL_SPI_MspInit+0x350>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca4:	4a56      	ldr	r2, [pc, #344]	@ (8001e00 <HAL_SPI_MspInit+0x350>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cae:	4b54      	ldr	r3, [pc, #336]	@ (8001e00 <HAL_SPI_MspInit+0x350>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_SPI_MspInit+0x350>)
 8001cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001e00 <HAL_SPI_MspInit+0x350>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8001e00 <HAL_SPI_MspInit+0x350>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TFT_SDA_Pin|TFT_SDI_Pin;
 8001cda:	2306      	movs	r3, #6
 8001cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4841      	ldr	r0, [pc, #260]	@ (8001e04 <HAL_SPI_MspInit+0x354>)
 8001d00:	f004 ff36 	bl	8006b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_SCK_Pin;
 8001d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d1e:	2305      	movs	r3, #5
 8001d20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(TFT_SCK_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4837      	ldr	r0, [pc, #220]	@ (8001e08 <HAL_SPI_MspInit+0x358>)
 8001d2c:	f004 ff20 	bl	8006b70 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 8001d30:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d32:	4a37      	ldr	r2, [pc, #220]	@ (8001e10 <HAL_SPI_MspInit+0x360>)
 8001d34:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001d36:	4b35      	ldr	r3, [pc, #212]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d38:	2227      	movs	r2, #39	@ 0x27
 8001d3a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d3c:	4b33      	ldr	r3, [pc, #204]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d42:	4b32      	ldr	r3, [pc, #200]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d48:	4b30      	ldr	r3, [pc, #192]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d4e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d50:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d56:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d62:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d68:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001d6e:	4827      	ldr	r0, [pc, #156]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d70:	f002 f8ba 	bl	8003ee8 <HAL_DMA_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_SPI_MspInit+0x2ce>
      Error_Handler();
 8001d7a:	f7ff f907 	bl	8000f8c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d82:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d84:	4a21      	ldr	r2, [pc, #132]	@ (8001e0c <HAL_SPI_MspInit+0x35c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream3;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001d8c:	4a22      	ldr	r2, [pc, #136]	@ (8001e18 <HAL_SPI_MspInit+0x368>)
 8001d8e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001d90:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001d92:	2228      	movs	r2, #40	@ 0x28
 8001d94:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d96:	4b1f      	ldr	r3, [pc, #124]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001d98:	2240      	movs	r2, #64	@ 0x40
 8001d9a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001da2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001da4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001da8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001db0:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001dc8:	4812      	ldr	r0, [pc, #72]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001dca:	f002 f88d 	bl	8003ee8 <HAL_DMA_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_SPI_MspInit+0x328>
      Error_Handler();
 8001dd4:	f7ff f8da 	bl	8000f8c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0e      	ldr	r2, [pc, #56]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001ddc:	679a      	str	r2, [r3, #120]	@ 0x78
 8001dde:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <HAL_SPI_MspInit+0x364>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	2024      	movs	r0, #36	@ 0x24
 8001dea:	f001 ffd0 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001dee:	2024      	movs	r0, #36	@ 0x24
 8001df0:	f001 ffe7 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
}
 8001df4:	bf00      	nop
 8001df6:	37f0      	adds	r7, #240	@ 0xf0
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40003800 	.word	0x40003800
 8001e00:	58024400 	.word	0x58024400
 8001e04:	58020800 	.word	0x58020800
 8001e08:	58020400 	.word	0x58020400
 8001e0c:	24027a94 	.word	0x24027a94
 8001e10:	40020040 	.word	0x40020040
 8001e14:	24027b0c 	.word	0x24027b0c
 8001e18:	40020058 	.word	0x40020058

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <NMI_Handler+0x4>

08001e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <MemManage_Handler+0x4>

08001e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e72:	f001 fe6d 	bl	8003b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <DMA1_Stream0_IRQHandler+0x10>)
 8001e82:	f003 fb57 	bl	8005534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	240279a4 	.word	0x240279a4

08001e90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <DMA1_Stream1_IRQHandler+0x10>)
 8001e96:	f003 fb4d 	bl	8005534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	24027a1c 	.word	0x24027a1c

08001ea4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <DMA1_Stream2_IRQHandler+0x10>)
 8001eaa:	f003 fb43 	bl	8005534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	24027a94 	.word	0x24027a94

08001eb8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <DMA1_Stream3_IRQHandler+0x10>)
 8001ebe:	f003 fb39 	bl	8005534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	24027b0c 	.word	0x24027b0c

08001ecc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <SPI1_IRQHandler+0x10>)
 8001ed2:	f008 fb9d 	bl	800a610 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	24027894 	.word	0x24027894

08001ee0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ee4:	4802      	ldr	r0, [pc, #8]	@ (8001ef0 <SPI2_IRQHandler+0x10>)
 8001ee6:	f008 fb93 	bl	800a610 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2402791c 	.word	0x2402791c

08001ef4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e00a      	b.n	8001f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f06:	f3af 8000 	nop.w
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60ba      	str	r2, [r7, #8]
 8001f12:	b2ca      	uxtb	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf0      	blt.n	8001f06 <_read+0x12>
  }

  return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e009      	b.n	8001f54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf1      	blt.n	8001f40 <_write+0x12>
  }
  return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_close>:

int _close(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_isatty>:

int _isatty(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	@ (800202c <_sbrk+0x5c>)
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <_sbrk+0x60>)
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <_sbrk+0x64>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <_sbrk+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d207      	bcs.n	8002010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002000:	f00c fbf2 	bl	800e7e8 <__errno>
 8002004:	4603      	mov	r3, r0
 8002006:	220c      	movs	r2, #12
 8002008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e009      	b.n	8002024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002010:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <_sbrk+0x64>)
 8002020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	24050000 	.word	0x24050000
 8002030:	00000400 	.word	0x00000400
 8002034:	24028dcc 	.word	0x24028dcc
 8002038:	24028f58 	.word	0x24028f58

0800203c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002040:	4b3e      	ldr	r3, [pc, #248]	@ (800213c <SystemInit+0x100>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002046:	4a3d      	ldr	r2, [pc, #244]	@ (800213c <SystemInit+0x100>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002050:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <SystemInit+0x104>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	2b06      	cmp	r3, #6
 800205a:	d807      	bhi.n	800206c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800205c:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <SystemInit+0x104>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 030f 	bic.w	r3, r3, #15
 8002064:	4a36      	ldr	r2, [pc, #216]	@ (8002140 <SystemInit+0x104>)
 8002066:	f043 0307 	orr.w	r3, r3, #7
 800206a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800206c:	4b35      	ldr	r3, [pc, #212]	@ (8002144 <SystemInit+0x108>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a34      	ldr	r2, [pc, #208]	@ (8002144 <SystemInit+0x108>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002078:	4b32      	ldr	r3, [pc, #200]	@ (8002144 <SystemInit+0x108>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800207e:	4b31      	ldr	r3, [pc, #196]	@ (8002144 <SystemInit+0x108>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4930      	ldr	r1, [pc, #192]	@ (8002144 <SystemInit+0x108>)
 8002084:	4b30      	ldr	r3, [pc, #192]	@ (8002148 <SystemInit+0x10c>)
 8002086:	4013      	ands	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800208a:	4b2d      	ldr	r3, [pc, #180]	@ (8002140 <SystemInit+0x104>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002096:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <SystemInit+0x104>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 030f 	bic.w	r3, r3, #15
 800209e:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <SystemInit+0x104>)
 80020a0:	f043 0307 	orr.w	r3, r3, #7
 80020a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020a6:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <SystemInit+0x108>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <SystemInit+0x108>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020b2:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <SystemInit+0x108>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020b8:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <SystemInit+0x108>)
 80020ba:	4a24      	ldr	r2, [pc, #144]	@ (800214c <SystemInit+0x110>)
 80020bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80020be:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <SystemInit+0x108>)
 80020c0:	4a23      	ldr	r2, [pc, #140]	@ (8002150 <SystemInit+0x114>)
 80020c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <SystemInit+0x108>)
 80020c6:	4a23      	ldr	r2, [pc, #140]	@ (8002154 <SystemInit+0x118>)
 80020c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <SystemInit+0x108>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002144 <SystemInit+0x108>)
 80020d2:	4a20      	ldr	r2, [pc, #128]	@ (8002154 <SystemInit+0x118>)
 80020d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <SystemInit+0x108>)
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80020dc:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <SystemInit+0x108>)
 80020de:	4a1d      	ldr	r2, [pc, #116]	@ (8002154 <SystemInit+0x118>)
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020e2:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <SystemInit+0x108>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020e8:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <SystemInit+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a15      	ldr	r2, [pc, #84]	@ (8002144 <SystemInit+0x108>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <SystemInit+0x108>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <SystemInit+0x108>)
 80020fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d113      	bne.n	8002130 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <SystemInit+0x108>)
 800210a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800210e:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <SystemInit+0x108>)
 8002110:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002114:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002118:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <SystemInit+0x11c>)
 800211a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800211e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <SystemInit+0x108>)
 8002122:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002126:	4a07      	ldr	r2, [pc, #28]	@ (8002144 <SystemInit+0x108>)
 8002128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800212c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00
 8002140:	52002000 	.word	0x52002000
 8002144:	58024400 	.word	0x58024400
 8002148:	eaf6ed7f 	.word	0xeaf6ed7f
 800214c:	02020200 	.word	0x02020200
 8002150:	01ff0000 	.word	0x01ff0000
 8002154:	01010280 	.word	0x01010280
 8002158:	52004000 	.word	0x52004000

0800215c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <ExitRun0Mode+0x2c>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <ExitRun0Mode+0x2c>)
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800216c:	bf00      	nop
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <ExitRun0Mode+0x2c>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f9      	beq.n	800216e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	58024800 	.word	0x58024800

0800218c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800218c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80021c8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002190:	f7ff ffe4 	bl	800215c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002194:	f7ff ff52 	bl	800203c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800219a:	490d      	ldr	r1, [pc, #52]	@ (80021d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b0:	4c0a      	ldr	r4, [pc, #40]	@ (80021dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021be:	f00c fb19 	bl	800e7f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c2:	f7fe fc51 	bl	8000a68 <main>
  bx  lr
 80021c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80021cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021d0:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80021d4:	080102c8 	.word	0x080102c8
  ldr r2, =_sbss
 80021d8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80021dc:	24028f54 	.word	0x24028f54

080021e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC3_IRQHandler>

080021e2 <alloc_pool>:
static
void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
	JDEC* jd,		/* Pointer to the decompressor object */
	UINT nd			/* Number of bytes to allocate */
)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
	char *rp = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]


	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	3303      	adds	r3, #3
 80021f4:	f023 0303 	bic.w	r3, r3, #3
 80021f8:	603b      	str	r3, [r7, #0]

	if (jd->sz_pool >= nd) {
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d80d      	bhi.n	8002220 <alloc_pool+0x3e>
		jd->sz_pool -= nd;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	1ad2      	subs	r2, r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	671a      	str	r2, [r3, #112]	@ 0x70
		rp = (char*)jd->pool;			/* Get start of available memory pool */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002214:	60fb      	str	r3, [r7, #12]
		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	441a      	add	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	66da      	str	r2, [r3, #108]	@ 0x6c
	}

	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
 8002220:	68fb      	ldr	r3, [r7, #12]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <create_qt_tbl>:
UINT create_qt_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,			/* Pointer to the decompressor object */
	const BYTE* data,	/* Pointer to the quantizer tables */
	UINT ndata			/* Size of input data */
)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE d, z;
	LONG *pb;


	while (ndata) {	/* Process all tables in the segment */
 800223c:	e048      	b.n	80022d0 <create_qt_tbl+0xa0>
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b40      	cmp	r3, #64	@ 0x40
 8002242:	d801      	bhi.n	8002248 <create_qt_tbl+0x18>
 8002244:	2306      	movs	r3, #6
 8002246:	e047      	b.n	80022d8 <create_qt_tbl+0xa8>
		ndata -= 65;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b41      	subs	r3, #65	@ 0x41
 800224c:	607b      	str	r3, [r7, #4]
		d = *data++;							/* Get table property */
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	60ba      	str	r2, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	76fb      	strb	r3, [r7, #27]
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
 8002258:	7efb      	ldrb	r3, [r7, #27]
 800225a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <create_qt_tbl+0x36>
 8002262:	2306      	movs	r3, #6
 8002264:	e038      	b.n	80022d8 <create_qt_tbl+0xa8>
		i = d & 3;								/* Get table ID */
 8002266:	7efb      	ldrb	r3, [r7, #27]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	61fb      	str	r3, [r7, #28]
		pb = alloc_pool(jd, 64 * sizeof (LONG));/* Allocate a memory block for the table */
 800226e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f7ff ffb5 	bl	80021e2 <alloc_pool>
 8002278:	6178      	str	r0, [r7, #20]
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <create_qt_tbl+0x54>
 8002280:	2303      	movs	r3, #3
 8002282:	e029      	b.n	80022d8 <create_qt_tbl+0xa8>
		jd->qttbl[i] = pb;						/* Register the table */
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3314      	adds	r3, #20
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	605a      	str	r2, [r3, #4]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e018      	b.n	80022ca <create_qt_tbl+0x9a>
			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
 8002298:	4a11      	ldr	r2, [pc, #68]	@ (80022e0 <create_qt_tbl+0xb0>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	74fb      	strb	r3, [r7, #19]
			pb[z] = (LONG)((DWORD)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	60ba      	str	r2, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	4619      	mov	r1, r3
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <create_qt_tbl+0xb4>)
 80022b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022b4:	fb03 f101 	mul.w	r1, r3, r1
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4413      	add	r3, r2
 80022c0:	460a      	mov	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 64; i++) {				/* Load the table */
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	3301      	adds	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80022ce:	d9e3      	bls.n	8002298 <create_qt_tbl+0x68>
	while (ndata) {	/* Process all tables in the segment */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1b3      	bne.n	800223e <create_qt_tbl+0xe>
		}
	}

	return JDR_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	0800f97c 	.word	0x0800f97c
 80022e4:	0800f9bc 	.word	0x0800f9bc

080022e8 <create_huffman_tbl>:
UINT create_huffman_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,				/* Pointer to the decompressor object */
	const BYTE* data,		/* Pointer to the packed huffman tables */
	UINT ndata				/* Size of input data */
)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	@ 0x38
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
	UINT i, j, b, np, cls, num;
	BYTE d, *pb, *pd;
	WORD hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
 80022f4:	e0c5      	b.n	8002482 <create_huffman_tbl+0x19a>
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d801      	bhi.n	8002300 <create_huffman_tbl+0x18>
 80022fc:	2306      	movs	r3, #6
 80022fe:	e0c5      	b.n	800248c <create_huffman_tbl+0x1a4>
		ndata -= 17;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b11      	subs	r3, #17
 8002304:	607b      	str	r3, [r7, #4]
		d = *data++;						/* Get table number and class */
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	60ba      	str	r2, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
 8002312:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	b2db      	uxtb	r3, r3
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	61bb      	str	r3, [r7, #24]
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
 8002326:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800232a:	f003 03ee 	and.w	r3, r3, #238	@ 0xee
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <create_huffman_tbl+0x4e>
 8002332:	2306      	movs	r3, #6
 8002334:	e0aa      	b.n	800248c <create_huffman_tbl+0x1a4>
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
 8002336:	2110      	movs	r1, #16
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff ff52 	bl	80021e2 <alloc_pool>
 800233e:	6178      	str	r0, [r7, #20]
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <create_huffman_tbl+0x62>
 8002346:	2303      	movs	r3, #3
 8002348:	e0a0      	b.n	800248c <create_huffman_tbl+0x1a4>
		jd->huffbits[num][cls] = pb;
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	0059      	lsls	r1, r3, #1
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	440b      	add	r3, r1
 8002354:	3308      	adds	r3, #8
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	605a      	str	r2, [r3, #4]
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 800235e:	2300      	movs	r3, #0
 8002360:	637b      	str	r3, [r7, #52]	@ 0x34
 8002362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002366:	e011      	b.n	800238c <create_huffman_tbl+0xa4>
			pb[i] = b = *data++;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	60ba      	str	r2, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002376:	4413      	add	r3, r2
 8002378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
			np += b;	/* Get sum of code words for each code */
 800237e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002382:	4413      	add	r3, r2
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002388:	3301      	adds	r3, #1
 800238a:	637b      	str	r3, [r7, #52]	@ 0x34
 800238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238e:	2b0f      	cmp	r3, #15
 8002390:	d9ea      	bls.n	8002368 <create_huffman_tbl+0x80>
		}

		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
 8002392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4619      	mov	r1, r3
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7ff ff22 	bl	80021e2 <alloc_pool>
 800239e:	6138      	str	r0, [r7, #16]
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <create_huffman_tbl+0xc2>
 80023a6:	2303      	movs	r3, #3
 80023a8:	e070      	b.n	800248c <create_huffman_tbl+0x1a4>
		jd->huffcode[num][cls] = ph;
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	0059      	lsls	r1, r3, #1
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	440b      	add	r3, r1
 80023b4:	330c      	adds	r3, #12
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
		hc = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	847b      	strh	r3, [r7, #34]	@ 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ca:	e01a      	b.n	8002402 <create_huffman_tbl+0x11a>
			b = pb[i];
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d0:	4413      	add	r3, r2
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while (b--) ph[j++] = hc++;
 80023d6:	e009      	b.n	80023ec <create_huffman_tbl+0x104>
 80023d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80023da:	1c53      	adds	r3, r2, #1
 80023dc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e0:	1c59      	adds	r1, r3, #1
 80023e2:	6339      	str	r1, [r7, #48]	@ 0x30
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	6939      	ldr	r1, [r7, #16]
 80023e8:	440b      	add	r3, r1
 80023ea:	801a      	strh	r2, [r3, #0]
 80023ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ee:	1e5a      	subs	r2, r3, #1
 80023f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <create_huffman_tbl+0xf0>
			hc <<= 1;
 80023f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	847b      	strh	r3, [r7, #34]	@ 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 80023fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023fe:	3301      	adds	r3, #1
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
 8002402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d9e1      	bls.n	80023cc <create_huffman_tbl+0xe4>
		}

		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240c:	429a      	cmp	r2, r3
 800240e:	d201      	bcs.n	8002414 <create_huffman_tbl+0x12c>
 8002410:	2306      	movs	r3, #6
 8002412:	e03b      	b.n	800248c <create_huffman_tbl+0x1a4>
		ndata -= np;
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	607b      	str	r3, [r7, #4]
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
 800241c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f7ff fedf 	bl	80021e2 <alloc_pool>
 8002424:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <create_huffman_tbl+0x148>
 800242c:	2303      	movs	r3, #3
 800242e:	e02d      	b.n	800248c <create_huffman_tbl+0x1a4>
		jd->huffdata[num][cls] = pd;
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	0059      	lsls	r1, r3, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	440b      	add	r3, r1
 800243a:	3310      	adds	r3, #16
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002442:	605a      	str	r2, [r3, #4]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
 8002448:	e017      	b.n	800247a <create_huffman_tbl+0x192>
			d = *data++;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	60ba      	str	r2, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			if (!cls && d > 11) return JDR_FMT1;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <create_huffman_tbl+0x180>
 800245c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002460:	2b0b      	cmp	r3, #11
 8002462:	d901      	bls.n	8002468 <create_huffman_tbl+0x180>
 8002464:	2306      	movs	r3, #6
 8002466:	e011      	b.n	800248c <create_huffman_tbl+0x1a4>
			*pd++ = d;
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	627a      	str	r2, [r7, #36]	@ 0x24
 800246e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002472:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 8002474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002476:	3301      	adds	r3, #1
 8002478:	637b      	str	r3, [r7, #52]	@ 0x34
 800247a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	429a      	cmp	r2, r3
 8002480:	d3e3      	bcc.n	800244a <create_huffman_tbl+0x162>
	while (ndata) {	/* Process all tables in the segment */
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f47f af36 	bne.w	80022f6 <create_huffman_tbl+0xe>
		}
	}

	return JDR_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3738      	adds	r7, #56	@ 0x38
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <bitext>:
static
INT bitext (	/* >=0: extracted data, <0: error code */
	JDEC* jd,	/* Pointer to the decompressor object */
	UINT nbit	/* Number of bits to extract (1 to 11) */
)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
	BYTE msk, s, *dp;
	UINT dc, v, f;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7b1b      	ldrb	r3, [r3, #12]
 80024a2:	77fb      	strb	r3, [r7, #31]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
	s = *dp; v = f = 0;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	77bb      	strb	r3, [r7, #30]
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	613b      	str	r3, [r7, #16]
	do {
		if (!msk) {				/* Next byte? */
 80024be:	7ffb      	ldrb	r3, [r7, #31]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d136      	bne.n	8002532 <bitext+0x9e>
			if (!dc) {			/* No input data is available, re-fill input buffer */
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d110      	bne.n	80024ec <bitext+0x58>
				dp = jd->inbuf;	/* Top of input buffer */
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024d8:	69b9      	ldr	r1, [r7, #24]
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
 80024de:	6178      	str	r0, [r7, #20]
				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <bitext+0x5e>
 80024e6:	f06f 0301 	mvn.w	r3, #1
 80024ea:	e041      	b.n	8002570 <bitext+0xdc>
			} else {
				dp++;			/* Next data ptr */
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61bb      	str	r3, [r7, #24]
			}
			dc--;				/* Decrement number of available bytes */
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
			if (f) {			/* In flag sequence? */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00e      	beq.n	800251c <bitext+0x88>
				f = 0;			/* Exit flag sequence */
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
				if (*dp != 0) return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <bitext+0x7c>
 800250a:	f06f 0305 	mvn.w	r3, #5
 800250e:	e02f      	b.n	8002570 <bitext+0xdc>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002510:	23ff      	movs	r3, #255	@ 0xff
 8002512:	77bb      	strb	r3, [r7, #30]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	7fba      	ldrb	r2, [r7, #30]
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e008      	b.n	800252e <bitext+0x9a>
			} else {
				s = *dp;				/* Get next data byte */
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	77bb      	strb	r3, [r7, #30]
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8002522:	7fbb      	ldrb	r3, [r7, #30]
 8002524:	2bff      	cmp	r3, #255	@ 0xff
 8002526:	d102      	bne.n	800252e <bitext+0x9a>
					f = 1; continue;	/* Enter flag sequence */
 8002528:	2301      	movs	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e013      	b.n	8002556 <bitext+0xc2>
				}
			}
			msk = 0x80;		/* Read from MSB */
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	77fb      	strb	r3, [r7, #31]
		}
		v <<= 1;	/* Get a bit */
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	613b      	str	r3, [r7, #16]
		if (s & msk) v++;
 8002538:	7fba      	ldrb	r2, [r7, #30]
 800253a:	7ffb      	ldrb	r3, [r7, #31]
 800253c:	4013      	ands	r3, r2
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <bitext+0xb6>
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	3301      	adds	r3, #1
 8002548:	613b      	str	r3, [r7, #16]
		msk >>= 1;
 800254a:	7ffb      	ldrb	r3, [r7, #31]
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	77fb      	strb	r3, [r7, #31]
		nbit--;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	3b01      	subs	r3, #1
 8002554:	603b      	str	r3, [r7, #0]
	} while (nbit);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1b0      	bne.n	80024be <bitext+0x2a>
	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7ffa      	ldrb	r2, [r7, #31]
 8002560:	731a      	strb	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	605a      	str	r2, [r3, #4]

	return (INT)v;
 800256e:	693b      	ldr	r3, [r7, #16]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <huffext>:
	JDEC* jd,			/* Pointer to the decompressor object */
	const BYTE* hbits,	/* Pointer to the bit distribution table */
	const WORD* hcode,	/* Pointer to the code word table */
	const BYTE* hdata	/* Pointer to the data table */
)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	@ 0x30
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
	BYTE msk, s, *dp;
	UINT dc, v, f, bl, nd;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	7b1b      	ldrb	r3, [r3, #12]
 800258a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
	s = *dp; v = f = 0;
 800259a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	623b      	str	r3, [r7, #32]
	bl = 16;	/* Max code length */
 80025aa:	2310      	movs	r3, #16
 80025ac:	61bb      	str	r3, [r7, #24]
	do {
		if (!msk) {		/* Next byte? */
 80025ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d13b      	bne.n	800262e <huffext+0xb6>
			if (!dc) {	/* No input data is available, re-fill input buffer */
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d110      	bne.n	80025de <huffext+0x66>
				dp = jd->inbuf;	/* Top of input buffer */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	62bb      	str	r3, [r7, #40]	@ 0x28
				dc = jd->infunc(jd, dp, JD_SZBUF);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	4798      	blx	r3
 80025d0:	6278      	str	r0, [r7, #36]	@ 0x24
				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <huffext+0x6c>
 80025d8:	f06f 0301 	mvn.w	r3, #1
 80025dc:	e066      	b.n	80026ac <huffext+0x134>
			} else {
				dp++;	/* Next data ptr */
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	3301      	adds	r3, #1
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
			}
			dc--;		/* Decrement number of available bytes */
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	3b01      	subs	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
			if (f) {		/* In flag sequence? */
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d010      	beq.n	8002612 <huffext+0x9a>
				f = 0;		/* Exit flag sequence */
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
				if (*dp != 0)
 80025f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <huffext+0x8a>
					return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 80025fc:	f06f 0305 	mvn.w	r3, #5
 8002600:	e054      	b.n	80026ac <huffext+0x134>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002602:	23ff      	movs	r3, #255	@ 0xff
 8002604:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e00a      	b.n	8002628 <huffext+0xb0>
			} else {
				s = *dp;				/* Get next data byte */
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				if (s == 0xFF) {		/* Is start of flag sequence? */
 800261a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800261e:	2bff      	cmp	r3, #255	@ 0xff
 8002620:	d102      	bne.n	8002628 <huffext+0xb0>
					f = 1; continue;	/* Enter flag sequence, get trailing byte */
 8002622:	2301      	movs	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e03c      	b.n	80026a2 <huffext+0x12a>
				}
			}
			msk = 0x80;		/* Read from MSB */
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		v <<= 1;	/* Get a bit */
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	623b      	str	r3, [r7, #32]
		if (s & msk) v++;
 8002634:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002638:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800263c:	4013      	ands	r3, r2
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <huffext+0xd2>
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	3301      	adds	r3, #1
 8002648:	623b      	str	r3, [r7, #32]
		msk >>= 1;
 800264a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	60ba      	str	r2, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e01a      	b.n	8002696 <huffext+0x11e>
			if (v == *hcode++) {		/* Matched? */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	1c9a      	adds	r2, r3, #2
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	4293      	cmp	r3, r2
 800266e:	d10c      	bne.n	800268a <huffext+0x112>
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002676:	731a      	strb	r2, [r3, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002682:	605a      	str	r2, [r3, #4]
				return *hdata;			/* Return the decoded data */
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	e010      	b.n	80026ac <huffext+0x134>
			}
			hdata++;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	603b      	str	r3, [r7, #0]
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3b01      	subs	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e1      	bne.n	8002660 <huffext+0xe8>
		}
		bl--;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	3b01      	subs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
	} while (bl);
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d182      	bne.n	80025ae <huffext+0x36>

	return 0 - (INT)JDR_FMT1;	/* Err: code not found (may be collapted data) */
 80026a8:	f06f 0305 	mvn.w	r3, #5
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3730      	adds	r7, #48	@ 0x30
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <block_idct>:
static
void block_idct (
	LONG* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
	BYTE* dst	/* Pointer to the destination to store the block as byte array */
)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b095      	sub	sp, #84	@ 0x54
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
	const LONG M13 = (LONG)(1.41421*4096), M2 = (LONG)(1.08239*4096), M4 = (LONG)(2.61313*4096), M5 = (LONG)(1.84776*4096);
 80026be:	f44f 53b5 	mov.w	r3, #5792	@ 0x16a0
 80026c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026c4:	f241 1351 	movw	r3, #4433	@ 0x1151
 80026c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80026ca:	f642 13cf 	movw	r3, #10703	@ 0x29cf
 80026ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80026d0:	f641 5390 	movw	r3, #7568	@ 0x1d90
 80026d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LONG v0, v1, v2, v3, v4, v5, v6, v7;
	LONG t10, t11, t12, t13;
	UINT i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
 80026d6:	2300      	movs	r3, #0
 80026d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026da:	e0b6      	b.n	800284a <block_idct+0x196>
		v0 = src[8 * 0];	/* Get even elements */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	63bb      	str	r3, [r7, #56]	@ 0x38
		v1 = src[8 * 2];
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
		v2 = src[8 * 4];
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026ee:	633b      	str	r3, [r7, #48]	@ 0x30
		v3 = src[8 * 6];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80026f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		t10 = v0 + v2;		/* Process the even elements */
 80026f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fc:	4413      	add	r3, r2
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
		t12 = v0 - v2;
 8002700:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8002708:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800270a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	131b      	asrs	r3, r3, #12
 8002716:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8002718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800271a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271c:	4413      	add	r3, r2
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		t11 -= v3;
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8002728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272c:	4413      	add	r3, r2
 800272e:	63bb      	str	r3, [r7, #56]	@ 0x38
		v3 = t10 - v3;
 8002730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
		v1 = t11 + t12;
 8002738:	6a3a      	ldr	r2, [r7, #32]
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	4413      	add	r3, r2
 800273e:	637b      	str	r3, [r7, #52]	@ 0x34
		v2 = t12 - t11;
 8002740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	633b      	str	r3, [r7, #48]	@ 0x30

		v4 = src[8 * 7];	/* Get odd elements */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274e:	61fb      	str	r3, [r7, #28]
		v5 = src[8 * 1];
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	61bb      	str	r3, [r7, #24]
		v6 = src[8 * 5];
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800275c:	617b      	str	r3, [r7, #20]
		v7 = src[8 * 3];
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;		/* Process the odd elements */
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28
		t11 = v5 + v4;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
		v7 += v6;
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4413      	add	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	131b      	asrs	r3, r3, #12
 8002792:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	4413      	add	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 800279c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	4413      	add	r3, r2
 80027a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	131b      	asrs	r3, r3, #12
 80027aa:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 80027ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	131b      	asrs	r3, r3, #12
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	131b      	asrs	r3, r3, #12
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	1ad2      	subs	r2, r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	61fb      	str	r3, [r7, #28]

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
 80027e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	441a      	add	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	601a      	str	r2, [r3, #0]
		src[8 * 7] = v0 - v7;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	33e0      	adds	r3, #224	@ 0xe0
 80027ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	1a8a      	subs	r2, r1, r2
 80027f4:	601a      	str	r2, [r3, #0]
		src[8 * 1] = v1 + v6;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3320      	adds	r3, #32
 80027fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	440a      	add	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
		src[8 * 6] = v1 - v6;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	33c0      	adds	r3, #192	@ 0xc0
 8002806:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	1a8a      	subs	r2, r1, r2
 800280c:	601a      	str	r2, [r3, #0]
		src[8 * 2] = v2 + v5;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3340      	adds	r3, #64	@ 0x40
 8002812:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	440a      	add	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
		src[8 * 5] = v2 - v5;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	33a0      	adds	r3, #160	@ 0xa0
 800281e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	1a8a      	subs	r2, r1, r2
 8002824:	601a      	str	r2, [r3, #0]
		src[8 * 3] = v3 + v4;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3360      	adds	r3, #96	@ 0x60
 800282a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	440a      	add	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
		src[8 * 4] = v3 - v4;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3380      	adds	r3, #128	@ 0x80
 8002836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	1a8a      	subs	r2, r1, r2
 800283c:	601a      	str	r2, [r3, #0]

		src++;	/* Next column */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002846:	3301      	adds	r3, #1
 8002848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800284a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800284c:	2b07      	cmp	r3, #7
 800284e:	f67f af45 	bls.w	80026dc <block_idct+0x28>
	}

	/* Process rows */
	src -= 8;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3b20      	subs	r3, #32
 8002856:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002858:	2300      	movs	r3, #0
 800285a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800285c:	e0df      	b.n	8002a1e <block_idct+0x36a>
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
		v1 = src[2];
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	637b      	str	r3, [r7, #52]	@ 0x34
		v2 = src[4];
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
		v3 = src[6];
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c

		t10 = v0 + v2;				/* Process the even elements */
 800287a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800287c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287e:	4413      	add	r3, r2
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
		t12 = v0 - v2;
 8002882:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
		t11 = (v1 - v3) * M13 >> 12;
 800288a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	131b      	asrs	r3, r3, #12
 8002898:	623b      	str	r3, [r7, #32]
		v3 += v1;
 800289a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800289c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289e:	4413      	add	r3, r2
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		t11 -= v3;
 80028a2:	6a3a      	ldr	r2, [r7, #32]
 80028a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 80028aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ae:	4413      	add	r3, r2
 80028b0:	63bb      	str	r3, [r7, #56]	@ 0x38
		v3 = t10 - v3;
 80028b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		v1 = t11 + t12;
 80028ba:	6a3a      	ldr	r2, [r7, #32]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	4413      	add	r3, r2
 80028c0:	637b      	str	r3, [r7, #52]	@ 0x34
		v2 = t12 - t11;
 80028c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	633b      	str	r3, [r7, #48]	@ 0x30

		v4 = src[7];				/* Get odd elements */
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	61fb      	str	r3, [r7, #28]
		v5 = src[1];
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61bb      	str	r3, [r7, #24]
		v6 = src[5];
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	617b      	str	r3, [r7, #20]
		v7 = src[3];
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;				/* Process the odd elements */
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		t11 = v5 + v4;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
		v7 += v6;
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4413      	add	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8002902:	6a3a      	ldr	r2, [r7, #32]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	131b      	asrs	r3, r3, #12
 8002910:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	4413      	add	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 800291a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	4413      	add	r3, r2
 8002920:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	131b      	asrs	r3, r3, #12
 8002928:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	131b      	asrs	r3, r3, #12
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	131b      	asrs	r3, r3, #12
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	1ad2      	subs	r2, r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	61fb      	str	r3, [r7, #28]

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
 800295e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	121b      	asrs	r3, r3, #8
 8002966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296a:	4a32      	ldr	r2, [pc, #200]	@ (8002a34 <block_idct+0x380>)
 800296c:	5cd2      	ldrb	r2, [r2, r3]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	701a      	strb	r2, [r3, #0]
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 8002972:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	121b      	asrs	r3, r3, #8
 800297a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	3307      	adds	r3, #7
 8002982:	492c      	ldr	r1, [pc, #176]	@ (8002a34 <block_idct+0x380>)
 8002984:	5c8a      	ldrb	r2, [r1, r2]
 8002986:	701a      	strb	r2, [r3, #0]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 8002988:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	4413      	add	r3, r2
 800298e:	121b      	asrs	r3, r3, #8
 8002990:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	4926      	ldr	r1, [pc, #152]	@ (8002a34 <block_idct+0x380>)
 800299a:	5c8a      	ldrb	r2, [r1, r2]
 800299c:	701a      	strb	r2, [r3, #0]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 800299e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	121b      	asrs	r3, r3, #8
 80029a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	3306      	adds	r3, #6
 80029ae:	4921      	ldr	r1, [pc, #132]	@ (8002a34 <block_idct+0x380>)
 80029b0:	5c8a      	ldrb	r2, [r1, r2]
 80029b2:	701a      	strb	r2, [r3, #0]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 80029b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4413      	add	r3, r2
 80029ba:	121b      	asrs	r3, r3, #8
 80029bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	3302      	adds	r3, #2
 80029c4:	491b      	ldr	r1, [pc, #108]	@ (8002a34 <block_idct+0x380>)
 80029c6:	5c8a      	ldrb	r2, [r1, r2]
 80029c8:	701a      	strb	r2, [r3, #0]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 80029ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	121b      	asrs	r3, r3, #8
 80029d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	3305      	adds	r3, #5
 80029da:	4916      	ldr	r1, [pc, #88]	@ (8002a34 <block_idct+0x380>)
 80029dc:	5c8a      	ldrb	r2, [r1, r2]
 80029de:	701a      	strb	r2, [r3, #0]
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 80029e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	121b      	asrs	r3, r3, #8
 80029e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	3303      	adds	r3, #3
 80029f0:	4910      	ldr	r1, [pc, #64]	@ (8002a34 <block_idct+0x380>)
 80029f2:	5c8a      	ldrb	r2, [r1, r2]
 80029f4:	701a      	strb	r2, [r3, #0]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 80029f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	121b      	asrs	r3, r3, #8
 80029fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3304      	adds	r3, #4
 8002a06:	490b      	ldr	r1, [pc, #44]	@ (8002a34 <block_idct+0x380>)
 8002a08:	5c8a      	ldrb	r2, [r1, r2]
 8002a0a:	701a      	strb	r2, [r3, #0]
		dst += 8;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	3308      	adds	r3, #8
 8002a10:	603b      	str	r3, [r7, #0]

		src += 8;	/* Next row */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3320      	adds	r3, #32
 8002a16:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a20:	2b07      	cmp	r3, #7
 8002a22:	f67f af1c 	bls.w	800285e <block_idct+0x1aa>
	}
}
 8002a26:	bf00      	nop
 8002a28:	bf00      	nop
 8002a2a:	3754      	adds	r7, #84	@ 0x54
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	0800fa3c 	.word	0x0800fa3c

08002a38 <mcu_load>:

static
JRESULT mcu_load (
	JDEC* jd		/* Pointer to the decompressor object */
)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b092      	sub	sp, #72	@ 0x48
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	LONG *tmp = (LONG*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a44:	633b      	str	r3, [r7, #48]	@ 0x30
	const BYTE *hb, *hd;
	const WORD *hc;
	const LONG *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7b9b      	ldrb	r3, [r3, #14]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7bdb      	ldrb	r3, [r3, #15]
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	nbc = 2;					/* Number of C blocks (2) */
 8002a56:	2302      	movs	r3, #2
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
	bp = jd->mcubuf;			/* Pointer to the first block */
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34

	for (blk = 0; blk < nby + nbc; blk++) {
 8002a60:	2300      	movs	r3, #0
 8002a62:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a64:	e11e      	b.n	8002ca4 <mcu_load+0x26c>
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
 8002a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d304      	bcc.n	8002a78 <mcu_load+0x40>
 8002a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	3301      	adds	r3, #1
 8002a76:	e000      	b.n	8002a7a <mcu_load+0x42>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	623b      	str	r3, [r7, #32]

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61fb      	str	r3, [r7, #28]
		hc = jd->huffcode[id][0];
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	3306      	adds	r3, #6
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	61bb      	str	r3, [r7, #24]
		hd = jd->huffdata[id][0];
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	3308      	adds	r3, #8
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	617b      	str	r3, [r7, #20]
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	69f9      	ldr	r1, [r7, #28]
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fd5c 	bl	8002578 <huffext>
 8002ac0:	6138      	str	r0, [r7, #16]
		if (b < 0) return 0 - b;				/* Err: invalid code or input */
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	da04      	bge.n	8002ad2 <mcu_load+0x9a>
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	425b      	negs	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e0f0      	b.n	8002cb4 <mcu_load+0x27c>
		d = jd->dcv[cmp];						/* DC value of previous block */
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (b) {								/* If there is any difference from previous block */
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d02b      	beq.n	8002b40 <mcu_load+0x108>
			e = bitext(jd, b);					/* Extract data bits */
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff fcd1 	bl	8002494 <bitext>
 8002af2:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (e < 0) return 0 - e;			/* Err: input */
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da04      	bge.n	8002b04 <mcu_load+0xcc>
 8002afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	425b      	negs	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e0d7      	b.n	8002cb4 <mcu_load+0x27c>
			b = 1 << (b - 1);					/* MSB position */
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	2201      	movs	r2, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	613b      	str	r3, [r7, #16]
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
 8002b10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <mcu_load+0xee>
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	63bb      	str	r3, [r7, #56]	@ 0x38
			d += e;								/* Get current value */
 8002b26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	4413      	add	r3, r2
 8002b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b30:	b219      	sxth	r1, r3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	3308      	adds	r3, #8
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	460a      	mov	r2, r1
 8002b3e:	809a      	strh	r2, [r3, #4]
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	4413      	add	r3, r2
 8002b46:	3310      	adds	r3, #16
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	3314      	adds	r3, #20
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	121a      	asrs	r2, r3, #8
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	601a      	str	r2, [r3, #0]

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; i++) tmp[i] = 0;	/* Clear rest of elements */
 8002b66:	2301      	movs	r3, #1
 8002b68:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b6a:	e008      	b.n	8002b7e <mcu_load+0x146>
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b72:	4413      	add	r3, r2
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b80:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b82:	d9f3      	bls.n	8002b6c <mcu_load+0x134>
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	61fb      	str	r3, [r7, #28]
		hc = jd->huffcode[id][1];
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	61bb      	str	r3, [r7, #24]
		hd = jd->huffdata[id][1];
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba6:	617b      	str	r3, [r7, #20]
		i = 1;					/* Top of the AC elements */
 8002ba8:	2301      	movs	r3, #1
 8002baa:	643b      	str	r3, [r7, #64]	@ 0x40
		do {
			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	69f9      	ldr	r1, [r7, #28]
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fce0 	bl	8002578 <huffext>
 8002bb8:	6138      	str	r0, [r7, #16]
			if (b == 0) break;					/* EOB? */
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d056      	beq.n	8002c6e <mcu_load+0x236>
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da04      	bge.n	8002bd0 <mcu_load+0x198>
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	425b      	negs	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e071      	b.n	8002cb4 <mcu_load+0x27c>
			z = (UINT)b >> 4;					/* Number of leading zero elements */
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	60bb      	str	r3, [r7, #8]
			if (z) {
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <mcu_load+0x1b6>
				i += z;							/* Skip zero elements */
 8002bdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4413      	add	r3, r2
 8002be2:	643b      	str	r3, [r7, #64]	@ 0x40
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
 8002be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002be6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002be8:	d901      	bls.n	8002bee <mcu_load+0x1b6>
 8002bea:	2306      	movs	r3, #6
 8002bec:	e062      	b.n	8002cb4 <mcu_load+0x27c>
			}
			if (b &= 0x0F) {					/* Bit length */
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d031      	beq.n	8002c60 <mcu_load+0x228>
				d = bitext(jd, b);				/* Extract data bits */
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fc47 	bl	8002494 <bitext>
 8002c06:	63f8      	str	r0, [r7, #60]	@ 0x3c
				if (d < 0) return 0 - d;		/* Err: input device */
 8002c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da04      	bge.n	8002c18 <mcu_load+0x1e0>
 8002c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	425b      	negs	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e04d      	b.n	8002cb4 <mcu_load+0x27c>
				b = 1 << (b - 1);				/* MSB position */
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	613b      	str	r3, [r7, #16]
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
 8002c24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <mcu_load+0x202>
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
 8002c3a:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <mcu_load+0x284>)
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	60bb      	str	r3, [r7, #8]
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c50:	fb03 f202 	mul.w	r2, r3, r2
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c5a:	440b      	add	r3, r1
 8002c5c:	1212      	asrs	r2, r2, #8
 8002c5e:	601a      	str	r2, [r3, #0]
			}
		} while (++i < 64);		/* Next AC element */
 8002c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c62:	3301      	adds	r3, #1
 8002c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c68:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c6a:	d99f      	bls.n	8002bac <mcu_load+0x174>
 8002c6c:	e000      	b.n	8002c70 <mcu_load+0x238>
			if (b == 0) break;					/* EOB? */
 8002c6e:	bf00      	nop

		if (JD_USE_SCALE && jd->scale == 3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7b5b      	ldrb	r3, [r3, #13]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d10b      	bne.n	8002c90 <mcu_load+0x258>
			*bp = (*tmp / 256) + 128;	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
 8002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da00      	bge.n	8002c82 <mcu_load+0x24a>
 8002c80:	33ff      	adds	r3, #255	@ 0xff
 8002c82:	121b      	asrs	r3, r3, #8
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3b80      	subs	r3, #128	@ 0x80
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e003      	b.n	8002c98 <mcu_load+0x260>
		else
			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
 8002c90:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c94:	f7ff fd0e 	bl	80026b4 <block_idct>

		bp += 64;				/* Next block */
 8002c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9a:	3340      	adds	r3, #64	@ 0x40
 8002c9c:	637b      	str	r3, [r7, #52]	@ 0x34
	for (blk = 0; blk < nby + nbc; blk++) {
 8002c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca8:	4413      	add	r3, r2
 8002caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cac:	429a      	cmp	r2, r3
 8002cae:	f4ff aeda 	bcc.w	8002a66 <mcu_load+0x2e>
	}

	return JDR_OK;	/* All blocks have been loaded successfully */
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3748      	adds	r7, #72	@ 0x48
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	0800f97c 	.word	0x0800f97c

08002cc0 <mcu_output>:
	JDEC* jd,	/* Pointer to the decompressor object */
	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	UINT x,		/* MCU position in the image (left of the MCU) */
	UINT y		/* MCU position in the image (top of the MCU) */
)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b0a4      	sub	sp, #144	@ 0x90
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
	const INT CVACC = (sizeof (INT) > 2) ? 1024 : 128;
 8002cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cd2:	647b      	str	r3, [r7, #68]	@ 0x44
	INT yy, cb, cr;
	BYTE *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	7b9b      	ldrb	r3, [r3, #14]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	7bdb      	ldrb	r3, [r3, #15]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce8:	441a      	add	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d904      	bls.n	8002cfc <mcu_output+0x3c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	e000      	b.n	8002cfe <mcu_output+0x3e>
 8002cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
	ry = (y + my <= jd->height) ? my : jd->height - y;
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d04:	441a      	add	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d904      	bls.n	8002d18 <mcu_output+0x58>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1a      	ldr	r2, [r3, #32]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	e000      	b.n	8002d1a <mcu_output+0x5a>
 8002d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	7b5b      	ldrb	r3, [r3, #13]
 8002d20:	461a      	mov	r2, r3
 8002d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d24:	40d3      	lsrs	r3, r2
 8002d26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	7b5b      	ldrb	r3, [r3, #13]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d30:	40d3      	lsrs	r3, r2
 8002d32:	637b      	str	r3, [r7, #52]	@ 0x34
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
 8002d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <mcu_output+0x80>
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <mcu_output+0x84>
 8002d40:	2300      	movs	r3, #0
 8002d42:	e2f1      	b.n	8003328 <mcu_output+0x668>
		x >>= jd->scale; y >>= jd->scale;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	7b5b      	ldrb	r3, [r3, #13]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	40d3      	lsrs	r3, r2
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	7b5b      	ldrb	r3, [r3, #13]
 8002d54:	461a      	mov	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	40d3      	lsrs	r3, r2
 8002d5a:	603b      	str	r3, [r7, #0]
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	823b      	strh	r3, [r7, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	827b      	strh	r3, [r7, #18]
	rect.top = y; rect.bottom = y + ry - 1;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	82bb      	strh	r3, [r7, #20]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	82fb      	strh	r3, [r7, #22]


	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	7b5b      	ldrb	r3, [r3, #13]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	f000 817b 	beq.w	800308c <mcu_output+0x3cc>

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
		for (iy = 0; iy < my; iy++) {
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002da2:	e0d5      	b.n	8002f50 <mcu_output+0x290>
			pc = jd->mcubuf;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			py = pc + iy * 8;
 8002dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002db6:	4413      	add	r3, r2
 8002db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (my == 16) {		/* Double block height? */
 8002dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d113      	bne.n	8002dea <mcu_output+0x12a>
				pc += 64 * 4 + (iy >> 1) * 8;
 8002dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	3320      	adds	r3, #32
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				if (iy >= 8) py += 64;
 8002dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dda:	2b07      	cmp	r3, #7
 8002ddc:	d90f      	bls.n	8002dfe <mcu_output+0x13e>
 8002dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002de2:	3340      	adds	r3, #64	@ 0x40
 8002de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002de8:	e009      	b.n	8002dfe <mcu_output+0x13e>
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
 8002dea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002df8:	4413      	add	r3, r2
 8002dfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			}
			for (ix = 0; ix < mx; ix++) {
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002e04:	e099      	b.n	8002f3a <mcu_output+0x27a>
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
 8002e06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	3b80      	subs	r3, #128	@ 0x80
 8002e0e:	633b      	str	r3, [r7, #48]	@ 0x30
				cr = pc[64] - 128;
 8002e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e14:	3340      	adds	r3, #64	@ 0x40
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3b80      	subs	r3, #128	@ 0x80
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if (mx == 16) {					/* Double block width? */
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d112      	bne.n	8002e48 <mcu_output+0x188>
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
 8002e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d104      	bne.n	8002e34 <mcu_output+0x174>
 8002e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e2e:	3338      	adds	r3, #56	@ 0x38
 8002e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
 8002e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e40:	4413      	add	r3, r2
 8002e42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e46:	e004      	b.n	8002e52 <mcu_output+0x192>
				} else {						/* Single block width */
					pc++;						/* Increase chroma pointer every pixel */
 8002e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				}
				yy = *py++;			/* Get Y component */
 8002e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	62bb      	str	r3, [r7, #40]	@ 0x28

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
 8002e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e6a:	ed9f 6b9f 	vldr	d6, [pc, #636]	@ 80030e8 <mcu_output+0x428>
 8002e6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002e76:	ee17 2a90 	vmov	r2, s15
 8002e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7c:	fb03 f202 	mul.w	r2, r3, r2
 8002e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e82:	fb92 f2f3 	sdiv	r2, r2, r3
 8002e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e88:	4413      	add	r3, r2
 8002e8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e90:	1c59      	adds	r1, r3, #1
 8002e92:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8002e94:	499c      	ldr	r1, [pc, #624]	@ (8003108 <mcu_output+0x448>)
 8002e96:	5c8a      	ldrb	r2, [r1, r2]
 8002e98:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
 8002e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ea4:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 80030f0 <mcu_output+0x430>
 8002ea8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002eac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002eb0:	ee17 2a90 	vmov	r2, s15
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb6:	fb03 f202 	mul.w	r2, r3, r2
 8002eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ec4:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 80030f8 <mcu_output+0x438>
 8002ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ecc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002ed0:	ee17 1a90 	vmov	r1, s15
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	441a      	add	r2, r3
 8002edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002eea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eec:	1c59      	adds	r1, r3, #1
 8002eee:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8002ef0:	4985      	ldr	r1, [pc, #532]	@ (8003108 <mcu_output+0x448>)
 8002ef2:	5c8a      	ldrb	r2, [r1, r2]
 8002ef4:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb) / CVACC);
 8002ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f00:	ed9f 6b7f 	vldr	d6, [pc, #508]	@ 8003100 <mcu_output+0x440>
 8002f04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f08:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002f0c:	ee17 2a90 	vmov	r2, s15
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	fb03 f202 	mul.w	r2, r3, r2
 8002f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f18:	fb92 f2f3 	sdiv	r2, r2, r3
 8002f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1e:	4413      	add	r3, r2
 8002f20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f26:	1c59      	adds	r1, r3, #1
 8002f28:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8002f2a:	4977      	ldr	r1, [pc, #476]	@ (8003108 <mcu_output+0x448>)
 8002f2c:	5c8a      	ldrb	r2, [r1, r2]
 8002f2e:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix++) {
 8002f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f34:	3301      	adds	r3, #1
 8002f36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f3a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f4ff af60 	bcc.w	8002e06 <mcu_output+0x146>
		for (iy = 0; iy < my; iy++) {
 8002f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f50:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f56:	429a      	cmp	r2, r3
 8002f58:	f4ff af24 	bcc.w	8002da4 <mcu_output+0xe4>
			}
		}

		/* Descale the MCU rectangular if needed */
		if (JD_USE_SCALE && jd->scale) {
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	7b5b      	ldrb	r3, [r3, #13]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8159 	beq.w	8003218 <mcu_output+0x558>
			UINT x, y, r, g, b, s, w, a;
			BYTE *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	7b5b      	ldrb	r3, [r3, #13]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
			w = 1 << jd->scale;	/* Width of square */
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	7b5b      	ldrb	r3, [r3, #13]
 8002f72:	461a      	mov	r2, r3
 8002f74:	2301      	movs	r3, #1
 8002f76:	4093      	lsls	r3, r2
 8002f78:	623b      	str	r3, [r7, #32]
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
 8002f7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	1ad2      	subs	r2, r2, r3
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	61fb      	str	r3, [r7, #28]
			op = (BYTE*)jd->workbuf;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f8c:	667b      	str	r3, [r7, #100]	@ 0x64
			for (iy = 0; iy < my; iy += w) {
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f94:	e074      	b.n	8003080 <mcu_output+0x3c0>
				for (ix = 0; ix < mx; ix += w) {
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f9c:	e065      	b.n	800306a <mcu_output+0x3aa>
					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8002fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fa8:	fb03 f202 	mul.w	r2, r3, r2
 8002fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fb0:	441a      	add	r2, r3
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
					r = g = b = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc6:	673b      	str	r3, [r7, #112]	@ 0x70
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 8002fc8:	2300      	movs	r3, #0
 8002fca:	677b      	str	r3, [r7, #116]	@ 0x74
 8002fcc:	e028      	b.n	8003020 <mcu_output+0x360>
						for (x = 0; x < w; x++) {
 8002fce:	2300      	movs	r3, #0
 8002fd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fd2:	e01a      	b.n	800300a <mcu_output+0x34a>
							r += *rgb24++;
 8002fd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fe0:	4413      	add	r3, r2
 8002fe2:	673b      	str	r3, [r7, #112]	@ 0x70
							g += *rgb24++;
 8002fe4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff0:	4413      	add	r3, r2
 8002ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
							b += *rgb24++;
 8002ff4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003000:	4413      	add	r3, r2
 8003002:	66bb      	str	r3, [r7, #104]	@ 0x68
						for (x = 0; x < w; x++) {
 8003004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003006:	3301      	adds	r3, #1
 8003008:	67bb      	str	r3, [r7, #120]	@ 0x78
 800300a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	429a      	cmp	r2, r3
 8003010:	d3e0      	bcc.n	8002fd4 <mcu_output+0x314>
						}
						rgb24 += a;
 8003012:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	67fb      	str	r3, [r7, #124]	@ 0x7c
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 800301a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800301c:	3301      	adds	r3, #1
 800301e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003020:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	429a      	cmp	r2, r3
 8003026:	d3d2      	bcc.n	8002fce <mcu_output+0x30e>
					}							/* Put the averaged RGB value as a pixel */
					*op++ = (BYTE)(r >> s);
 8003028:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	fa22 f103 	lsr.w	r1, r2, r3
 8003030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	667a      	str	r2, [r7, #100]	@ 0x64
 8003036:	b2ca      	uxtb	r2, r1
 8003038:	701a      	strb	r2, [r3, #0]
					*op++ = (BYTE)(g >> s);
 800303a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	fa22 f103 	lsr.w	r1, r2, r3
 8003042:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	667a      	str	r2, [r7, #100]	@ 0x64
 8003048:	b2ca      	uxtb	r2, r1
 800304a:	701a      	strb	r2, [r3, #0]
					*op++ = (BYTE)(b >> s);
 800304c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	fa22 f103 	lsr.w	r1, r2, r3
 8003054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	667a      	str	r2, [r7, #100]	@ 0x64
 800305a:	b2ca      	uxtb	r2, r1
 800305c:	701a      	strb	r2, [r3, #0]
				for (ix = 0; ix < mx; ix += w) {
 800305e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	4413      	add	r3, r2
 8003066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800306a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800306e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003070:	429a      	cmp	r2, r3
 8003072:	d394      	bcc.n	8002f9e <mcu_output+0x2de>
			for (iy = 0; iy < my; iy += w) {
 8003074:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	4413      	add	r3, r2
 800307c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003080:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003086:	429a      	cmp	r2, r3
 8003088:	d385      	bcc.n	8002f96 <mcu_output+0x2d6>
 800308a:	e0c5      	b.n	8003218 <mcu_output+0x558>
		}

	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003090:	67fb      	str	r3, [r7, #124]	@ 0x7c
		pc = jd->mcubuf + mx * my;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003098:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
 80030a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	3b80      	subs	r3, #128	@ 0x80
 80030ac:	633b      	str	r3, [r7, #48]	@ 0x30
		cr = pc[64] - 128;
 80030ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030b2:	3340      	adds	r3, #64	@ 0x40
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	3b80      	subs	r3, #128	@ 0x80
 80030b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (iy = 0; iy < my; iy += 8) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030c0:	e0a4      	b.n	800320c <mcu_output+0x54c>
			py = jd->mcubuf;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (iy == 8) py += 64 * 2;
 80030ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d104      	bne.n	80030dc <mcu_output+0x41c>
 80030d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030d6:	3380      	adds	r3, #128	@ 0x80
 80030d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			for (ix = 0; ix < mx; ix += 8) {
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80030e2:	e089      	b.n	80031f8 <mcu_output+0x538>
 80030e4:	f3af 8000 	nop.w
 80030e8:	8d4fdf3b 	.word	0x8d4fdf3b
 80030ec:	3ff66e97 	.word	0x3ff66e97
 80030f0:	9374bc6a 	.word	0x9374bc6a
 80030f4:	3fd60418 	.word	0x3fd60418
 80030f8:	872b020c 	.word	0x872b020c
 80030fc:	3fe6d916 	.word	0x3fe6d916
 8003100:	ac083127 	.word	0xac083127
 8003104:	3ffc5a1c 	.word	0x3ffc5a1c
 8003108:	0800fa3c 	.word	0x0800fa3c
				yy = *py;	/* Get Y component */
 800310c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	62bb      	str	r3, [r7, #40]	@ 0x28
				py += 64;
 8003114:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003118:	3340      	adds	r3, #64	@ 0x40
 800311a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
 800311e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003128:	ed9f 6b81 	vldr	d6, [pc, #516]	@ 8003330 <mcu_output+0x670>
 800312c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003130:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003134:	ee17 2a90 	vmov	r2, s15
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	fb03 f202 	mul.w	r2, r3, r2
 800313e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003140:	fb92 f2f3 	sdiv	r2, r2, r3
 8003144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003146:	4413      	add	r3, r2
 8003148:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800314c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800314e:	1c59      	adds	r1, r3, #1
 8003150:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8003152:	497f      	ldr	r1, [pc, #508]	@ (8003350 <mcu_output+0x690>)
 8003154:	5c8a      	ldrb	r2, [r1, r2]
 8003156:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
 8003158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003162:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8003338 <mcu_output+0x678>
 8003166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800316a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800316e:	ee17 2a90 	vmov	r2, s15
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	fb03 f202 	mul.w	r2, r3, r2
 8003178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003182:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8003340 <mcu_output+0x680>
 8003186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800318a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800318e:	ee17 1a90 	vmov	r1, s15
 8003192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	441a      	add	r2, r3
 800319a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800319c:	fb92 f3f3 	sdiv	r3, r2, r3
 80031a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031aa:	1c59      	adds	r1, r3, #1
 80031ac:	67f9      	str	r1, [r7, #124]	@ 0x7c
 80031ae:	4968      	ldr	r1, [pc, #416]	@ (8003350 <mcu_output+0x690>)
 80031b0:	5c8a      	ldrb	r2, [r1, r2]
 80031b2:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb / CVACC));
 80031b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80031be:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8003348 <mcu_output+0x688>
 80031c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031c6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80031ca:	ee17 2a90 	vmov	r2, s15
 80031ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d0:	fb03 f202 	mul.w	r2, r3, r2
 80031d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031d6:	fb92 f2f3 	sdiv	r2, r2, r3
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	4413      	add	r3, r2
 80031de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031e4:	1c59      	adds	r1, r3, #1
 80031e6:	67f9      	str	r1, [r7, #124]	@ 0x7c
 80031e8:	4959      	ldr	r1, [pc, #356]	@ (8003350 <mcu_output+0x690>)
 80031ea:	5c8a      	ldrb	r2, [r1, r2]
 80031ec:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix += 8) {
 80031ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f2:	3308      	adds	r3, #8
 80031f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80031fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031fe:	429a      	cmp	r2, r3
 8003200:	d384      	bcc.n	800310c <mcu_output+0x44c>
		for (iy = 0; iy < my; iy += 8) {
 8003202:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003206:	3308      	adds	r3, #8
 8003208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800320c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003212:	429a      	cmp	r2, r3
 8003214:	f4ff af55 	bcc.w	80030c2 <mcu_output+0x402>
			}
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	7b5b      	ldrb	r3, [r3, #13]
 800321c:	461a      	mov	r2, r3
 800321e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003220:	40d3      	lsrs	r3, r2
 8003222:	643b      	str	r3, [r7, #64]	@ 0x40
	if (rx < mx) {
 8003224:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003228:	429a      	cmp	r2, r3
 800322a:	d239      	bcs.n	80032a0 <mcu_output+0x5e0>
		BYTE *s, *d;
		UINT x, y;

		s = d = (BYTE*)jd->workbuf;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003230:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003234:	663b      	str	r3, [r7, #96]	@ 0x60
		for (y = 0; y < ry; y++) {
 8003236:	2300      	movs	r3, #0
 8003238:	657b      	str	r3, [r7, #84]	@ 0x54
 800323a:	e02d      	b.n	8003298 <mcu_output+0x5d8>
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 800323c:	2300      	movs	r3, #0
 800323e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003240:	e01a      	b.n	8003278 <mcu_output+0x5b8>
				*d++ = *s++;
 8003242:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003244:	1c53      	adds	r3, r2, #1
 8003246:	663b      	str	r3, [r7, #96]	@ 0x60
 8003248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800324a:	1c59      	adds	r1, r3, #1
 800324c:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003252:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003254:	1c53      	adds	r3, r2, #1
 8003256:	663b      	str	r3, [r7, #96]	@ 0x60
 8003258:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800325a:	1c59      	adds	r1, r3, #1
 800325c:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003262:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003264:	1c53      	adds	r3, r2, #1
 8003266:	663b      	str	r3, [r7, #96]	@ 0x60
 8003268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800326a:	1c59      	adds	r1, r3, #1
 800326c:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800326e:	7812      	ldrb	r2, [r2, #0]
 8003270:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003272:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003274:	3301      	adds	r3, #1
 8003276:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	429a      	cmp	r2, r3
 800327e:	d3e0      	bcc.n	8003242 <mcu_output+0x582>
			}
			s += (mx - rx) * 3;	/* Skip truncated pixels */
 8003280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003284:	1ad2      	subs	r2, r2, r3
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800328e:	4413      	add	r3, r2
 8003290:	663b      	str	r3, [r7, #96]	@ 0x60
		for (y = 0; y < ry; y++) {
 8003292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003294:	3301      	adds	r3, #1
 8003296:	657b      	str	r3, [r7, #84]	@ 0x54
 8003298:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329c:	429a      	cmp	r2, r3
 800329e:	d3cd      	bcc.n	800323c <mcu_output+0x57c>
		}
	}

	/* Convert RGB888 to RGB565 if needed */
	if (JD_FORMAT == 1) {
		BYTE *s = (BYTE*)jd->workbuf;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032a4:	653b      	str	r3, [r7, #80]	@ 0x50
		WORD w, *d = (WORD*)s;
 80032a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		UINT n = rx * ry;
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	64bb      	str	r3, [r7, #72]	@ 0x48

		do {
			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
 80032b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	653a      	str	r2, [r7, #80]	@ 0x50
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	b29a      	uxth	r2, r3
 80032c0:	4b24      	ldr	r3, [pc, #144]	@ (8003354 <mcu_output+0x694>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	837b      	strh	r3, [r7, #26]
			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
 80032c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	653a      	str	r2, [r7, #80]	@ 0x50
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80032d4:	b21a      	sxth	r2, r3
 80032d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80032da:	4313      	orrs	r3, r2
 80032dc:	b21b      	sxth	r3, r3
 80032de:	837b      	strh	r3, [r7, #26]
			w |= *s++ >> 3;				/* -----------BBBBB */
 80032e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	653a      	str	r2, [r7, #80]	@ 0x50
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	08db      	lsrs	r3, r3, #3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	b21a      	sxth	r2, r3
 80032ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	837b      	strh	r3, [r7, #26]
			*d++ = w;
 80032f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fa:	1c9a      	adds	r2, r3, #2
 80032fc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032fe:	8b7a      	ldrh	r2, [r7, #26]
 8003300:	801a      	strh	r2, [r3, #0]
		} while (--n);
 8003302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003304:	3b01      	subs	r3, #1
 8003306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1d2      	bne.n	80032b4 <mcu_output+0x5f4>
	}
	
	/* Output the RGB rectangular */
	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003312:	f107 0210 	add.w	r2, r7, #16
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	4798      	blx	r3
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	3790      	adds	r7, #144	@ 0x90
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	8d4fdf3b 	.word	0x8d4fdf3b
 8003334:	3ff66e97 	.word	0x3ff66e97
 8003338:	9374bc6a 	.word	0x9374bc6a
 800333c:	3fd60418 	.word	0x3fd60418
 8003340:	872b020c 	.word	0x872b020c
 8003344:	3fe6d916 	.word	0x3fe6d916
 8003348:	ac083127 	.word	0xac083127
 800334c:	3ffc5a1c 	.word	0x3ffc5a1c
 8003350:	0800fa3c 	.word	0x0800fa3c
 8003354:	fffff800 	.word	0xfffff800

08003358 <restart>:
static
JRESULT restart (
	JDEC* jd,	/* Pointer to the decompressor object */
	WORD rstn	/* Expected restert sequense number */
)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
	WORD d;
	BYTE *dp;

    
	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	613b      	str	r3, [r7, #16]
	d = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < 2; i++) {
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	e025      	b.n	80033c6 <restart+0x6e>
		if (!dc) {	/* No input data is available, re-fill input buffer */
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10f      	bne.n	80033a0 <restart+0x48>
			dp = jd->inbuf;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	60bb      	str	r3, [r7, #8]
			dc = jd->infunc(jd, dp, JD_SZBUF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
 8003394:	6138      	str	r0, [r7, #16]
			if (!dc) return JDR_INP;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d104      	bne.n	80033a6 <restart+0x4e>
 800339c:	2302      	movs	r3, #2
 800339e:	e03e      	b.n	800341e <restart+0xc6>
		} else {
			dp++;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60bb      	str	r3, [r7, #8]
		}
		dc--;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
		d = (d << 8) | *dp;	/* Get a byte */
 80033ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	b21a      	sxth	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b21b      	sxth	r3, r3
 80033ba:	4313      	orrs	r3, r2
 80033bc:	b21b      	sxth	r3, r3
 80033be:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < 2; i++) {
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3301      	adds	r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d9d6      	bls.n	800337a <restart+0x22>
	}
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	731a      	strb	r2, [r3, #12]

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
 80033de:	89fa      	ldrh	r2, [r7, #14]
 80033e0:	f64f 73d8 	movw	r3, #65496	@ 0xffd8
 80033e4:	4013      	ands	r3, r2
 80033e6:	f64f 72d0 	movw	r2, #65488	@ 0xffd0
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d107      	bne.n	80033fe <restart+0xa6>
 80033ee:	89fa      	ldrh	r2, [r7, #14]
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	4053      	eors	r3, r2
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <restart+0xaa>
		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
 80033fe:	2306      	movs	r3, #6
 8003400:	e00d      	b.n	800341e <restart+0xc6>

	/* Reset DC offset */
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	829a      	strh	r2, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	82da      	strh	r2, [r3, #22]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	831a      	strh	r2, [r3, #24]

	return JDR_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <jd_prepare>:
	UINT (*infunc)(JDEC*, BYTE*, UINT),	/* JPEG strem input function */
	void* pool,			/* Working buffer for the decompression session */
	UINT sz_pool,		/* Size of working buffer */
	void* dev			/* I/O device identifier for the session */
)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	@ 0x30
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
	DWORD ofs;
	UINT n, i, j, len;
	JRESULT rc;


	if (!pool) return JDR_PAR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <jd_prepare+0x18>
 800343c:	2305      	movs	r3, #5
 800343e:	e296      	b.n	800396e <jd_prepare+0x546>

	jd->pool = pool;		/* Work memroy */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	66da      	str	r2, [r3, #108]	@ 0x6c
	jd->sz_pool = sz_pool;	/* Size of given work memory */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	671a      	str	r2, [r3, #112]	@ 0x70
	jd->infunc = infunc;	/* Stream input function */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	675a      	str	r2, [r3, #116]	@ 0x74
	jd->device = dev;		/* I/O device identifier */
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003456:	679a      	str	r2, [r3, #120]	@ 0x78
	jd->nrst = 0;			/* No restart interval (default) */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	835a      	strh	r2, [r3, #26]

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 800345e:	2300      	movs	r3, #0
 8003460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003462:	e029      	b.n	80034b8 <jd_prepare+0x90>
		for (j = 0; j < 2; j++) {
 8003464:	2300      	movs	r3, #0
 8003466:	627b      	str	r3, [r7, #36]	@ 0x24
 8003468:	e020      	b.n	80034ac <jd_prepare+0x84>
			jd->huffbits[i][j] = 0;
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	0059      	lsls	r1, r3, #1
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	440b      	add	r3, r1
 8003474:	3308      	adds	r3, #8
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	2200      	movs	r2, #0
 800347c:	605a      	str	r2, [r3, #4]
			jd->huffcode[i][j] = 0;
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003482:	0059      	lsls	r1, r3, #1
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	440b      	add	r3, r1
 8003488:	330c      	adds	r3, #12
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	2200      	movs	r2, #0
 8003490:	605a      	str	r2, [r3, #4]
			jd->huffdata[i][j] = 0;
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003496:	0059      	lsls	r1, r3, #1
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	440b      	add	r3, r1
 800349c:	3310      	adds	r3, #16
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	2200      	movs	r2, #0
 80034a4:	605a      	str	r2, [r3, #4]
		for (j = 0; j < 2; j++) {
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	3301      	adds	r3, #1
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d9db      	bls.n	800346a <jd_prepare+0x42>
	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 80034b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b4:	3301      	adds	r3, #1
 80034b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d9d2      	bls.n	8003464 <jd_prepare+0x3c>
		}
	}
	for (i = 0; i < 4; i++) jd->qttbl[i] = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034c2:	e009      	b.n	80034d8 <jd_prepare+0xb0>
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c8:	3314      	adds	r3, #20
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	2200      	movs	r2, #0
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d4:	3301      	adds	r3, #1
 80034d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d9f2      	bls.n	80034c4 <jd_prepare+0x9c>

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
 80034de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7fe fe7d 	bl	80021e2 <alloc_pool>
 80034e8:	61f8      	str	r0, [r7, #28]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	609a      	str	r2, [r3, #8]
	if (!seg) return JDR_MEM1;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <jd_prepare+0xd2>
 80034f6:	2303      	movs	r3, #3
 80034f8:	e239      	b.n	800396e <jd_prepare+0x546>

	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fe:	2202      	movs	r2, #2
 8003500:	69f9      	ldr	r1, [r7, #28]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	4798      	blx	r3
 8003506:	4603      	mov	r3, r0
 8003508:	2b02      	cmp	r3, #2
 800350a:	d001      	beq.n	8003510 <jd_prepare+0xe8>
 800350c:	2302      	movs	r3, #2
 800350e:	e22e      	b.n	800396e <jd_prepare+0x546>
	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	b21b      	sxth	r3, r3
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	b21a      	sxth	r2, r3
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3301      	adds	r3, #1
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b21b      	sxth	r3, r3
 8003522:	4313      	orrs	r3, r2
 8003524:	b21b      	sxth	r3, r3
 8003526:	f113 0f28 	cmn.w	r3, #40	@ 0x28
 800352a:	d001      	beq.n	8003530 <jd_prepare+0x108>
 800352c:	2306      	movs	r3, #6
 800352e:	e21e      	b.n	800396e <jd_prepare+0x546>
	ofs = 2;
 8003530:	2302      	movs	r3, #2
 8003532:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003538:	2204      	movs	r2, #4
 800353a:	69f9      	ldr	r1, [r7, #28]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	4798      	blx	r3
 8003540:	4603      	mov	r3, r0
 8003542:	2b04      	cmp	r3, #4
 8003544:	d001      	beq.n	800354a <jd_prepare+0x122>
 8003546:	2302      	movs	r3, #2
 8003548:	e211      	b.n	800396e <jd_prepare+0x546>
		marker = LDB_WORD(seg);		/* Marker */
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b21b      	sxth	r3, r3
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	b21a      	sxth	r2, r3
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b21b      	sxth	r3, r3
 800355c:	4313      	orrs	r3, r2
 800355e:	b21b      	sxth	r3, r3
 8003560:	837b      	strh	r3, [r7, #26]
		len = LDB_WORD(seg + 2);	/* Length field */
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3302      	adds	r3, #2
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b21b      	sxth	r3, r3
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	b21a      	sxth	r2, r3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3303      	adds	r3, #3
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b21b      	sxth	r3, r3
 8003576:	4313      	orrs	r3, r2
 8003578:	b21b      	sxth	r3, r3
 800357a:	b29b      	uxth	r3, r3
 800357c:	623b      	str	r3, [r7, #32]
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d904      	bls.n	800358e <jd_prepare+0x166>
 8003584:	8b7b      	ldrh	r3, [r7, #26]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	b29b      	uxth	r3, r3
 800358a:	2bff      	cmp	r3, #255	@ 0xff
 800358c:	d001      	beq.n	8003592 <jd_prepare+0x16a>
 800358e:	2306      	movs	r3, #6
 8003590:	e1ed      	b.n	800396e <jd_prepare+0x546>
		len -= 2;		/* Content size excluding length field */
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	3b02      	subs	r3, #2
 8003596:	623b      	str	r3, [r7, #32]
		ofs += 4 + len;	/* Number of bytes loaded */
 8003598:	6a3a      	ldr	r2, [r7, #32]
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		switch (marker & 0xFF) {
 80035a2:	8b7b      	ldrh	r3, [r7, #26]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2bdd      	cmp	r3, #221	@ 0xdd
 80035a8:	f000 80b3 	beq.w	8003712 <jd_prepare+0x2ea>
 80035ac:	2bdd      	cmp	r3, #221	@ 0xdd
 80035ae:	f300 81cd 	bgt.w	800394c <jd_prepare+0x524>
 80035b2:	2bdb      	cmp	r3, #219	@ 0xdb
 80035b4:	f000 80ed 	beq.w	8003792 <jd_prepare+0x36a>
 80035b8:	2bdb      	cmp	r3, #219	@ 0xdb
 80035ba:	f300 81c7 	bgt.w	800394c <jd_prepare+0x524>
 80035be:	2bd9      	cmp	r3, #217	@ 0xd9
 80035c0:	dc24      	bgt.n	800360c <jd_prepare+0x1e4>
 80035c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80035c4:	f2c0 81c2 	blt.w	800394c <jd_prepare+0x524>
 80035c8:	3bc0      	subs	r3, #192	@ 0xc0
 80035ca:	2201      	movs	r2, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	4a92      	ldr	r2, [pc, #584]	@ (800381c <jd_prepare+0x3f4>)
 80035d2:	401a      	ands	r2, r3
 80035d4:	2a00      	cmp	r2, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2201      	movne	r2, #1
 80035da:	2200      	moveq	r2, #0
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	2a00      	cmp	r2, #0
 80035e0:	f040 81b2 	bne.w	8003948 <jd_prepare+0x520>
 80035e4:	f003 0210 	and.w	r2, r3, #16
 80035e8:	2a00      	cmp	r2, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2201      	movne	r2, #1
 80035ee:	2200      	moveq	r2, #0
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	f040 80ae 	bne.w	8003754 <jd_prepare+0x32c>
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d104      	bne.n	8003614 <jd_prepare+0x1ec>
 800360a:	e19f      	b.n	800394c <jd_prepare+0x524>
 800360c:	2bda      	cmp	r3, #218	@ 0xda
 800360e:	f000 80df 	beq.w	80037d0 <jd_prepare+0x3a8>
 8003612:	e19b      	b.n	800394c <jd_prepare+0x524>
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361a:	d901      	bls.n	8003620 <jd_prepare+0x1f8>
 800361c:	2304      	movs	r3, #4
 800361e:	e1a6      	b.n	800396e <jd_prepare+0x546>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	69f9      	ldr	r1, [r7, #28]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	4798      	blx	r3
 800362c:	4602      	mov	r2, r0
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	4293      	cmp	r3, r2
 8003632:	d001      	beq.n	8003638 <jd_prepare+0x210>
 8003634:	2302      	movs	r3, #2
 8003636:	e19a      	b.n	800396e <jd_prepare+0x546>

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	3303      	adds	r3, #3
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b21b      	sxth	r3, r3
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	b21a      	sxth	r2, r3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3304      	adds	r3, #4
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b21b      	sxth	r3, r3
 800364c:	4313      	orrs	r3, r2
 800364e:	b21b      	sxth	r3, r3
 8003650:	b29b      	uxth	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	61da      	str	r2, [r3, #28]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3301      	adds	r3, #1
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b21b      	sxth	r3, r3
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	b21a      	sxth	r2, r3
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	3302      	adds	r3, #2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b21b      	sxth	r3, r3
 800366c:	4313      	orrs	r3, r2
 800366e:	b21b      	sxth	r3, r3
 8003670:	b29b      	uxth	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	621a      	str	r2, [r3, #32]
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3305      	adds	r3, #5
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d001      	beq.n	8003686 <jd_prepare+0x25e>
 8003682:	2308      	movs	r3, #8
 8003684:	e173      	b.n	800396e <jd_prepare+0x546>

			/* Check three image components */
			for (i = 0; i < 3; i++) {	
 8003686:	2300      	movs	r3, #0
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368a:	e03e      	b.n	800370a <jd_prepare+0x2e2>
				b = seg[7 + 3 * i];							/* Get sampling factor */
 800368c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	3307      	adds	r3, #7
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	74fb      	strb	r3, [r7, #19]
				if (!i) {	/* Y component */
 800369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d116      	bne.n	80036d2 <jd_prepare+0x2aa>
					if (b != 0x11 && b != 0x22 && b != 0x21)/* Check sampling factor */
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	2b11      	cmp	r3, #17
 80036a8:	d007      	beq.n	80036ba <jd_prepare+0x292>
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
 80036ac:	2b22      	cmp	r3, #34	@ 0x22
 80036ae:	d004      	beq.n	80036ba <jd_prepare+0x292>
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	2b21      	cmp	r3, #33	@ 0x21
 80036b4:	d001      	beq.n	80036ba <jd_prepare+0x292>
						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
 80036b6:	2308      	movs	r3, #8
 80036b8:	e159      	b.n	800396e <jd_prepare+0x546>
					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	739a      	strb	r2, [r3, #14]
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	73da      	strb	r2, [r3, #15]
 80036d0:	e004      	b.n	80036dc <jd_prepare+0x2b4>
				} else {	/* Cb/Cr component */
					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	2b11      	cmp	r3, #17
 80036d6:	d001      	beq.n	80036dc <jd_prepare+0x2b4>
 80036d8:	2308      	movs	r3, #8
 80036da:	e148      	b.n	800396e <jd_prepare+0x546>
				}
				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
 80036dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	3308      	adds	r3, #8
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	74fb      	strb	r3, [r7, #19]
				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d901      	bls.n	80036f8 <jd_prepare+0x2d0>
 80036f4:	2308      	movs	r3, #8
 80036f6:	e13a      	b.n	800396e <jd_prepare+0x546>
				jd->qtid[i] = b;
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fc:	4413      	add	r3, r2
 80036fe:	3310      	adds	r3, #16
 8003700:	7cfa      	ldrb	r2, [r7, #19]
 8003702:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < 3; i++) {	
 8003704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003706:	3301      	adds	r3, #1
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	2b02      	cmp	r3, #2
 800370e:	d9bd      	bls.n	800368c <jd_prepare+0x264>
			}
			break;
 8003710:	e12c      	b.n	800396c <jd_prepare+0x544>

		case 0xDD:	/* DRI */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003718:	d901      	bls.n	800371e <jd_prepare+0x2f6>
 800371a:	2304      	movs	r3, #4
 800371c:	e127      	b.n	800396e <jd_prepare+0x546>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003722:	6a3a      	ldr	r2, [r7, #32]
 8003724:	69f9      	ldr	r1, [r7, #28]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	4798      	blx	r3
 800372a:	4602      	mov	r2, r0
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	4293      	cmp	r3, r2
 8003730:	d001      	beq.n	8003736 <jd_prepare+0x30e>
 8003732:	2302      	movs	r3, #2
 8003734:	e11b      	b.n	800396e <jd_prepare+0x546>

			/* Get restart interval (MCUs) */
			jd->nrst = LDB_WORD(seg);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	b21b      	sxth	r3, r3
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	b21a      	sxth	r2, r3
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	3301      	adds	r3, #1
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b21b      	sxth	r3, r3
 8003748:	4313      	orrs	r3, r2
 800374a:	b21b      	sxth	r3, r3
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	835a      	strh	r2, [r3, #26]
			break;
 8003752:	e10b      	b.n	800396c <jd_prepare+0x544>

		case 0xC4:	/* DHT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375a:	d901      	bls.n	8003760 <jd_prepare+0x338>
 800375c:	2304      	movs	r3, #4
 800375e:	e106      	b.n	800396e <jd_prepare+0x546>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	69f9      	ldr	r1, [r7, #28]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	4798      	blx	r3
 800376c:	4602      	mov	r2, r0
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	4293      	cmp	r3, r2
 8003772:	d001      	beq.n	8003778 <jd_prepare+0x350>
 8003774:	2302      	movs	r3, #2
 8003776:	e0fa      	b.n	800396e <jd_prepare+0x546>

			/* Create huffman tables */
			rc = create_huffman_tbl(jd, seg, len);
 8003778:	6a3a      	ldr	r2, [r7, #32]
 800377a:	69f9      	ldr	r1, [r7, #28]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fe fdb3 	bl	80022e8 <create_huffman_tbl>
 8003782:	4603      	mov	r3, r0
 8003784:	767b      	strb	r3, [r7, #25]
			if (rc) return rc;
 8003786:	7e7b      	ldrb	r3, [r7, #25]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80ec 	beq.w	8003966 <jd_prepare+0x53e>
 800378e:	7e7b      	ldrb	r3, [r7, #25]
 8003790:	e0ed      	b.n	800396e <jd_prepare+0x546>
			break;

		case 0xDB:	/* DQT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003798:	d901      	bls.n	800379e <jd_prepare+0x376>
 800379a:	2304      	movs	r3, #4
 800379c:	e0e7      	b.n	800396e <jd_prepare+0x546>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	69f9      	ldr	r1, [r7, #28]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	4798      	blx	r3
 80037aa:	4602      	mov	r2, r0
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d001      	beq.n	80037b6 <jd_prepare+0x38e>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e0db      	b.n	800396e <jd_prepare+0x546>

			/* Create de-quantizer tables */
			rc = create_qt_tbl(jd, seg, len);
 80037b6:	6a3a      	ldr	r2, [r7, #32]
 80037b8:	69f9      	ldr	r1, [r7, #28]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7fe fd38 	bl	8002230 <create_qt_tbl>
 80037c0:	4603      	mov	r3, r0
 80037c2:	767b      	strb	r3, [r7, #25]
			if (rc) return rc;
 80037c4:	7e7b      	ldrb	r3, [r7, #25]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80cf 	beq.w	800396a <jd_prepare+0x542>
 80037cc:	7e7b      	ldrb	r3, [r7, #25]
 80037ce:	e0ce      	b.n	800396e <jd_prepare+0x546>
			break;

		case 0xDA:	/* SOS */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d6:	d901      	bls.n	80037dc <jd_prepare+0x3b4>
 80037d8:	2304      	movs	r3, #4
 80037da:	e0c8      	b.n	800396e <jd_prepare+0x546>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	69f9      	ldr	r1, [r7, #28]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	4798      	blx	r3
 80037e8:	4602      	mov	r2, r0
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d001      	beq.n	80037f4 <jd_prepare+0x3cc>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e0bc      	b.n	800396e <jd_prepare+0x546>

			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <jd_prepare+0x3dc>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <jd_prepare+0x3e0>
 8003804:	2306      	movs	r3, #6
 8003806:	e0b2      	b.n	800396e <jd_prepare+0x546>

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d001      	beq.n	8003814 <jd_prepare+0x3ec>
 8003810:	2308      	movs	r3, #8
 8003812:	e0ac      	b.n	800396e <jd_prepare+0x546>

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
 8003814:	2300      	movs	r3, #0
 8003816:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003818:	e03a      	b.n	8003890 <jd_prepare+0x468>
 800381a:	bf00      	nop
 800381c:	0200eeee 	.word	0x0200eeee
				b = seg[2 + 2 * i];	/* Get huffman table ID */
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	74fb      	strb	r3, [r7, #19]
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <jd_prepare+0x416>
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b11      	cmp	r3, #17
 8003838:	d001      	beq.n	800383e <jd_prepare+0x416>
 800383a:	2308      	movs	r3, #8
 800383c:	e097      	b.n	800396e <jd_prepare+0x546>
				b = i ? 1 : 0;
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	74fb      	strb	r3, [r7, #19]
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1])	/* Check huffman table for this component */
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d006      	beq.n	800386a <jd_prepare+0x442>
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <jd_prepare+0x446>
					return JDR_FMT1;							/* Err: Huffman table not loaded */
 800386a:	2306      	movs	r3, #6
 800386c:	e07f      	b.n	800396e <jd_prepare+0x546>
				if (!jd->qttbl[jd->qtid[i]]) return JDR_FMT1;	/* Err: Dequantizer table not loaded */
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003872:	4413      	add	r3, r2
 8003874:	3310      	adds	r3, #16
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	3314      	adds	r3, #20
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <jd_prepare+0x462>
 8003886:	2306      	movs	r3, #6
 8003888:	e071      	b.n	800396e <jd_prepare+0x546>
			for (i = 0; i < 3; i++) {
 800388a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388c:	3301      	adds	r3, #1
 800388e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003892:	2b02      	cmp	r3, #2
 8003894:	d9c4      	bls.n	8003820 <jd_prepare+0x3f8>
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	7bdb      	ldrb	r3, [r3, #15]
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	7b9b      	ldrb	r3, [r3, #14]
 80038a0:	fb02 f303 	mul.w	r3, r2, r3
 80038a4:	617b      	str	r3, [r7, #20]
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <jd_prepare+0x488>
 80038ac:	2306      	movs	r3, #6
 80038ae:	e05e      	b.n	800396e <jd_prepare+0x546>
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	01db      	lsls	r3, r3, #7
 80038b4:	3340      	adds	r3, #64	@ 0x40
 80038b6:	623b      	str	r3, [r7, #32]
			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	2bff      	cmp	r3, #255	@ 0xff
 80038bc:	d802      	bhi.n	80038c4 <jd_prepare+0x49c>
 80038be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038c2:	623b      	str	r3, [r7, #32]
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
 80038c4:	6a39      	ldr	r1, [r7, #32]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7fe fc8b 	bl	80021e2 <alloc_pool>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	665a      	str	r2, [r3, #100]	@ 0x64
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <jd_prepare+0x4b6>
 80038da:	2303      	movs	r3, #3
 80038dc:	e047      	b.n	800396e <jd_prepare+0x546>
			jd->mcubuf = alloc_pool(jd, (n + 2) * 64);	/* Allocate MCU working buffer */
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	3302      	adds	r3, #2
 80038e2:	019b      	lsls	r3, r3, #6
 80038e4:	4619      	mov	r1, r3
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7fe fc7b 	bl	80021e2 <alloc_pool>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	669a      	str	r2, [r3, #104]	@ 0x68
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <jd_prepare+0x4d6>
 80038fa:	2303      	movs	r3, #3
 80038fc:	e037      	b.n	800396e <jd_prepare+0x546>

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	731a      	strb	r2, [r3, #12]
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
 8003910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003916:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <jd_prepare+0x51c>
				jd->dctr = jd->infunc(jd, seg + ofs, JD_SZBUF - (UINT)ofs);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003922:	69f9      	ldr	r1, [r7, #28]
 8003924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003926:	4411      	add	r1, r2
 8003928:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800392a:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	4798      	blx	r3
 8003932:	4602      	mov	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]
				jd->dptr = seg + ofs - 1;
 8003938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393a:	3b01      	subs	r3, #1
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	441a      	add	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	605a      	str	r2, [r3, #4]
			}

			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
 8003944:	2300      	movs	r3, #0
 8003946:	e012      	b.n	800396e <jd_prepare+0x546>
		case 0xCB:	/* SOF11 */
		case 0xCD:	/* SOF13 */
		case 0xCE:	/* SOF14 */
		case 0xCF:	/* SOF15 */
		case 0xD9:	/* EOI */
			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
 8003948:	2308      	movs	r3, #8
 800394a:	e010      	b.n	800396e <jd_prepare+0x546>

		default:	/* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len)	/* Null pointer specifies to skip bytes of stream */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003950:	6a3a      	ldr	r2, [r7, #32]
 8003952:	2100      	movs	r1, #0
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	4798      	blx	r3
 8003958:	4602      	mov	r2, r0
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	4293      	cmp	r3, r2
 800395e:	f43f ade9 	beq.w	8003534 <jd_prepare+0x10c>
				return JDR_INP;
 8003962:	2302      	movs	r3, #2
 8003964:	e003      	b.n	800396e <jd_prepare+0x546>
			break;
 8003966:	bf00      	nop
 8003968:	e5e4      	b.n	8003534 <jd_prepare+0x10c>
			break;
 800396a:	bf00      	nop
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 800396c:	e5e2      	b.n	8003534 <jd_prepare+0x10c>
		}
	}
}
 800396e:	4618      	mov	r0, r3
 8003970:	3730      	adds	r7, #48	@ 0x30
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop

08003978 <jd_decomp>:
JRESULT jd_decomp (
	JDEC* jd,								/* Initialized decompression object */
	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	BYTE scale								/* Output de-scaling factor (0 to 3) */
)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	4613      	mov	r3, r2
 8003984:	71fb      	strb	r3, [r7, #7]
	UINT x, y, mx, my;
	WORD rst, rsc;
	JRESULT rc;


	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d901      	bls.n	8003990 <jd_decomp+0x18>
 800398c:	2305      	movs	r3, #5
 800398e:	e068      	b.n	8003a62 <jd_decomp+0xea>
	jd->scale = scale;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	79fa      	ldrb	r2, [r7, #7]
 8003994:	735a      	strb	r2, [r3, #13]

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	7b9b      	ldrb	r3, [r3, #14]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	7bdb      	ldrb	r3, [r3, #15]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	613b      	str	r3, [r7, #16]

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	829a      	strh	r2, [r3, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	82da      	strh	r2, [r3, #22]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	831a      	strh	r2, [r3, #24]
	rst = rsc = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	83bb      	strh	r3, [r7, #28]
 80039c4:	8bbb      	ldrh	r3, [r7, #28]
 80039c6:	83fb      	strh	r3, [r7, #30]

	rc = JDR_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	76fb      	strb	r3, [r7, #27]
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 80039cc:	2300      	movs	r3, #0
 80039ce:	623b      	str	r3, [r7, #32]
 80039d0:	e041      	b.n	8003a56 <jd_decomp+0xde>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d6:	e035      	b.n	8003a44 <jd_decomp+0xcc>
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8b5b      	ldrh	r3, [r3, #26]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d016      	beq.n	8003a0e <jd_decomp+0x96>
 80039e0:	8bfb      	ldrh	r3, [r7, #30]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	83fa      	strh	r2, [r7, #30]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	8b52      	ldrh	r2, [r2, #26]
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10f      	bne.n	8003a0e <jd_decomp+0x96>
				rc = restart(jd, rsc++);
 80039ee:	8bbb      	ldrh	r3, [r7, #28]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	83ba      	strh	r2, [r7, #28]
 80039f4:	4619      	mov	r1, r3
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff fcae 	bl	8003358 <restart>
 80039fc:	4603      	mov	r3, r0
 80039fe:	76fb      	strb	r3, [r7, #27]
				if (rc != JDR_OK) return rc;
 8003a00:	7efb      	ldrb	r3, [r7, #27]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <jd_decomp+0x92>
 8003a06:	7efb      	ldrb	r3, [r7, #27]
 8003a08:	e02b      	b.n	8003a62 <jd_decomp+0xea>
				rst = 1;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	83fb      	strh	r3, [r7, #30]
			}
			
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f7ff f812 	bl	8002a38 <mcu_load>
 8003a14:	4603      	mov	r3, r0
 8003a16:	76fb      	strb	r3, [r7, #27]
			if (rc != JDR_OK) return rc;
 8003a18:	7efb      	ldrb	r3, [r7, #27]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <jd_decomp+0xaa>
 8003a1e:	7efb      	ldrb	r3, [r7, #27]
 8003a20:	e01f      	b.n	8003a62 <jd_decomp+0xea>
			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7ff f949 	bl	8002cc0 <mcu_output>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	76fb      	strb	r3, [r7, #27]
			
			if (rc != JDR_OK) return rc;
 8003a32:	7efb      	ldrb	r3, [r7, #27]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <jd_decomp+0xc4>
 8003a38:	7efb      	ldrb	r3, [r7, #27]
 8003a3a:	e012      	b.n	8003a62 <jd_decomp+0xea>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4413      	add	r3, r2
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d3c4      	bcc.n	80039d8 <jd_decomp+0x60>
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8003a4e:	6a3a      	ldr	r2, [r7, #32]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	6a3a      	ldr	r2, [r7, #32]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d3b8      	bcc.n	80039d2 <jd_decomp+0x5a>
			
		}
	}

	return rc;
 8003a60:	7efb      	ldrb	r3, [r7, #27]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3728      	adds	r7, #40	@ 0x28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a72:	2003      	movs	r0, #3
 8003a74:	f000 f980 	bl	8003d78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a78:	f004 f806 	bl	8007a88 <HAL_RCC_GetSysClockFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ad4 <HAL_Init+0x68>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	4913      	ldr	r1, [pc, #76]	@ (8003ad8 <HAL_Init+0x6c>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad4 <HAL_Init+0x68>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad8 <HAL_Init+0x6c>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aac:	4a0b      	ldr	r2, [pc, #44]	@ (8003adc <HAL_Init+0x70>)
 8003aae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae0 <HAL_Init+0x74>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ab6:	200f      	movs	r0, #15
 8003ab8:	f000 f814 	bl	8003ae4 <HAL_InitTick>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e002      	b.n	8003acc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac6:	f7fd ffd9 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	58024400 	.word	0x58024400
 8003ad8:	0800f96c 	.word	0x0800f96c
 8003adc:	24000008 	.word	0x24000008
 8003ae0:	24000004 	.word	0x24000004

08003ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003aec:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <HAL_InitTick+0x60>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e021      	b.n	8003b3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003af8:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <HAL_InitTick+0x64>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <HAL_InitTick+0x60>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f965 	bl	8003dde <HAL_SYSTICK_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e00e      	b.n	8003b3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b0f      	cmp	r3, #15
 8003b22:	d80a      	bhi.n	8003b3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b24:	2200      	movs	r2, #0
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	f000 f92f 	bl	8003d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b30:	4a06      	ldr	r2, [pc, #24]	@ (8003b4c <HAL_InitTick+0x68>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e000      	b.n	8003b3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	24000010 	.word	0x24000010
 8003b48:	24000004 	.word	0x24000004
 8003b4c:	2400000c 	.word	0x2400000c

08003b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_IncTick+0x20>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_IncTick+0x24>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	4a04      	ldr	r2, [pc, #16]	@ (8003b74 <HAL_IncTick+0x24>)
 8003b62:	6013      	str	r3, [r2, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	24000010 	.word	0x24000010
 8003b74:	24028dd0 	.word	0x24028dd0

08003b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b7c:	4b03      	ldr	r3, [pc, #12]	@ (8003b8c <HAL_GetTick+0x14>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	24028dd0 	.word	0x24028dd0

08003b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b98:	f7ff ffee 	bl	8003b78 <HAL_GetTick>
 8003b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d005      	beq.n	8003bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003baa:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd4 <HAL_Delay+0x44>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bb6:	bf00      	nop
 8003bb8:	f7ff ffde 	bl	8003b78 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d8f7      	bhi.n	8003bb8 <HAL_Delay+0x28>
  {
  }
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	24000010 	.word	0x24000010

08003bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <__NVIC_SetPriorityGrouping+0x40>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c00:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <__NVIC_SetPriorityGrouping+0x44>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c06:	4a04      	ldr	r2, [pc, #16]	@ (8003c18 <__NVIC_SetPriorityGrouping+0x40>)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	60d3      	str	r3, [r2, #12]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00
 8003c1c:	05fa0000 	.word	0x05fa0000

08003c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c24:	4b04      	ldr	r3, [pc, #16]	@ (8003c38 <__NVIC_GetPriorityGrouping+0x18>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	f003 0307 	and.w	r3, r3, #7
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	db0b      	blt.n	8003c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	f003 021f 	and.w	r2, r3, #31
 8003c54:	4907      	ldr	r1, [pc, #28]	@ (8003c74 <__NVIC_EnableIRQ+0x38>)
 8003c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	e000e100 	.word	0xe000e100

08003c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	db0a      	blt.n	8003ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	490c      	ldr	r1, [pc, #48]	@ (8003cc4 <__NVIC_SetPriority+0x4c>)
 8003c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c96:	0112      	lsls	r2, r2, #4
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca0:	e00a      	b.n	8003cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	4908      	ldr	r1, [pc, #32]	@ (8003cc8 <__NVIC_SetPriority+0x50>)
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	3b04      	subs	r3, #4
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	761a      	strb	r2, [r3, #24]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000e100 	.word	0xe000e100
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	@ 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f1c3 0307 	rsb	r3, r3, #7
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	bf28      	it	cs
 8003cea:	2304      	movcs	r3, #4
 8003cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	d902      	bls.n	8003cfc <NVIC_EncodePriority+0x30>
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3b03      	subs	r3, #3
 8003cfa:	e000      	b.n	8003cfe <NVIC_EncodePriority+0x32>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d00:	f04f 32ff 	mov.w	r2, #4294967295
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43da      	mvns	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	401a      	ands	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d14:	f04f 31ff 	mov.w	r1, #4294967295
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	43d9      	mvns	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d24:	4313      	orrs	r3, r2
         );
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3724      	adds	r7, #36	@ 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d44:	d301      	bcc.n	8003d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00f      	b.n	8003d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <SysTick_Config+0x40>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d52:	210f      	movs	r1, #15
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f7ff ff8e 	bl	8003c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d5c:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <SysTick_Config+0x40>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d62:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <SysTick_Config+0x40>)
 8003d64:	2207      	movs	r2, #7
 8003d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000e010 	.word	0xe000e010

08003d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff29 	bl	8003bd8 <__NVIC_SetPriorityGrouping>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d9c:	f7ff ff40 	bl	8003c20 <__NVIC_GetPriorityGrouping>
 8003da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	6978      	ldr	r0, [r7, #20]
 8003da8:	f7ff ff90 	bl	8003ccc <NVIC_EncodePriority>
 8003dac:	4602      	mov	r2, r0
 8003dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff5f 	bl	8003c78 <__NVIC_SetPriority>
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff33 	bl	8003c3c <__NVIC_EnableIRQ>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ffa4 	bl	8003d34 <SysTick_Config>
 8003dec:	4603      	mov	r3, r0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003dfc:	f3bf 8f5f 	dmb	sy
}
 8003e00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <HAL_MPU_Disable+0x28>)
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	4a06      	ldr	r2, [pc, #24]	@ (8003e20 <HAL_MPU_Disable+0x28>)
 8003e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003e0e:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <HAL_MPU_Disable+0x2c>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	605a      	str	r2, [r3, #4]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000ed00 	.word	0xe000ed00
 8003e24:	e000ed90 	.word	0xe000ed90

08003e28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003e30:	4a0b      	ldr	r2, [pc, #44]	@ (8003e60 <HAL_MPU_Enable+0x38>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <HAL_MPU_Enable+0x3c>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_MPU_Enable+0x3c>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003e46:	f3bf 8f4f 	dsb	sy
}
 8003e4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e4c:	f3bf 8f6f 	isb	sy
}
 8003e50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000ed90 	.word	0xe000ed90
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	785a      	ldrb	r2, [r3, #1]
 8003e74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8003e76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003e78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003e84:	4a17      	ldr	r2, [pc, #92]	@ (8003ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7b1b      	ldrb	r3, [r3, #12]
 8003e90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7adb      	ldrb	r3, [r3, #11]
 8003e96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7a9b      	ldrb	r3, [r3, #10]
 8003e9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	7b5b      	ldrb	r3, [r3, #13]
 8003ea6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	7b9b      	ldrb	r3, [r3, #14]
 8003eae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7bdb      	ldrb	r3, [r3, #15]
 8003eb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7a5b      	ldrb	r3, [r3, #9]
 8003ebe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7a1b      	ldrb	r3, [r3, #8]
 8003ec6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ec8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ed0:	4a04      	ldr	r2, [pc, #16]	@ (8003ee4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ed2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ed4:	6113      	str	r3, [r2, #16]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000ed90 	.word	0xe000ed90

08003ee8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003ef0:	f7ff fe42 	bl	8003b78 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e312      	b.n	8004526 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a66      	ldr	r2, [pc, #408]	@ (80040a0 <HAL_DMA_Init+0x1b8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d04a      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a65      	ldr	r2, [pc, #404]	@ (80040a4 <HAL_DMA_Init+0x1bc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d045      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a63      	ldr	r2, [pc, #396]	@ (80040a8 <HAL_DMA_Init+0x1c0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d040      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a62      	ldr	r2, [pc, #392]	@ (80040ac <HAL_DMA_Init+0x1c4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d03b      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a60      	ldr	r2, [pc, #384]	@ (80040b0 <HAL_DMA_Init+0x1c8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d036      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a5f      	ldr	r2, [pc, #380]	@ (80040b4 <HAL_DMA_Init+0x1cc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d031      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a5d      	ldr	r2, [pc, #372]	@ (80040b8 <HAL_DMA_Init+0x1d0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d02c      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a5c      	ldr	r2, [pc, #368]	@ (80040bc <HAL_DMA_Init+0x1d4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d027      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a5a      	ldr	r2, [pc, #360]	@ (80040c0 <HAL_DMA_Init+0x1d8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d022      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a59      	ldr	r2, [pc, #356]	@ (80040c4 <HAL_DMA_Init+0x1dc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d01d      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a57      	ldr	r2, [pc, #348]	@ (80040c8 <HAL_DMA_Init+0x1e0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d018      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a56      	ldr	r2, [pc, #344]	@ (80040cc <HAL_DMA_Init+0x1e4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d013      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a54      	ldr	r2, [pc, #336]	@ (80040d0 <HAL_DMA_Init+0x1e8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00e      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a53      	ldr	r2, [pc, #332]	@ (80040d4 <HAL_DMA_Init+0x1ec>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d009      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a51      	ldr	r2, [pc, #324]	@ (80040d8 <HAL_DMA_Init+0x1f0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <HAL_DMA_Init+0xb8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a50      	ldr	r2, [pc, #320]	@ (80040dc <HAL_DMA_Init+0x1f4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <HAL_DMA_Init+0xbc>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_DMA_Init+0xbe>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 813c 	beq.w	8004224 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a37      	ldr	r2, [pc, #220]	@ (80040a0 <HAL_DMA_Init+0x1b8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d04a      	beq.n	800405c <HAL_DMA_Init+0x174>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a36      	ldr	r2, [pc, #216]	@ (80040a4 <HAL_DMA_Init+0x1bc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d045      	beq.n	800405c <HAL_DMA_Init+0x174>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a34      	ldr	r2, [pc, #208]	@ (80040a8 <HAL_DMA_Init+0x1c0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d040      	beq.n	800405c <HAL_DMA_Init+0x174>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a33      	ldr	r2, [pc, #204]	@ (80040ac <HAL_DMA_Init+0x1c4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d03b      	beq.n	800405c <HAL_DMA_Init+0x174>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a31      	ldr	r2, [pc, #196]	@ (80040b0 <HAL_DMA_Init+0x1c8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d036      	beq.n	800405c <HAL_DMA_Init+0x174>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a30      	ldr	r2, [pc, #192]	@ (80040b4 <HAL_DMA_Init+0x1cc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d031      	beq.n	800405c <HAL_DMA_Init+0x174>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80040b8 <HAL_DMA_Init+0x1d0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d02c      	beq.n	800405c <HAL_DMA_Init+0x174>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2d      	ldr	r2, [pc, #180]	@ (80040bc <HAL_DMA_Init+0x1d4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d027      	beq.n	800405c <HAL_DMA_Init+0x174>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2b      	ldr	r2, [pc, #172]	@ (80040c0 <HAL_DMA_Init+0x1d8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d022      	beq.n	800405c <HAL_DMA_Init+0x174>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2a      	ldr	r2, [pc, #168]	@ (80040c4 <HAL_DMA_Init+0x1dc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d01d      	beq.n	800405c <HAL_DMA_Init+0x174>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a28      	ldr	r2, [pc, #160]	@ (80040c8 <HAL_DMA_Init+0x1e0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d018      	beq.n	800405c <HAL_DMA_Init+0x174>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a27      	ldr	r2, [pc, #156]	@ (80040cc <HAL_DMA_Init+0x1e4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <HAL_DMA_Init+0x174>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a25      	ldr	r2, [pc, #148]	@ (80040d0 <HAL_DMA_Init+0x1e8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00e      	beq.n	800405c <HAL_DMA_Init+0x174>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a24      	ldr	r2, [pc, #144]	@ (80040d4 <HAL_DMA_Init+0x1ec>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_DMA_Init+0x174>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a22      	ldr	r2, [pc, #136]	@ (80040d8 <HAL_DMA_Init+0x1f0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <HAL_DMA_Init+0x174>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a21      	ldr	r2, [pc, #132]	@ (80040dc <HAL_DMA_Init+0x1f4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d108      	bne.n	800406e <HAL_DMA_Init+0x186>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e007      	b.n	800407e <HAL_DMA_Init+0x196>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800407e:	e02f      	b.n	80040e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004080:	f7ff fd7a 	bl	8003b78 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b05      	cmp	r3, #5
 800408c:	d928      	bls.n	80040e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2203      	movs	r2, #3
 8004098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e242      	b.n	8004526 <HAL_DMA_Init+0x63e>
 80040a0:	40020010 	.word	0x40020010
 80040a4:	40020028 	.word	0x40020028
 80040a8:	40020040 	.word	0x40020040
 80040ac:	40020058 	.word	0x40020058
 80040b0:	40020070 	.word	0x40020070
 80040b4:	40020088 	.word	0x40020088
 80040b8:	400200a0 	.word	0x400200a0
 80040bc:	400200b8 	.word	0x400200b8
 80040c0:	40020410 	.word	0x40020410
 80040c4:	40020428 	.word	0x40020428
 80040c8:	40020440 	.word	0x40020440
 80040cc:	40020458 	.word	0x40020458
 80040d0:	40020470 	.word	0x40020470
 80040d4:	40020488 	.word	0x40020488
 80040d8:	400204a0 	.word	0x400204a0
 80040dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1c8      	bne.n	8004080 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4b83      	ldr	r3, [pc, #524]	@ (8004308 <HAL_DMA_Init+0x420>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004106:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004112:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	2b04      	cmp	r3, #4
 8004132:	d107      	bne.n	8004144 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	4313      	orrs	r3, r2
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b28      	cmp	r3, #40	@ 0x28
 800414a:	d903      	bls.n	8004154 <HAL_DMA_Init+0x26c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b2e      	cmp	r3, #46	@ 0x2e
 8004152:	d91f      	bls.n	8004194 <HAL_DMA_Init+0x2ac>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b3e      	cmp	r3, #62	@ 0x3e
 800415a:	d903      	bls.n	8004164 <HAL_DMA_Init+0x27c>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b42      	cmp	r3, #66	@ 0x42
 8004162:	d917      	bls.n	8004194 <HAL_DMA_Init+0x2ac>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b46      	cmp	r3, #70	@ 0x46
 800416a:	d903      	bls.n	8004174 <HAL_DMA_Init+0x28c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b48      	cmp	r3, #72	@ 0x48
 8004172:	d90f      	bls.n	8004194 <HAL_DMA_Init+0x2ac>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b4e      	cmp	r3, #78	@ 0x4e
 800417a:	d903      	bls.n	8004184 <HAL_DMA_Init+0x29c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b52      	cmp	r3, #82	@ 0x52
 8004182:	d907      	bls.n	8004194 <HAL_DMA_Init+0x2ac>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b73      	cmp	r3, #115	@ 0x73
 800418a:	d905      	bls.n	8004198 <HAL_DMA_Init+0x2b0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b77      	cmp	r3, #119	@ 0x77
 8004192:	d801      	bhi.n	8004198 <HAL_DMA_Init+0x2b0>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_DMA_Init+0x2b2>
 8004198:	2300      	movs	r3, #0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041a4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 0307 	bic.w	r3, r3, #7
 80041bc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d117      	bne.n	8004200 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00e      	beq.n	8004200 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f002 fb3a 	bl	800685c <DMA_CheckFifoParam>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2240      	movs	r2, #64	@ 0x40
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e192      	b.n	8004526 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f002 fa75 	bl	80066f8 <DMA_CalcBaseAndBitshift>
 800420e:	4603      	mov	r3, r0
 8004210:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	223f      	movs	r2, #63	@ 0x3f
 800421c:	409a      	lsls	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	609a      	str	r2, [r3, #8]
 8004222:	e0c8      	b.n	80043b6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a38      	ldr	r2, [pc, #224]	@ (800430c <HAL_DMA_Init+0x424>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d022      	beq.n	8004274 <HAL_DMA_Init+0x38c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a37      	ldr	r2, [pc, #220]	@ (8004310 <HAL_DMA_Init+0x428>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d01d      	beq.n	8004274 <HAL_DMA_Init+0x38c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a35      	ldr	r2, [pc, #212]	@ (8004314 <HAL_DMA_Init+0x42c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d018      	beq.n	8004274 <HAL_DMA_Init+0x38c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a34      	ldr	r2, [pc, #208]	@ (8004318 <HAL_DMA_Init+0x430>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d013      	beq.n	8004274 <HAL_DMA_Init+0x38c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a32      	ldr	r2, [pc, #200]	@ (800431c <HAL_DMA_Init+0x434>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00e      	beq.n	8004274 <HAL_DMA_Init+0x38c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a31      	ldr	r2, [pc, #196]	@ (8004320 <HAL_DMA_Init+0x438>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d009      	beq.n	8004274 <HAL_DMA_Init+0x38c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a2f      	ldr	r2, [pc, #188]	@ (8004324 <HAL_DMA_Init+0x43c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <HAL_DMA_Init+0x38c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2e      	ldr	r2, [pc, #184]	@ (8004328 <HAL_DMA_Init+0x440>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <HAL_DMA_Init+0x390>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_DMA_Init+0x392>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8092 	beq.w	80043a4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a21      	ldr	r2, [pc, #132]	@ (800430c <HAL_DMA_Init+0x424>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d021      	beq.n	80042ce <HAL_DMA_Init+0x3e6>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a20      	ldr	r2, [pc, #128]	@ (8004310 <HAL_DMA_Init+0x428>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d01c      	beq.n	80042ce <HAL_DMA_Init+0x3e6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <HAL_DMA_Init+0x42c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d017      	beq.n	80042ce <HAL_DMA_Init+0x3e6>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <HAL_DMA_Init+0x430>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d012      	beq.n	80042ce <HAL_DMA_Init+0x3e6>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1b      	ldr	r2, [pc, #108]	@ (800431c <HAL_DMA_Init+0x434>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00d      	beq.n	80042ce <HAL_DMA_Init+0x3e6>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004320 <HAL_DMA_Init+0x438>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d008      	beq.n	80042ce <HAL_DMA_Init+0x3e6>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <HAL_DMA_Init+0x43c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <HAL_DMA_Init+0x3e6>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <HAL_DMA_Init+0x440>)
 80042cc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <HAL_DMA_Init+0x444>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d01c      	beq.n	8004330 <HAL_DMA_Init+0x448>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b80      	cmp	r3, #128	@ 0x80
 80042fc:	d102      	bne.n	8004304 <HAL_DMA_Init+0x41c>
 80042fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004302:	e016      	b.n	8004332 <HAL_DMA_Init+0x44a>
 8004304:	2300      	movs	r3, #0
 8004306:	e014      	b.n	8004332 <HAL_DMA_Init+0x44a>
 8004308:	fe10803f 	.word	0xfe10803f
 800430c:	58025408 	.word	0x58025408
 8004310:	5802541c 	.word	0x5802541c
 8004314:	58025430 	.word	0x58025430
 8004318:	58025444 	.word	0x58025444
 800431c:	58025458 	.word	0x58025458
 8004320:	5802546c 	.word	0x5802546c
 8004324:	58025480 	.word	0x58025480
 8004328:	58025494 	.word	0x58025494
 800432c:	fffe000f 	.word	0xfffe000f
 8004330:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68d2      	ldr	r2, [r2, #12]
 8004336:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004338:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004340:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004348:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004350:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004360:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	4b6e      	ldr	r3, [pc, #440]	@ (8004530 <HAL_DMA_Init+0x648>)
 8004378:	4413      	add	r3, r2
 800437a:	4a6e      	ldr	r2, [pc, #440]	@ (8004534 <HAL_DMA_Init+0x64c>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	009a      	lsls	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f002 f9b5 	bl	80066f8 <DMA_CalcBaseAndBitshift>
 800438e:	4603      	mov	r3, r0
 8004390:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	2201      	movs	r2, #1
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	e008      	b.n	80043b6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2240      	movs	r2, #64	@ 0x40
 80043a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2203      	movs	r2, #3
 80043ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0b7      	b.n	8004526 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a5f      	ldr	r2, [pc, #380]	@ (8004538 <HAL_DMA_Init+0x650>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d072      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a5d      	ldr	r2, [pc, #372]	@ (800453c <HAL_DMA_Init+0x654>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d06d      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a5c      	ldr	r2, [pc, #368]	@ (8004540 <HAL_DMA_Init+0x658>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d068      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004544 <HAL_DMA_Init+0x65c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d063      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a59      	ldr	r2, [pc, #356]	@ (8004548 <HAL_DMA_Init+0x660>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d05e      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a57      	ldr	r2, [pc, #348]	@ (800454c <HAL_DMA_Init+0x664>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d059      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a56      	ldr	r2, [pc, #344]	@ (8004550 <HAL_DMA_Init+0x668>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d054      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a54      	ldr	r2, [pc, #336]	@ (8004554 <HAL_DMA_Init+0x66c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d04f      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a53      	ldr	r2, [pc, #332]	@ (8004558 <HAL_DMA_Init+0x670>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d04a      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a51      	ldr	r2, [pc, #324]	@ (800455c <HAL_DMA_Init+0x674>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d045      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a50      	ldr	r2, [pc, #320]	@ (8004560 <HAL_DMA_Init+0x678>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d040      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a4e      	ldr	r2, [pc, #312]	@ (8004564 <HAL_DMA_Init+0x67c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d03b      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a4d      	ldr	r2, [pc, #308]	@ (8004568 <HAL_DMA_Init+0x680>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d036      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a4b      	ldr	r2, [pc, #300]	@ (800456c <HAL_DMA_Init+0x684>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a4a      	ldr	r2, [pc, #296]	@ (8004570 <HAL_DMA_Init+0x688>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d02c      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a48      	ldr	r2, [pc, #288]	@ (8004574 <HAL_DMA_Init+0x68c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d027      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a47      	ldr	r2, [pc, #284]	@ (8004578 <HAL_DMA_Init+0x690>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d022      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a45      	ldr	r2, [pc, #276]	@ (800457c <HAL_DMA_Init+0x694>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01d      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a44      	ldr	r2, [pc, #272]	@ (8004580 <HAL_DMA_Init+0x698>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d018      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a42      	ldr	r2, [pc, #264]	@ (8004584 <HAL_DMA_Init+0x69c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a41      	ldr	r2, [pc, #260]	@ (8004588 <HAL_DMA_Init+0x6a0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00e      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3f      	ldr	r2, [pc, #252]	@ (800458c <HAL_DMA_Init+0x6a4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d009      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3e      	ldr	r2, [pc, #248]	@ (8004590 <HAL_DMA_Init+0x6a8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_DMA_Init+0x5be>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004594 <HAL_DMA_Init+0x6ac>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d101      	bne.n	80044aa <HAL_DMA_Init+0x5c2>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <HAL_DMA_Init+0x5c4>
 80044aa:	2300      	movs	r3, #0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d032      	beq.n	8004516 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f002 fa4f 	bl	8006954 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b80      	cmp	r3, #128	@ 0x80
 80044bc:	d102      	bne.n	80044c4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80044d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d010      	beq.n	8004504 <HAL_DMA_Init+0x61c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d80c      	bhi.n	8004504 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f002 facc 	bl	8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	e008      	b.n	8004516 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	a7fdabf8 	.word	0xa7fdabf8
 8004534:	cccccccd 	.word	0xcccccccd
 8004538:	40020010 	.word	0x40020010
 800453c:	40020028 	.word	0x40020028
 8004540:	40020040 	.word	0x40020040
 8004544:	40020058 	.word	0x40020058
 8004548:	40020070 	.word	0x40020070
 800454c:	40020088 	.word	0x40020088
 8004550:	400200a0 	.word	0x400200a0
 8004554:	400200b8 	.word	0x400200b8
 8004558:	40020410 	.word	0x40020410
 800455c:	40020428 	.word	0x40020428
 8004560:	40020440 	.word	0x40020440
 8004564:	40020458 	.word	0x40020458
 8004568:	40020470 	.word	0x40020470
 800456c:	40020488 	.word	0x40020488
 8004570:	400204a0 	.word	0x400204a0
 8004574:	400204b8 	.word	0x400204b8
 8004578:	58025408 	.word	0x58025408
 800457c:	5802541c 	.word	0x5802541c
 8004580:	58025430 	.word	0x58025430
 8004584:	58025444 	.word	0x58025444
 8004588:	58025458 	.word	0x58025458
 800458c:	5802546c 	.word	0x5802546c
 8004590:	58025480 	.word	0x58025480
 8004594:	58025494 	.word	0x58025494

08004598 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e226      	b.n	8004a02 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_DMA_Start_IT+0x2a>
 80045be:	2302      	movs	r3, #2
 80045c0:	e21f      	b.n	8004a02 <HAL_DMA_Start_IT+0x46a>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	f040 820a 	bne.w	80049ec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a68      	ldr	r2, [pc, #416]	@ (800478c <HAL_DMA_Start_IT+0x1f4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d04a      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a66      	ldr	r2, [pc, #408]	@ (8004790 <HAL_DMA_Start_IT+0x1f8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d045      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a65      	ldr	r2, [pc, #404]	@ (8004794 <HAL_DMA_Start_IT+0x1fc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d040      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a63      	ldr	r2, [pc, #396]	@ (8004798 <HAL_DMA_Start_IT+0x200>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d03b      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a62      	ldr	r2, [pc, #392]	@ (800479c <HAL_DMA_Start_IT+0x204>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d036      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a60      	ldr	r2, [pc, #384]	@ (80047a0 <HAL_DMA_Start_IT+0x208>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d031      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a5f      	ldr	r2, [pc, #380]	@ (80047a4 <HAL_DMA_Start_IT+0x20c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d02c      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a5d      	ldr	r2, [pc, #372]	@ (80047a8 <HAL_DMA_Start_IT+0x210>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d027      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a5c      	ldr	r2, [pc, #368]	@ (80047ac <HAL_DMA_Start_IT+0x214>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a5a      	ldr	r2, [pc, #360]	@ (80047b0 <HAL_DMA_Start_IT+0x218>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01d      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a59      	ldr	r2, [pc, #356]	@ (80047b4 <HAL_DMA_Start_IT+0x21c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d018      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a57      	ldr	r2, [pc, #348]	@ (80047b8 <HAL_DMA_Start_IT+0x220>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a56      	ldr	r2, [pc, #344]	@ (80047bc <HAL_DMA_Start_IT+0x224>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a54      	ldr	r2, [pc, #336]	@ (80047c0 <HAL_DMA_Start_IT+0x228>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a53      	ldr	r2, [pc, #332]	@ (80047c4 <HAL_DMA_Start_IT+0x22c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_Start_IT+0xee>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a51      	ldr	r2, [pc, #324]	@ (80047c8 <HAL_DMA_Start_IT+0x230>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <HAL_DMA_Start_IT+0x100>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e007      	b.n	80046a8 <HAL_DMA_Start_IT+0x110>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f001 fe76 	bl	80063a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a34      	ldr	r2, [pc, #208]	@ (800478c <HAL_DMA_Start_IT+0x1f4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d04a      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a33      	ldr	r2, [pc, #204]	@ (8004790 <HAL_DMA_Start_IT+0x1f8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d045      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a31      	ldr	r2, [pc, #196]	@ (8004794 <HAL_DMA_Start_IT+0x1fc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d040      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a30      	ldr	r2, [pc, #192]	@ (8004798 <HAL_DMA_Start_IT+0x200>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d03b      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2e      	ldr	r2, [pc, #184]	@ (800479c <HAL_DMA_Start_IT+0x204>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d036      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2d      	ldr	r2, [pc, #180]	@ (80047a0 <HAL_DMA_Start_IT+0x208>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d031      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2b      	ldr	r2, [pc, #172]	@ (80047a4 <HAL_DMA_Start_IT+0x20c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d02c      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a2a      	ldr	r2, [pc, #168]	@ (80047a8 <HAL_DMA_Start_IT+0x210>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d027      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a28      	ldr	r2, [pc, #160]	@ (80047ac <HAL_DMA_Start_IT+0x214>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a27      	ldr	r2, [pc, #156]	@ (80047b0 <HAL_DMA_Start_IT+0x218>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d01d      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a25      	ldr	r2, [pc, #148]	@ (80047b4 <HAL_DMA_Start_IT+0x21c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a24      	ldr	r2, [pc, #144]	@ (80047b8 <HAL_DMA_Start_IT+0x220>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a22      	ldr	r2, [pc, #136]	@ (80047bc <HAL_DMA_Start_IT+0x224>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a21      	ldr	r2, [pc, #132]	@ (80047c0 <HAL_DMA_Start_IT+0x228>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1f      	ldr	r2, [pc, #124]	@ (80047c4 <HAL_DMA_Start_IT+0x22c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_DMA_Start_IT+0x1bc>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1e      	ldr	r2, [pc, #120]	@ (80047c8 <HAL_DMA_Start_IT+0x230>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d101      	bne.n	8004758 <HAL_DMA_Start_IT+0x1c0>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <HAL_DMA_Start_IT+0x1c2>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d036      	beq.n	80047cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 021e 	bic.w	r2, r3, #30
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0216 	orr.w	r2, r2, #22
 8004770:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d03e      	beq.n	80047f8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0208 	orr.w	r2, r2, #8
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e035      	b.n	80047f8 <HAL_DMA_Start_IT+0x260>
 800478c:	40020010 	.word	0x40020010
 8004790:	40020028 	.word	0x40020028
 8004794:	40020040 	.word	0x40020040
 8004798:	40020058 	.word	0x40020058
 800479c:	40020070 	.word	0x40020070
 80047a0:	40020088 	.word	0x40020088
 80047a4:	400200a0 	.word	0x400200a0
 80047a8:	400200b8 	.word	0x400200b8
 80047ac:	40020410 	.word	0x40020410
 80047b0:	40020428 	.word	0x40020428
 80047b4:	40020440 	.word	0x40020440
 80047b8:	40020458 	.word	0x40020458
 80047bc:	40020470 	.word	0x40020470
 80047c0:	40020488 	.word	0x40020488
 80047c4:	400204a0 	.word	0x400204a0
 80047c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 020e 	bic.w	r2, r3, #14
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 020a 	orr.w	r2, r2, #10
 80047de:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0204 	orr.w	r2, r2, #4
 80047f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a83      	ldr	r2, [pc, #524]	@ (8004a0c <HAL_DMA_Start_IT+0x474>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d072      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a82      	ldr	r2, [pc, #520]	@ (8004a10 <HAL_DMA_Start_IT+0x478>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d06d      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a80      	ldr	r2, [pc, #512]	@ (8004a14 <HAL_DMA_Start_IT+0x47c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d068      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7f      	ldr	r2, [pc, #508]	@ (8004a18 <HAL_DMA_Start_IT+0x480>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d063      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a7d      	ldr	r2, [pc, #500]	@ (8004a1c <HAL_DMA_Start_IT+0x484>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d05e      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a20 <HAL_DMA_Start_IT+0x488>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d059      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a7a      	ldr	r2, [pc, #488]	@ (8004a24 <HAL_DMA_Start_IT+0x48c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d054      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a79      	ldr	r2, [pc, #484]	@ (8004a28 <HAL_DMA_Start_IT+0x490>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d04f      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a77      	ldr	r2, [pc, #476]	@ (8004a2c <HAL_DMA_Start_IT+0x494>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d04a      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a76      	ldr	r2, [pc, #472]	@ (8004a30 <HAL_DMA_Start_IT+0x498>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d045      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a74      	ldr	r2, [pc, #464]	@ (8004a34 <HAL_DMA_Start_IT+0x49c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d040      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a73      	ldr	r2, [pc, #460]	@ (8004a38 <HAL_DMA_Start_IT+0x4a0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d03b      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a71      	ldr	r2, [pc, #452]	@ (8004a3c <HAL_DMA_Start_IT+0x4a4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d036      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a70      	ldr	r2, [pc, #448]	@ (8004a40 <HAL_DMA_Start_IT+0x4a8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d031      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a6e      	ldr	r2, [pc, #440]	@ (8004a44 <HAL_DMA_Start_IT+0x4ac>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d02c      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6d      	ldr	r2, [pc, #436]	@ (8004a48 <HAL_DMA_Start_IT+0x4b0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d027      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a6b      	ldr	r2, [pc, #428]	@ (8004a4c <HAL_DMA_Start_IT+0x4b4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d022      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a6a      	ldr	r2, [pc, #424]	@ (8004a50 <HAL_DMA_Start_IT+0x4b8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d01d      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a68      	ldr	r2, [pc, #416]	@ (8004a54 <HAL_DMA_Start_IT+0x4bc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d018      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a67      	ldr	r2, [pc, #412]	@ (8004a58 <HAL_DMA_Start_IT+0x4c0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a65      	ldr	r2, [pc, #404]	@ (8004a5c <HAL_DMA_Start_IT+0x4c4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00e      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a64      	ldr	r2, [pc, #400]	@ (8004a60 <HAL_DMA_Start_IT+0x4c8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d009      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a62      	ldr	r2, [pc, #392]	@ (8004a64 <HAL_DMA_Start_IT+0x4cc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_DMA_Start_IT+0x350>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a61      	ldr	r2, [pc, #388]	@ (8004a68 <HAL_DMA_Start_IT+0x4d0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_DMA_Start_IT+0x354>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <HAL_DMA_Start_IT+0x356>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01a      	beq.n	8004928 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800490a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800490e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d007      	beq.n	8004928 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004926:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a37      	ldr	r2, [pc, #220]	@ (8004a0c <HAL_DMA_Start_IT+0x474>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d04a      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a36      	ldr	r2, [pc, #216]	@ (8004a10 <HAL_DMA_Start_IT+0x478>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d045      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a34      	ldr	r2, [pc, #208]	@ (8004a14 <HAL_DMA_Start_IT+0x47c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d040      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a33      	ldr	r2, [pc, #204]	@ (8004a18 <HAL_DMA_Start_IT+0x480>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d03b      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a31      	ldr	r2, [pc, #196]	@ (8004a1c <HAL_DMA_Start_IT+0x484>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d036      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a30      	ldr	r2, [pc, #192]	@ (8004a20 <HAL_DMA_Start_IT+0x488>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d031      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2e      	ldr	r2, [pc, #184]	@ (8004a24 <HAL_DMA_Start_IT+0x48c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d02c      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2d      	ldr	r2, [pc, #180]	@ (8004a28 <HAL_DMA_Start_IT+0x490>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d027      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2b      	ldr	r2, [pc, #172]	@ (8004a2c <HAL_DMA_Start_IT+0x494>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d022      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a2a      	ldr	r2, [pc, #168]	@ (8004a30 <HAL_DMA_Start_IT+0x498>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d01d      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a28      	ldr	r2, [pc, #160]	@ (8004a34 <HAL_DMA_Start_IT+0x49c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d018      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a27      	ldr	r2, [pc, #156]	@ (8004a38 <HAL_DMA_Start_IT+0x4a0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a25      	ldr	r2, [pc, #148]	@ (8004a3c <HAL_DMA_Start_IT+0x4a4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a24      	ldr	r2, [pc, #144]	@ (8004a40 <HAL_DMA_Start_IT+0x4a8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a22      	ldr	r2, [pc, #136]	@ (8004a44 <HAL_DMA_Start_IT+0x4ac>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_DMA_Start_IT+0x430>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a21      	ldr	r2, [pc, #132]	@ (8004a48 <HAL_DMA_Start_IT+0x4b0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <HAL_DMA_Start_IT+0x442>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	e012      	b.n	8004a00 <HAL_DMA_Start_IT+0x468>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e009      	b.n	8004a00 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40020010 	.word	0x40020010
 8004a10:	40020028 	.word	0x40020028
 8004a14:	40020040 	.word	0x40020040
 8004a18:	40020058 	.word	0x40020058
 8004a1c:	40020070 	.word	0x40020070
 8004a20:	40020088 	.word	0x40020088
 8004a24:	400200a0 	.word	0x400200a0
 8004a28:	400200b8 	.word	0x400200b8
 8004a2c:	40020410 	.word	0x40020410
 8004a30:	40020428 	.word	0x40020428
 8004a34:	40020440 	.word	0x40020440
 8004a38:	40020458 	.word	0x40020458
 8004a3c:	40020470 	.word	0x40020470
 8004a40:	40020488 	.word	0x40020488
 8004a44:	400204a0 	.word	0x400204a0
 8004a48:	400204b8 	.word	0x400204b8
 8004a4c:	58025408 	.word	0x58025408
 8004a50:	5802541c 	.word	0x5802541c
 8004a54:	58025430 	.word	0x58025430
 8004a58:	58025444 	.word	0x58025444
 8004a5c:	58025458 	.word	0x58025458
 8004a60:	5802546c 	.word	0x5802546c
 8004a64:	58025480 	.word	0x58025480
 8004a68:	58025494 	.word	0x58025494

08004a6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004a74:	f7ff f880 	bl	8003b78 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e2dc      	b.n	800503e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d008      	beq.n	8004aa2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2280      	movs	r2, #128	@ 0x80
 8004a94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e2cd      	b.n	800503e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a76      	ldr	r2, [pc, #472]	@ (8004c80 <HAL_DMA_Abort+0x214>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d04a      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a74      	ldr	r2, [pc, #464]	@ (8004c84 <HAL_DMA_Abort+0x218>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d045      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a73      	ldr	r2, [pc, #460]	@ (8004c88 <HAL_DMA_Abort+0x21c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d040      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a71      	ldr	r2, [pc, #452]	@ (8004c8c <HAL_DMA_Abort+0x220>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d03b      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a70      	ldr	r2, [pc, #448]	@ (8004c90 <HAL_DMA_Abort+0x224>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d036      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8004c94 <HAL_DMA_Abort+0x228>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a6d      	ldr	r2, [pc, #436]	@ (8004c98 <HAL_DMA_Abort+0x22c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d02c      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6b      	ldr	r2, [pc, #428]	@ (8004c9c <HAL_DMA_Abort+0x230>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d027      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6a      	ldr	r2, [pc, #424]	@ (8004ca0 <HAL_DMA_Abort+0x234>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a68      	ldr	r2, [pc, #416]	@ (8004ca4 <HAL_DMA_Abort+0x238>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a67      	ldr	r2, [pc, #412]	@ (8004ca8 <HAL_DMA_Abort+0x23c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a65      	ldr	r2, [pc, #404]	@ (8004cac <HAL_DMA_Abort+0x240>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a64      	ldr	r2, [pc, #400]	@ (8004cb0 <HAL_DMA_Abort+0x244>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a62      	ldr	r2, [pc, #392]	@ (8004cb4 <HAL_DMA_Abort+0x248>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a61      	ldr	r2, [pc, #388]	@ (8004cb8 <HAL_DMA_Abort+0x24c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a5f      	ldr	r2, [pc, #380]	@ (8004cbc <HAL_DMA_Abort+0x250>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_DMA_Abort+0xda>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_DMA_Abort+0xdc>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d013      	beq.n	8004b74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 021e 	bic.w	r2, r2, #30
 8004b5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	e00a      	b.n	8004b8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 020e 	bic.w	r2, r2, #14
 8004b82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c80 <HAL_DMA_Abort+0x214>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d072      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3a      	ldr	r2, [pc, #232]	@ (8004c84 <HAL_DMA_Abort+0x218>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d06d      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a39      	ldr	r2, [pc, #228]	@ (8004c88 <HAL_DMA_Abort+0x21c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d068      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a37      	ldr	r2, [pc, #220]	@ (8004c8c <HAL_DMA_Abort+0x220>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d063      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a36      	ldr	r2, [pc, #216]	@ (8004c90 <HAL_DMA_Abort+0x224>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d05e      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a34      	ldr	r2, [pc, #208]	@ (8004c94 <HAL_DMA_Abort+0x228>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d059      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a33      	ldr	r2, [pc, #204]	@ (8004c98 <HAL_DMA_Abort+0x22c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d054      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a31      	ldr	r2, [pc, #196]	@ (8004c9c <HAL_DMA_Abort+0x230>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04f      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a30      	ldr	r2, [pc, #192]	@ (8004ca0 <HAL_DMA_Abort+0x234>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d04a      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca4 <HAL_DMA_Abort+0x238>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d045      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca8 <HAL_DMA_Abort+0x23c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d040      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004cac <HAL_DMA_Abort+0x240>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d03b      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb0 <HAL_DMA_Abort+0x244>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d036      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a28      	ldr	r2, [pc, #160]	@ (8004cb4 <HAL_DMA_Abort+0x248>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d031      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a27      	ldr	r2, [pc, #156]	@ (8004cb8 <HAL_DMA_Abort+0x24c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d02c      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a25      	ldr	r2, [pc, #148]	@ (8004cbc <HAL_DMA_Abort+0x250>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d027      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a24      	ldr	r2, [pc, #144]	@ (8004cc0 <HAL_DMA_Abort+0x254>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d022      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a22      	ldr	r2, [pc, #136]	@ (8004cc4 <HAL_DMA_Abort+0x258>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01d      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a21      	ldr	r2, [pc, #132]	@ (8004cc8 <HAL_DMA_Abort+0x25c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d018      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ccc <HAL_DMA_Abort+0x260>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd0 <HAL_DMA_Abort+0x264>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd4 <HAL_DMA_Abort+0x268>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd8 <HAL_DMA_Abort+0x26c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <HAL_DMA_Abort+0x270>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d132      	bne.n	8004ce0 <HAL_DMA_Abort+0x274>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e031      	b.n	8004ce2 <HAL_DMA_Abort+0x276>
 8004c7e:	bf00      	nop
 8004c80:	40020010 	.word	0x40020010
 8004c84:	40020028 	.word	0x40020028
 8004c88:	40020040 	.word	0x40020040
 8004c8c:	40020058 	.word	0x40020058
 8004c90:	40020070 	.word	0x40020070
 8004c94:	40020088 	.word	0x40020088
 8004c98:	400200a0 	.word	0x400200a0
 8004c9c:	400200b8 	.word	0x400200b8
 8004ca0:	40020410 	.word	0x40020410
 8004ca4:	40020428 	.word	0x40020428
 8004ca8:	40020440 	.word	0x40020440
 8004cac:	40020458 	.word	0x40020458
 8004cb0:	40020470 	.word	0x40020470
 8004cb4:	40020488 	.word	0x40020488
 8004cb8:	400204a0 	.word	0x400204a0
 8004cbc:	400204b8 	.word	0x400204b8
 8004cc0:	58025408 	.word	0x58025408
 8004cc4:	5802541c 	.word	0x5802541c
 8004cc8:	58025430 	.word	0x58025430
 8004ccc:	58025444 	.word	0x58025444
 8004cd0:	58025458 	.word	0x58025458
 8004cd4:	5802546c 	.word	0x5802546c
 8004cd8:	58025480 	.word	0x58025480
 8004cdc:	58025494 	.word	0x58025494
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a6d      	ldr	r2, [pc, #436]	@ (8004eb0 <HAL_DMA_Abort+0x444>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d04a      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a6b      	ldr	r2, [pc, #428]	@ (8004eb4 <HAL_DMA_Abort+0x448>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d045      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6a      	ldr	r2, [pc, #424]	@ (8004eb8 <HAL_DMA_Abort+0x44c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d040      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a68      	ldr	r2, [pc, #416]	@ (8004ebc <HAL_DMA_Abort+0x450>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d03b      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a67      	ldr	r2, [pc, #412]	@ (8004ec0 <HAL_DMA_Abort+0x454>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d036      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a65      	ldr	r2, [pc, #404]	@ (8004ec4 <HAL_DMA_Abort+0x458>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d031      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a64      	ldr	r2, [pc, #400]	@ (8004ec8 <HAL_DMA_Abort+0x45c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d02c      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a62      	ldr	r2, [pc, #392]	@ (8004ecc <HAL_DMA_Abort+0x460>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d027      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a61      	ldr	r2, [pc, #388]	@ (8004ed0 <HAL_DMA_Abort+0x464>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5f      	ldr	r2, [pc, #380]	@ (8004ed4 <HAL_DMA_Abort+0x468>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ed8 <HAL_DMA_Abort+0x46c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a5c      	ldr	r2, [pc, #368]	@ (8004edc <HAL_DMA_Abort+0x470>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a5b      	ldr	r2, [pc, #364]	@ (8004ee0 <HAL_DMA_Abort+0x474>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a59      	ldr	r2, [pc, #356]	@ (8004ee4 <HAL_DMA_Abort+0x478>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a58      	ldr	r2, [pc, #352]	@ (8004ee8 <HAL_DMA_Abort+0x47c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a56      	ldr	r2, [pc, #344]	@ (8004eec <HAL_DMA_Abort+0x480>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <HAL_DMA_Abort+0x33c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e007      	b.n	8004db8 <HAL_DMA_Abort+0x34c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004db8:	e013      	b.n	8004de2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dba:	f7fe fedd 	bl	8003b78 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	d90c      	bls.n	8004de2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e12d      	b.n	800503e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e5      	bne.n	8004dba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2f      	ldr	r2, [pc, #188]	@ (8004eb0 <HAL_DMA_Abort+0x444>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d04a      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb4 <HAL_DMA_Abort+0x448>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d045      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb8 <HAL_DMA_Abort+0x44c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d040      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a2a      	ldr	r2, [pc, #168]	@ (8004ebc <HAL_DMA_Abort+0x450>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d03b      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a29      	ldr	r2, [pc, #164]	@ (8004ec0 <HAL_DMA_Abort+0x454>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d036      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a27      	ldr	r2, [pc, #156]	@ (8004ec4 <HAL_DMA_Abort+0x458>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d031      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a26      	ldr	r2, [pc, #152]	@ (8004ec8 <HAL_DMA_Abort+0x45c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d02c      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a24      	ldr	r2, [pc, #144]	@ (8004ecc <HAL_DMA_Abort+0x460>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d027      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a23      	ldr	r2, [pc, #140]	@ (8004ed0 <HAL_DMA_Abort+0x464>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d022      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a21      	ldr	r2, [pc, #132]	@ (8004ed4 <HAL_DMA_Abort+0x468>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01d      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a20      	ldr	r2, [pc, #128]	@ (8004ed8 <HAL_DMA_Abort+0x46c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d018      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	@ (8004edc <HAL_DMA_Abort+0x470>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee0 <HAL_DMA_Abort+0x474>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee4 <HAL_DMA_Abort+0x478>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ee8 <HAL_DMA_Abort+0x47c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a18      	ldr	r2, [pc, #96]	@ (8004eec <HAL_DMA_Abort+0x480>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <HAL_DMA_Abort+0x426>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <HAL_DMA_Abort+0x428>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02b      	beq.n	8004ef0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	223f      	movs	r2, #63	@ 0x3f
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	609a      	str	r2, [r3, #8]
 8004eae:	e02a      	b.n	8004f06 <HAL_DMA_Abort+0x49a>
 8004eb0:	40020010 	.word	0x40020010
 8004eb4:	40020028 	.word	0x40020028
 8004eb8:	40020040 	.word	0x40020040
 8004ebc:	40020058 	.word	0x40020058
 8004ec0:	40020070 	.word	0x40020070
 8004ec4:	40020088 	.word	0x40020088
 8004ec8:	400200a0 	.word	0x400200a0
 8004ecc:	400200b8 	.word	0x400200b8
 8004ed0:	40020410 	.word	0x40020410
 8004ed4:	40020428 	.word	0x40020428
 8004ed8:	40020440 	.word	0x40020440
 8004edc:	40020458 	.word	0x40020458
 8004ee0:	40020470 	.word	0x40020470
 8004ee4:	40020488 	.word	0x40020488
 8004ee8:	400204a0 	.word	0x400204a0
 8004eec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	2201      	movs	r2, #1
 8004f00:	409a      	lsls	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a4f      	ldr	r2, [pc, #316]	@ (8005048 <HAL_DMA_Abort+0x5dc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d072      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a4d      	ldr	r2, [pc, #308]	@ (800504c <HAL_DMA_Abort+0x5e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d06d      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a4c      	ldr	r2, [pc, #304]	@ (8005050 <HAL_DMA_Abort+0x5e4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d068      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a4a      	ldr	r2, [pc, #296]	@ (8005054 <HAL_DMA_Abort+0x5e8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d063      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a49      	ldr	r2, [pc, #292]	@ (8005058 <HAL_DMA_Abort+0x5ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d05e      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a47      	ldr	r2, [pc, #284]	@ (800505c <HAL_DMA_Abort+0x5f0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d059      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a46      	ldr	r2, [pc, #280]	@ (8005060 <HAL_DMA_Abort+0x5f4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d054      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a44      	ldr	r2, [pc, #272]	@ (8005064 <HAL_DMA_Abort+0x5f8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d04f      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a43      	ldr	r2, [pc, #268]	@ (8005068 <HAL_DMA_Abort+0x5fc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d04a      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a41      	ldr	r2, [pc, #260]	@ (800506c <HAL_DMA_Abort+0x600>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d045      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a40      	ldr	r2, [pc, #256]	@ (8005070 <HAL_DMA_Abort+0x604>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d040      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a3e      	ldr	r2, [pc, #248]	@ (8005074 <HAL_DMA_Abort+0x608>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d03b      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a3d      	ldr	r2, [pc, #244]	@ (8005078 <HAL_DMA_Abort+0x60c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d036      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a3b      	ldr	r2, [pc, #236]	@ (800507c <HAL_DMA_Abort+0x610>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d031      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a3a      	ldr	r2, [pc, #232]	@ (8005080 <HAL_DMA_Abort+0x614>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d02c      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a38      	ldr	r2, [pc, #224]	@ (8005084 <HAL_DMA_Abort+0x618>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d027      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a37      	ldr	r2, [pc, #220]	@ (8005088 <HAL_DMA_Abort+0x61c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d022      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a35      	ldr	r2, [pc, #212]	@ (800508c <HAL_DMA_Abort+0x620>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01d      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a34      	ldr	r2, [pc, #208]	@ (8005090 <HAL_DMA_Abort+0x624>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a32      	ldr	r2, [pc, #200]	@ (8005094 <HAL_DMA_Abort+0x628>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a31      	ldr	r2, [pc, #196]	@ (8005098 <HAL_DMA_Abort+0x62c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800509c <HAL_DMA_Abort+0x630>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2e      	ldr	r2, [pc, #184]	@ (80050a0 <HAL_DMA_Abort+0x634>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80050a4 <HAL_DMA_Abort+0x638>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d101      	bne.n	8004ffa <HAL_DMA_Abort+0x58e>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_DMA_Abort+0x590>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d015      	beq.n	800502c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005008:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800501c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005020:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800502a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40020010 	.word	0x40020010
 800504c:	40020028 	.word	0x40020028
 8005050:	40020040 	.word	0x40020040
 8005054:	40020058 	.word	0x40020058
 8005058:	40020070 	.word	0x40020070
 800505c:	40020088 	.word	0x40020088
 8005060:	400200a0 	.word	0x400200a0
 8005064:	400200b8 	.word	0x400200b8
 8005068:	40020410 	.word	0x40020410
 800506c:	40020428 	.word	0x40020428
 8005070:	40020440 	.word	0x40020440
 8005074:	40020458 	.word	0x40020458
 8005078:	40020470 	.word	0x40020470
 800507c:	40020488 	.word	0x40020488
 8005080:	400204a0 	.word	0x400204a0
 8005084:	400204b8 	.word	0x400204b8
 8005088:	58025408 	.word	0x58025408
 800508c:	5802541c 	.word	0x5802541c
 8005090:	58025430 	.word	0x58025430
 8005094:	58025444 	.word	0x58025444
 8005098:	58025458 	.word	0x58025458
 800509c:	5802546c 	.word	0x5802546c
 80050a0:	58025480 	.word	0x58025480
 80050a4:	58025494 	.word	0x58025494

080050a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e237      	b.n	800552a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d004      	beq.n	80050d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2280      	movs	r2, #128	@ 0x80
 80050ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e22c      	b.n	800552a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a5c      	ldr	r2, [pc, #368]	@ (8005248 <HAL_DMA_Abort_IT+0x1a0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d04a      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a5b      	ldr	r2, [pc, #364]	@ (800524c <HAL_DMA_Abort_IT+0x1a4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d045      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a59      	ldr	r2, [pc, #356]	@ (8005250 <HAL_DMA_Abort_IT+0x1a8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d040      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a58      	ldr	r2, [pc, #352]	@ (8005254 <HAL_DMA_Abort_IT+0x1ac>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d03b      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a56      	ldr	r2, [pc, #344]	@ (8005258 <HAL_DMA_Abort_IT+0x1b0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d036      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a55      	ldr	r2, [pc, #340]	@ (800525c <HAL_DMA_Abort_IT+0x1b4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d031      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a53      	ldr	r2, [pc, #332]	@ (8005260 <HAL_DMA_Abort_IT+0x1b8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d02c      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a52      	ldr	r2, [pc, #328]	@ (8005264 <HAL_DMA_Abort_IT+0x1bc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d027      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a50      	ldr	r2, [pc, #320]	@ (8005268 <HAL_DMA_Abort_IT+0x1c0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d022      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a4f      	ldr	r2, [pc, #316]	@ (800526c <HAL_DMA_Abort_IT+0x1c4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d01d      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a4d      	ldr	r2, [pc, #308]	@ (8005270 <HAL_DMA_Abort_IT+0x1c8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d018      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a4c      	ldr	r2, [pc, #304]	@ (8005274 <HAL_DMA_Abort_IT+0x1cc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d013      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a4a      	ldr	r2, [pc, #296]	@ (8005278 <HAL_DMA_Abort_IT+0x1d0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00e      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a49      	ldr	r2, [pc, #292]	@ (800527c <HAL_DMA_Abort_IT+0x1d4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a47      	ldr	r2, [pc, #284]	@ (8005280 <HAL_DMA_Abort_IT+0x1d8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a46      	ldr	r2, [pc, #280]	@ (8005284 <HAL_DMA_Abort_IT+0x1dc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d101      	bne.n	8005174 <HAL_DMA_Abort_IT+0xcc>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_DMA_Abort_IT+0xce>
 8005174:	2300      	movs	r3, #0
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8086 	beq.w	8005288 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2204      	movs	r2, #4
 8005180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2f      	ldr	r2, [pc, #188]	@ (8005248 <HAL_DMA_Abort_IT+0x1a0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d04a      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2e      	ldr	r2, [pc, #184]	@ (800524c <HAL_DMA_Abort_IT+0x1a4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d045      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2c      	ldr	r2, [pc, #176]	@ (8005250 <HAL_DMA_Abort_IT+0x1a8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d040      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005254 <HAL_DMA_Abort_IT+0x1ac>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d03b      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a29      	ldr	r2, [pc, #164]	@ (8005258 <HAL_DMA_Abort_IT+0x1b0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d036      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a28      	ldr	r2, [pc, #160]	@ (800525c <HAL_DMA_Abort_IT+0x1b4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d031      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a26      	ldr	r2, [pc, #152]	@ (8005260 <HAL_DMA_Abort_IT+0x1b8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d02c      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a25      	ldr	r2, [pc, #148]	@ (8005264 <HAL_DMA_Abort_IT+0x1bc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d027      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a23      	ldr	r2, [pc, #140]	@ (8005268 <HAL_DMA_Abort_IT+0x1c0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d022      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a22      	ldr	r2, [pc, #136]	@ (800526c <HAL_DMA_Abort_IT+0x1c4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d01d      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a20      	ldr	r2, [pc, #128]	@ (8005270 <HAL_DMA_Abort_IT+0x1c8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d018      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005274 <HAL_DMA_Abort_IT+0x1cc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d013      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1d      	ldr	r2, [pc, #116]	@ (8005278 <HAL_DMA_Abort_IT+0x1d0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00e      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1c      	ldr	r2, [pc, #112]	@ (800527c <HAL_DMA_Abort_IT+0x1d4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1a      	ldr	r2, [pc, #104]	@ (8005280 <HAL_DMA_Abort_IT+0x1d8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a19      	ldr	r2, [pc, #100]	@ (8005284 <HAL_DMA_Abort_IT+0x1dc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d108      	bne.n	8005236 <HAL_DMA_Abort_IT+0x18e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e178      	b.n	8005528 <HAL_DMA_Abort_IT+0x480>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e16f      	b.n	8005528 <HAL_DMA_Abort_IT+0x480>
 8005248:	40020010 	.word	0x40020010
 800524c:	40020028 	.word	0x40020028
 8005250:	40020040 	.word	0x40020040
 8005254:	40020058 	.word	0x40020058
 8005258:	40020070 	.word	0x40020070
 800525c:	40020088 	.word	0x40020088
 8005260:	400200a0 	.word	0x400200a0
 8005264:	400200b8 	.word	0x400200b8
 8005268:	40020410 	.word	0x40020410
 800526c:	40020428 	.word	0x40020428
 8005270:	40020440 	.word	0x40020440
 8005274:	40020458 	.word	0x40020458
 8005278:	40020470 	.word	0x40020470
 800527c:	40020488 	.word	0x40020488
 8005280:	400204a0 	.word	0x400204a0
 8005284:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 020e 	bic.w	r2, r2, #14
 8005296:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a6c      	ldr	r2, [pc, #432]	@ (8005450 <HAL_DMA_Abort_IT+0x3a8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d04a      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6b      	ldr	r2, [pc, #428]	@ (8005454 <HAL_DMA_Abort_IT+0x3ac>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d045      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a69      	ldr	r2, [pc, #420]	@ (8005458 <HAL_DMA_Abort_IT+0x3b0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d040      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a68      	ldr	r2, [pc, #416]	@ (800545c <HAL_DMA_Abort_IT+0x3b4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d03b      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a66      	ldr	r2, [pc, #408]	@ (8005460 <HAL_DMA_Abort_IT+0x3b8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d036      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a65      	ldr	r2, [pc, #404]	@ (8005464 <HAL_DMA_Abort_IT+0x3bc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d031      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a63      	ldr	r2, [pc, #396]	@ (8005468 <HAL_DMA_Abort_IT+0x3c0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d02c      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a62      	ldr	r2, [pc, #392]	@ (800546c <HAL_DMA_Abort_IT+0x3c4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d027      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a60      	ldr	r2, [pc, #384]	@ (8005470 <HAL_DMA_Abort_IT+0x3c8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a5f      	ldr	r2, [pc, #380]	@ (8005474 <HAL_DMA_Abort_IT+0x3cc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d01d      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a5d      	ldr	r2, [pc, #372]	@ (8005478 <HAL_DMA_Abort_IT+0x3d0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a5c      	ldr	r2, [pc, #368]	@ (800547c <HAL_DMA_Abort_IT+0x3d4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5a      	ldr	r2, [pc, #360]	@ (8005480 <HAL_DMA_Abort_IT+0x3d8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a59      	ldr	r2, [pc, #356]	@ (8005484 <HAL_DMA_Abort_IT+0x3dc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a57      	ldr	r2, [pc, #348]	@ (8005488 <HAL_DMA_Abort_IT+0x3e0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a56      	ldr	r2, [pc, #344]	@ (800548c <HAL_DMA_Abort_IT+0x3e4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d108      	bne.n	800534a <HAL_DMA_Abort_IT+0x2a2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e007      	b.n	800535a <HAL_DMA_Abort_IT+0x2b2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a3c      	ldr	r2, [pc, #240]	@ (8005450 <HAL_DMA_Abort_IT+0x3a8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d072      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a3a      	ldr	r2, [pc, #232]	@ (8005454 <HAL_DMA_Abort_IT+0x3ac>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d06d      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a39      	ldr	r2, [pc, #228]	@ (8005458 <HAL_DMA_Abort_IT+0x3b0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d068      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a37      	ldr	r2, [pc, #220]	@ (800545c <HAL_DMA_Abort_IT+0x3b4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d063      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a36      	ldr	r2, [pc, #216]	@ (8005460 <HAL_DMA_Abort_IT+0x3b8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d05e      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a34      	ldr	r2, [pc, #208]	@ (8005464 <HAL_DMA_Abort_IT+0x3bc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d059      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a33      	ldr	r2, [pc, #204]	@ (8005468 <HAL_DMA_Abort_IT+0x3c0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d054      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a31      	ldr	r2, [pc, #196]	@ (800546c <HAL_DMA_Abort_IT+0x3c4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d04f      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a30      	ldr	r2, [pc, #192]	@ (8005470 <HAL_DMA_Abort_IT+0x3c8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005474 <HAL_DMA_Abort_IT+0x3cc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005478 <HAL_DMA_Abort_IT+0x3d0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	@ (800547c <HAL_DMA_Abort_IT+0x3d4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005480 <HAL_DMA_Abort_IT+0x3d8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a28      	ldr	r2, [pc, #160]	@ (8005484 <HAL_DMA_Abort_IT+0x3dc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a27      	ldr	r2, [pc, #156]	@ (8005488 <HAL_DMA_Abort_IT+0x3e0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a25      	ldr	r2, [pc, #148]	@ (800548c <HAL_DMA_Abort_IT+0x3e4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a24      	ldr	r2, [pc, #144]	@ (8005490 <HAL_DMA_Abort_IT+0x3e8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a22      	ldr	r2, [pc, #136]	@ (8005494 <HAL_DMA_Abort_IT+0x3ec>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a21      	ldr	r2, [pc, #132]	@ (8005498 <HAL_DMA_Abort_IT+0x3f0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1f      	ldr	r2, [pc, #124]	@ (800549c <HAL_DMA_Abort_IT+0x3f4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <HAL_DMA_Abort_IT+0x3f8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1c      	ldr	r2, [pc, #112]	@ (80054a4 <HAL_DMA_Abort_IT+0x3fc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1b      	ldr	r2, [pc, #108]	@ (80054a8 <HAL_DMA_Abort_IT+0x400>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a19      	ldr	r2, [pc, #100]	@ (80054ac <HAL_DMA_Abort_IT+0x404>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d132      	bne.n	80054b0 <HAL_DMA_Abort_IT+0x408>
 800544a:	2301      	movs	r3, #1
 800544c:	e031      	b.n	80054b2 <HAL_DMA_Abort_IT+0x40a>
 800544e:	bf00      	nop
 8005450:	40020010 	.word	0x40020010
 8005454:	40020028 	.word	0x40020028
 8005458:	40020040 	.word	0x40020040
 800545c:	40020058 	.word	0x40020058
 8005460:	40020070 	.word	0x40020070
 8005464:	40020088 	.word	0x40020088
 8005468:	400200a0 	.word	0x400200a0
 800546c:	400200b8 	.word	0x400200b8
 8005470:	40020410 	.word	0x40020410
 8005474:	40020428 	.word	0x40020428
 8005478:	40020440 	.word	0x40020440
 800547c:	40020458 	.word	0x40020458
 8005480:	40020470 	.word	0x40020470
 8005484:	40020488 	.word	0x40020488
 8005488:	400204a0 	.word	0x400204a0
 800548c:	400204b8 	.word	0x400204b8
 8005490:	58025408 	.word	0x58025408
 8005494:	5802541c 	.word	0x5802541c
 8005498:	58025430 	.word	0x58025430
 800549c:	58025444 	.word	0x58025444
 80054a0:	58025458 	.word	0x58025458
 80054a4:	5802546c 	.word	0x5802546c
 80054a8:	58025480 	.word	0x58025480
 80054ac:	58025494 	.word	0x58025494
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d028      	beq.n	8005508 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2201      	movs	r2, #1
 80054d6:	409a      	lsls	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005506:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop

08005534 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	@ 0x28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005540:	4b67      	ldr	r3, [pc, #412]	@ (80056e0 <HAL_DMA_IRQHandler+0x1ac>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a67      	ldr	r2, [pc, #412]	@ (80056e4 <HAL_DMA_IRQHandler+0x1b0>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	0a9b      	lsrs	r3, r3, #10
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005552:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005558:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a5f      	ldr	r2, [pc, #380]	@ (80056e8 <HAL_DMA_IRQHandler+0x1b4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d04a      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a5d      	ldr	r2, [pc, #372]	@ (80056ec <HAL_DMA_IRQHandler+0x1b8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d045      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a5c      	ldr	r2, [pc, #368]	@ (80056f0 <HAL_DMA_IRQHandler+0x1bc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d040      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a5a      	ldr	r2, [pc, #360]	@ (80056f4 <HAL_DMA_IRQHandler+0x1c0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d03b      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a59      	ldr	r2, [pc, #356]	@ (80056f8 <HAL_DMA_IRQHandler+0x1c4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d036      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a57      	ldr	r2, [pc, #348]	@ (80056fc <HAL_DMA_IRQHandler+0x1c8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d031      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a56      	ldr	r2, [pc, #344]	@ (8005700 <HAL_DMA_IRQHandler+0x1cc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d02c      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a54      	ldr	r2, [pc, #336]	@ (8005704 <HAL_DMA_IRQHandler+0x1d0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d027      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a53      	ldr	r2, [pc, #332]	@ (8005708 <HAL_DMA_IRQHandler+0x1d4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a51      	ldr	r2, [pc, #324]	@ (800570c <HAL_DMA_IRQHandler+0x1d8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01d      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a50      	ldr	r2, [pc, #320]	@ (8005710 <HAL_DMA_IRQHandler+0x1dc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005714 <HAL_DMA_IRQHandler+0x1e0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a4d      	ldr	r2, [pc, #308]	@ (8005718 <HAL_DMA_IRQHandler+0x1e4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a4b      	ldr	r2, [pc, #300]	@ (800571c <HAL_DMA_IRQHandler+0x1e8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a4a      	ldr	r2, [pc, #296]	@ (8005720 <HAL_DMA_IRQHandler+0x1ec>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_DMA_IRQHandler+0xd2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a48      	ldr	r2, [pc, #288]	@ (8005724 <HAL_DMA_IRQHandler+0x1f0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <HAL_DMA_IRQHandler+0xd6>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_DMA_IRQHandler+0xd8>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 842b 	beq.w	8005e68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2208      	movs	r2, #8
 800561c:	409a      	lsls	r2, r3
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	4013      	ands	r3, r2
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80a2 	beq.w	800576c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2e      	ldr	r2, [pc, #184]	@ (80056e8 <HAL_DMA_IRQHandler+0x1b4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d04a      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2d      	ldr	r2, [pc, #180]	@ (80056ec <HAL_DMA_IRQHandler+0x1b8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d045      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2b      	ldr	r2, [pc, #172]	@ (80056f0 <HAL_DMA_IRQHandler+0x1bc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d040      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2a      	ldr	r2, [pc, #168]	@ (80056f4 <HAL_DMA_IRQHandler+0x1c0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d03b      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a28      	ldr	r2, [pc, #160]	@ (80056f8 <HAL_DMA_IRQHandler+0x1c4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d036      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a27      	ldr	r2, [pc, #156]	@ (80056fc <HAL_DMA_IRQHandler+0x1c8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d031      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a25      	ldr	r2, [pc, #148]	@ (8005700 <HAL_DMA_IRQHandler+0x1cc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d02c      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a24      	ldr	r2, [pc, #144]	@ (8005704 <HAL_DMA_IRQHandler+0x1d0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d027      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a22      	ldr	r2, [pc, #136]	@ (8005708 <HAL_DMA_IRQHandler+0x1d4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d022      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a21      	ldr	r2, [pc, #132]	@ (800570c <HAL_DMA_IRQHandler+0x1d8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d01d      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1f      	ldr	r2, [pc, #124]	@ (8005710 <HAL_DMA_IRQHandler+0x1dc>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d018      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1e      	ldr	r2, [pc, #120]	@ (8005714 <HAL_DMA_IRQHandler+0x1e0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005718 <HAL_DMA_IRQHandler+0x1e4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00e      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1b      	ldr	r2, [pc, #108]	@ (800571c <HAL_DMA_IRQHandler+0x1e8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d009      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a19      	ldr	r2, [pc, #100]	@ (8005720 <HAL_DMA_IRQHandler+0x1ec>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x194>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a18      	ldr	r2, [pc, #96]	@ (8005724 <HAL_DMA_IRQHandler+0x1f0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d12f      	bne.n	8005728 <HAL_DMA_IRQHandler+0x1f4>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	e02e      	b.n	800573c <HAL_DMA_IRQHandler+0x208>
 80056de:	bf00      	nop
 80056e0:	24000004 	.word	0x24000004
 80056e4:	1b4e81b5 	.word	0x1b4e81b5
 80056e8:	40020010 	.word	0x40020010
 80056ec:	40020028 	.word	0x40020028
 80056f0:	40020040 	.word	0x40020040
 80056f4:	40020058 	.word	0x40020058
 80056f8:	40020070 	.word	0x40020070
 80056fc:	40020088 	.word	0x40020088
 8005700:	400200a0 	.word	0x400200a0
 8005704:	400200b8 	.word	0x400200b8
 8005708:	40020410 	.word	0x40020410
 800570c:	40020428 	.word	0x40020428
 8005710:	40020440 	.word	0x40020440
 8005714:	40020458 	.word	0x40020458
 8005718:	40020470 	.word	0x40020470
 800571c:	40020488 	.word	0x40020488
 8005720:	400204a0 	.word	0x400204a0
 8005724:	400204b8 	.word	0x400204b8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	bf14      	ite	ne
 8005736:	2301      	movne	r3, #1
 8005738:	2300      	moveq	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d015      	beq.n	800576c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0204 	bic.w	r2, r2, #4
 800574e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	2208      	movs	r2, #8
 800575a:	409a      	lsls	r2, r3
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005764:	f043 0201 	orr.w	r2, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	fa22 f303 	lsr.w	r3, r2, r3
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d06e      	beq.n	8005860 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a69      	ldr	r2, [pc, #420]	@ (800592c <HAL_DMA_IRQHandler+0x3f8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d04a      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a67      	ldr	r2, [pc, #412]	@ (8005930 <HAL_DMA_IRQHandler+0x3fc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d045      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a66      	ldr	r2, [pc, #408]	@ (8005934 <HAL_DMA_IRQHandler+0x400>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d040      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a64      	ldr	r2, [pc, #400]	@ (8005938 <HAL_DMA_IRQHandler+0x404>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d03b      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a63      	ldr	r2, [pc, #396]	@ (800593c <HAL_DMA_IRQHandler+0x408>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d036      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a61      	ldr	r2, [pc, #388]	@ (8005940 <HAL_DMA_IRQHandler+0x40c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d031      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a60      	ldr	r2, [pc, #384]	@ (8005944 <HAL_DMA_IRQHandler+0x410>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d02c      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a5e      	ldr	r2, [pc, #376]	@ (8005948 <HAL_DMA_IRQHandler+0x414>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d027      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a5d      	ldr	r2, [pc, #372]	@ (800594c <HAL_DMA_IRQHandler+0x418>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d022      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a5b      	ldr	r2, [pc, #364]	@ (8005950 <HAL_DMA_IRQHandler+0x41c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01d      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5a      	ldr	r2, [pc, #360]	@ (8005954 <HAL_DMA_IRQHandler+0x420>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d018      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a58      	ldr	r2, [pc, #352]	@ (8005958 <HAL_DMA_IRQHandler+0x424>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a57      	ldr	r2, [pc, #348]	@ (800595c <HAL_DMA_IRQHandler+0x428>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00e      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a55      	ldr	r2, [pc, #340]	@ (8005960 <HAL_DMA_IRQHandler+0x42c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a54      	ldr	r2, [pc, #336]	@ (8005964 <HAL_DMA_IRQHandler+0x430>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_DMA_IRQHandler+0x2ee>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a52      	ldr	r2, [pc, #328]	@ (8005968 <HAL_DMA_IRQHandler+0x434>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10a      	bne.n	8005838 <HAL_DMA_IRQHandler+0x304>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	e003      	b.n	8005840 <HAL_DMA_IRQHandler+0x30c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2300      	movs	r3, #0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00d      	beq.n	8005860 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2201      	movs	r2, #1
 800584e:	409a      	lsls	r2, r3
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005858:	f043 0202 	orr.w	r2, r3, #2
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	2204      	movs	r2, #4
 800586a:	409a      	lsls	r2, r3
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	4013      	ands	r3, r2
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 808f 	beq.w	8005994 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2c      	ldr	r2, [pc, #176]	@ (800592c <HAL_DMA_IRQHandler+0x3f8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d04a      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2a      	ldr	r2, [pc, #168]	@ (8005930 <HAL_DMA_IRQHandler+0x3fc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d045      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a29      	ldr	r2, [pc, #164]	@ (8005934 <HAL_DMA_IRQHandler+0x400>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d040      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a27      	ldr	r2, [pc, #156]	@ (8005938 <HAL_DMA_IRQHandler+0x404>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d03b      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a26      	ldr	r2, [pc, #152]	@ (800593c <HAL_DMA_IRQHandler+0x408>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d036      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a24      	ldr	r2, [pc, #144]	@ (8005940 <HAL_DMA_IRQHandler+0x40c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d031      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a23      	ldr	r2, [pc, #140]	@ (8005944 <HAL_DMA_IRQHandler+0x410>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d02c      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a21      	ldr	r2, [pc, #132]	@ (8005948 <HAL_DMA_IRQHandler+0x414>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d027      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a20      	ldr	r2, [pc, #128]	@ (800594c <HAL_DMA_IRQHandler+0x418>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d022      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005950 <HAL_DMA_IRQHandler+0x41c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01d      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1d      	ldr	r2, [pc, #116]	@ (8005954 <HAL_DMA_IRQHandler+0x420>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d018      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005958 <HAL_DMA_IRQHandler+0x424>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1a      	ldr	r2, [pc, #104]	@ (800595c <HAL_DMA_IRQHandler+0x428>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00e      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <HAL_DMA_IRQHandler+0x42c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a17      	ldr	r2, [pc, #92]	@ (8005964 <HAL_DMA_IRQHandler+0x430>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d004      	beq.n	8005916 <HAL_DMA_IRQHandler+0x3e2>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a15      	ldr	r2, [pc, #84]	@ (8005968 <HAL_DMA_IRQHandler+0x434>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d12a      	bne.n	800596c <HAL_DMA_IRQHandler+0x438>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf14      	ite	ne
 8005924:	2301      	movne	r3, #1
 8005926:	2300      	moveq	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	e023      	b.n	8005974 <HAL_DMA_IRQHandler+0x440>
 800592c:	40020010 	.word	0x40020010
 8005930:	40020028 	.word	0x40020028
 8005934:	40020040 	.word	0x40020040
 8005938:	40020058 	.word	0x40020058
 800593c:	40020070 	.word	0x40020070
 8005940:	40020088 	.word	0x40020088
 8005944:	400200a0 	.word	0x400200a0
 8005948:	400200b8 	.word	0x400200b8
 800594c:	40020410 	.word	0x40020410
 8005950:	40020428 	.word	0x40020428
 8005954:	40020440 	.word	0x40020440
 8005958:	40020458 	.word	0x40020458
 800595c:	40020470 	.word	0x40020470
 8005960:	40020488 	.word	0x40020488
 8005964:	400204a0 	.word	0x400204a0
 8005968:	400204b8 	.word	0x400204b8
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00d      	beq.n	8005994 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2204      	movs	r2, #4
 8005982:	409a      	lsls	r2, r3
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	2210      	movs	r2, #16
 800599e:	409a      	lsls	r2, r3
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80a6 	beq.w	8005af6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a85      	ldr	r2, [pc, #532]	@ (8005bc4 <HAL_DMA_IRQHandler+0x690>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d04a      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a83      	ldr	r2, [pc, #524]	@ (8005bc8 <HAL_DMA_IRQHandler+0x694>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d045      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a82      	ldr	r2, [pc, #520]	@ (8005bcc <HAL_DMA_IRQHandler+0x698>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d040      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a80      	ldr	r2, [pc, #512]	@ (8005bd0 <HAL_DMA_IRQHandler+0x69c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d03b      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a7f      	ldr	r2, [pc, #508]	@ (8005bd4 <HAL_DMA_IRQHandler+0x6a0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d036      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a7d      	ldr	r2, [pc, #500]	@ (8005bd8 <HAL_DMA_IRQHandler+0x6a4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d031      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a7c      	ldr	r2, [pc, #496]	@ (8005bdc <HAL_DMA_IRQHandler+0x6a8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d02c      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a7a      	ldr	r2, [pc, #488]	@ (8005be0 <HAL_DMA_IRQHandler+0x6ac>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d027      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a79      	ldr	r2, [pc, #484]	@ (8005be4 <HAL_DMA_IRQHandler+0x6b0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d022      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a77      	ldr	r2, [pc, #476]	@ (8005be8 <HAL_DMA_IRQHandler+0x6b4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01d      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a76      	ldr	r2, [pc, #472]	@ (8005bec <HAL_DMA_IRQHandler+0x6b8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d018      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a74      	ldr	r2, [pc, #464]	@ (8005bf0 <HAL_DMA_IRQHandler+0x6bc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a73      	ldr	r2, [pc, #460]	@ (8005bf4 <HAL_DMA_IRQHandler+0x6c0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a71      	ldr	r2, [pc, #452]	@ (8005bf8 <HAL_DMA_IRQHandler+0x6c4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a70      	ldr	r2, [pc, #448]	@ (8005bfc <HAL_DMA_IRQHandler+0x6c8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x516>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a6e      	ldr	r2, [pc, #440]	@ (8005c00 <HAL_DMA_IRQHandler+0x6cc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d10a      	bne.n	8005a60 <HAL_DMA_IRQHandler+0x52c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e009      	b.n	8005a74 <HAL_DMA_IRQHandler+0x540>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf14      	ite	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	2300      	moveq	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d03e      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a7c:	f003 031f 	and.w	r3, r3, #31
 8005a80:	2210      	movs	r2, #16
 8005a82:	409a      	lsls	r2, r3
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d018      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d108      	bne.n	8005ab6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d024      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
 8005ab4:	e01f      	b.n	8005af6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01b      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
 8005ac6:	e016      	b.n	8005af6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d107      	bne.n	8005ae6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0208 	bic.w	r2, r2, #8
 8005ae4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	2220      	movs	r2, #32
 8005b00:	409a      	lsls	r2, r3
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8110 	beq.w	8005d2c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc4 <HAL_DMA_IRQHandler+0x690>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d04a      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2b      	ldr	r2, [pc, #172]	@ (8005bc8 <HAL_DMA_IRQHandler+0x694>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d045      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a29      	ldr	r2, [pc, #164]	@ (8005bcc <HAL_DMA_IRQHandler+0x698>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d040      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a28      	ldr	r2, [pc, #160]	@ (8005bd0 <HAL_DMA_IRQHandler+0x69c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d03b      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a26      	ldr	r2, [pc, #152]	@ (8005bd4 <HAL_DMA_IRQHandler+0x6a0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d036      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a25      	ldr	r2, [pc, #148]	@ (8005bd8 <HAL_DMA_IRQHandler+0x6a4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d031      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a23      	ldr	r2, [pc, #140]	@ (8005bdc <HAL_DMA_IRQHandler+0x6a8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d02c      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a22      	ldr	r2, [pc, #136]	@ (8005be0 <HAL_DMA_IRQHandler+0x6ac>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d027      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a20      	ldr	r2, [pc, #128]	@ (8005be4 <HAL_DMA_IRQHandler+0x6b0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d022      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005be8 <HAL_DMA_IRQHandler+0x6b4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d01d      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	@ (8005bec <HAL_DMA_IRQHandler+0x6b8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d018      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bf0 <HAL_DMA_IRQHandler+0x6bc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d013      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1a      	ldr	r2, [pc, #104]	@ (8005bf4 <HAL_DMA_IRQHandler+0x6c0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00e      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a19      	ldr	r2, [pc, #100]	@ (8005bf8 <HAL_DMA_IRQHandler+0x6c4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a17      	ldr	r2, [pc, #92]	@ (8005bfc <HAL_DMA_IRQHandler+0x6c8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_DMA_IRQHandler+0x678>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a16      	ldr	r2, [pc, #88]	@ (8005c00 <HAL_DMA_IRQHandler+0x6cc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d12b      	bne.n	8005c04 <HAL_DMA_IRQHandler+0x6d0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0310 	and.w	r3, r3, #16
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bf14      	ite	ne
 8005bba:	2301      	movne	r3, #1
 8005bbc:	2300      	moveq	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	e02a      	b.n	8005c18 <HAL_DMA_IRQHandler+0x6e4>
 8005bc2:	bf00      	nop
 8005bc4:	40020010 	.word	0x40020010
 8005bc8:	40020028 	.word	0x40020028
 8005bcc:	40020040 	.word	0x40020040
 8005bd0:	40020058 	.word	0x40020058
 8005bd4:	40020070 	.word	0x40020070
 8005bd8:	40020088 	.word	0x40020088
 8005bdc:	400200a0 	.word	0x400200a0
 8005be0:	400200b8 	.word	0x400200b8
 8005be4:	40020410 	.word	0x40020410
 8005be8:	40020428 	.word	0x40020428
 8005bec:	40020440 	.word	0x40020440
 8005bf0:	40020458 	.word	0x40020458
 8005bf4:	40020470 	.word	0x40020470
 8005bf8:	40020488 	.word	0x40020488
 8005bfc:	400204a0 	.word	0x400204a0
 8005c00:	400204b8 	.word	0x400204b8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bf14      	ite	ne
 8005c12:	2301      	movne	r3, #1
 8005c14:	2300      	moveq	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8087 	beq.w	8005d2c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c22:	f003 031f 	and.w	r3, r3, #31
 8005c26:	2220      	movs	r2, #32
 8005c28:	409a      	lsls	r2, r3
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d139      	bne.n	8005cae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0216 	bic.w	r2, r2, #22
 8005c48:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c58:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <HAL_DMA_IRQHandler+0x736>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0208 	bic.w	r2, r2, #8
 8005c78:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	223f      	movs	r2, #63	@ 0x3f
 8005c84:	409a      	lsls	r2, r3
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 834a 	beq.w	8006338 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
          }
          return;
 8005cac:	e344      	b.n	8006338 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d018      	beq.n	8005cee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d02c      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
 8005cda:	e027      	b.n	8005d2c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d023      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
 8005cec:	e01e      	b.n	8005d2c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10f      	bne.n	8005d1c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0210 	bic.w	r2, r2, #16
 8005d0a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8306 	beq.w	8006342 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8088 	beq.w	8005e54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2204      	movs	r2, #4
 8005d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a7a      	ldr	r2, [pc, #488]	@ (8005f3c <HAL_DMA_IRQHandler+0xa08>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d04a      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a79      	ldr	r2, [pc, #484]	@ (8005f40 <HAL_DMA_IRQHandler+0xa0c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d045      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a77      	ldr	r2, [pc, #476]	@ (8005f44 <HAL_DMA_IRQHandler+0xa10>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d040      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a76      	ldr	r2, [pc, #472]	@ (8005f48 <HAL_DMA_IRQHandler+0xa14>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d03b      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a74      	ldr	r2, [pc, #464]	@ (8005f4c <HAL_DMA_IRQHandler+0xa18>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d036      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a73      	ldr	r2, [pc, #460]	@ (8005f50 <HAL_DMA_IRQHandler+0xa1c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d031      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a71      	ldr	r2, [pc, #452]	@ (8005f54 <HAL_DMA_IRQHandler+0xa20>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d02c      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a70      	ldr	r2, [pc, #448]	@ (8005f58 <HAL_DMA_IRQHandler+0xa24>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d027      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a6e      	ldr	r2, [pc, #440]	@ (8005f5c <HAL_DMA_IRQHandler+0xa28>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a6d      	ldr	r2, [pc, #436]	@ (8005f60 <HAL_DMA_IRQHandler+0xa2c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d01d      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a6b      	ldr	r2, [pc, #428]	@ (8005f64 <HAL_DMA_IRQHandler+0xa30>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a6a      	ldr	r2, [pc, #424]	@ (8005f68 <HAL_DMA_IRQHandler+0xa34>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a68      	ldr	r2, [pc, #416]	@ (8005f6c <HAL_DMA_IRQHandler+0xa38>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a67      	ldr	r2, [pc, #412]	@ (8005f70 <HAL_DMA_IRQHandler+0xa3c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a65      	ldr	r2, [pc, #404]	@ (8005f74 <HAL_DMA_IRQHandler+0xa40>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_DMA_IRQHandler+0x8b8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a64      	ldr	r2, [pc, #400]	@ (8005f78 <HAL_DMA_IRQHandler+0xa44>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d108      	bne.n	8005dfe <HAL_DMA_IRQHandler+0x8ca>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0201 	bic.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	e007      	b.n	8005e0e <HAL_DMA_IRQHandler+0x8da>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3301      	adds	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d307      	bcc.n	8005e2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f2      	bne.n	8005e0e <HAL_DMA_IRQHandler+0x8da>
 8005e28:	e000      	b.n	8005e2c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e2a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005e42:	e003      	b.n	8005e4c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8272 	beq.w	8006342 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
 8005e66:	e26c      	b.n	8006342 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a43      	ldr	r2, [pc, #268]	@ (8005f7c <HAL_DMA_IRQHandler+0xa48>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d022      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x984>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a42      	ldr	r2, [pc, #264]	@ (8005f80 <HAL_DMA_IRQHandler+0xa4c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d01d      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x984>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a40      	ldr	r2, [pc, #256]	@ (8005f84 <HAL_DMA_IRQHandler+0xa50>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d018      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x984>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f88 <HAL_DMA_IRQHandler+0xa54>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d013      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x984>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a3d      	ldr	r2, [pc, #244]	@ (8005f8c <HAL_DMA_IRQHandler+0xa58>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00e      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x984>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a3c      	ldr	r2, [pc, #240]	@ (8005f90 <HAL_DMA_IRQHandler+0xa5c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x984>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8005f94 <HAL_DMA_IRQHandler+0xa60>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x984>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a39      	ldr	r2, [pc, #228]	@ (8005f98 <HAL_DMA_IRQHandler+0xa64>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d101      	bne.n	8005ebc <HAL_DMA_IRQHandler+0x988>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <HAL_DMA_IRQHandler+0x98a>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 823f 	beq.w	8006342 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80cd 	beq.w	800607c <HAL_DMA_IRQHandler+0xb48>
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80c7 	beq.w	800607c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	409a      	lsls	r2, r3
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d049      	beq.n	8005f9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 8210 	beq.w	800633c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f24:	e20a      	b.n	800633c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8206 	beq.w	800633c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f38:	e200      	b.n	800633c <HAL_DMA_IRQHandler+0xe08>
 8005f3a:	bf00      	nop
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
 8005f7c:	58025408 	.word	0x58025408
 8005f80:	5802541c 	.word	0x5802541c
 8005f84:	58025430 	.word	0x58025430
 8005f88:	58025444 	.word	0x58025444
 8005f8c:	58025458 	.word	0x58025458
 8005f90:	5802546c 	.word	0x5802546c
 8005f94:	58025480 	.word	0x58025480
 8005f98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d160      	bne.n	8006068 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a7f      	ldr	r2, [pc, #508]	@ (80061a8 <HAL_DMA_IRQHandler+0xc74>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d04a      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a7d      	ldr	r2, [pc, #500]	@ (80061ac <HAL_DMA_IRQHandler+0xc78>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d045      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a7c      	ldr	r2, [pc, #496]	@ (80061b0 <HAL_DMA_IRQHandler+0xc7c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d040      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a7a      	ldr	r2, [pc, #488]	@ (80061b4 <HAL_DMA_IRQHandler+0xc80>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d03b      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a79      	ldr	r2, [pc, #484]	@ (80061b8 <HAL_DMA_IRQHandler+0xc84>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d036      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a77      	ldr	r2, [pc, #476]	@ (80061bc <HAL_DMA_IRQHandler+0xc88>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d031      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a76      	ldr	r2, [pc, #472]	@ (80061c0 <HAL_DMA_IRQHandler+0xc8c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d02c      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a74      	ldr	r2, [pc, #464]	@ (80061c4 <HAL_DMA_IRQHandler+0xc90>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d027      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a73      	ldr	r2, [pc, #460]	@ (80061c8 <HAL_DMA_IRQHandler+0xc94>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d022      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a71      	ldr	r2, [pc, #452]	@ (80061cc <HAL_DMA_IRQHandler+0xc98>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01d      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a70      	ldr	r2, [pc, #448]	@ (80061d0 <HAL_DMA_IRQHandler+0xc9c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d018      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a6e      	ldr	r2, [pc, #440]	@ (80061d4 <HAL_DMA_IRQHandler+0xca0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a6d      	ldr	r2, [pc, #436]	@ (80061d8 <HAL_DMA_IRQHandler+0xca4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00e      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a6b      	ldr	r2, [pc, #428]	@ (80061dc <HAL_DMA_IRQHandler+0xca8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d009      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a6a      	ldr	r2, [pc, #424]	@ (80061e0 <HAL_DMA_IRQHandler+0xcac>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d004      	beq.n	8006046 <HAL_DMA_IRQHandler+0xb12>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a68      	ldr	r2, [pc, #416]	@ (80061e4 <HAL_DMA_IRQHandler+0xcb0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <HAL_DMA_IRQHandler+0xb24>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0208 	bic.w	r2, r2, #8
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e007      	b.n	8006068 <HAL_DMA_IRQHandler+0xb34>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0204 	bic.w	r2, r2, #4
 8006066:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8165 	beq.w	800633c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800607a:	e15f      	b.n	800633c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	2202      	movs	r2, #2
 8006086:	409a      	lsls	r2, r3
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80c5 	beq.w	800621c <HAL_DMA_IRQHandler+0xce8>
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80bf 	beq.w	800621c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	2202      	movs	r2, #2
 80060a8:	409a      	lsls	r2, r3
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d018      	beq.n	80060ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 813a 	beq.w	8006340 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060d4:	e134      	b.n	8006340 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8130 	beq.w	8006340 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e8:	e12a      	b.n	8006340 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 8089 	bne.w	8006208 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2b      	ldr	r2, [pc, #172]	@ (80061a8 <HAL_DMA_IRQHandler+0xc74>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d04a      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a29      	ldr	r2, [pc, #164]	@ (80061ac <HAL_DMA_IRQHandler+0xc78>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d045      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a28      	ldr	r2, [pc, #160]	@ (80061b0 <HAL_DMA_IRQHandler+0xc7c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d040      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a26      	ldr	r2, [pc, #152]	@ (80061b4 <HAL_DMA_IRQHandler+0xc80>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d03b      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a25      	ldr	r2, [pc, #148]	@ (80061b8 <HAL_DMA_IRQHandler+0xc84>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d036      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a23      	ldr	r2, [pc, #140]	@ (80061bc <HAL_DMA_IRQHandler+0xc88>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d031      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a22      	ldr	r2, [pc, #136]	@ (80061c0 <HAL_DMA_IRQHandler+0xc8c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d02c      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a20      	ldr	r2, [pc, #128]	@ (80061c4 <HAL_DMA_IRQHandler+0xc90>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d027      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1f      	ldr	r2, [pc, #124]	@ (80061c8 <HAL_DMA_IRQHandler+0xc94>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d022      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1d      	ldr	r2, [pc, #116]	@ (80061cc <HAL_DMA_IRQHandler+0xc98>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01d      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1c      	ldr	r2, [pc, #112]	@ (80061d0 <HAL_DMA_IRQHandler+0xc9c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d018      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1a      	ldr	r2, [pc, #104]	@ (80061d4 <HAL_DMA_IRQHandler+0xca0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a19      	ldr	r2, [pc, #100]	@ (80061d8 <HAL_DMA_IRQHandler+0xca4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00e      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a17      	ldr	r2, [pc, #92]	@ (80061dc <HAL_DMA_IRQHandler+0xca8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a16      	ldr	r2, [pc, #88]	@ (80061e0 <HAL_DMA_IRQHandler+0xcac>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <HAL_DMA_IRQHandler+0xc62>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a14      	ldr	r2, [pc, #80]	@ (80061e4 <HAL_DMA_IRQHandler+0xcb0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d128      	bne.n	80061e8 <HAL_DMA_IRQHandler+0xcb4>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0214 	bic.w	r2, r2, #20
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e027      	b.n	80061f8 <HAL_DMA_IRQHandler+0xcc4>
 80061a8:	40020010 	.word	0x40020010
 80061ac:	40020028 	.word	0x40020028
 80061b0:	40020040 	.word	0x40020040
 80061b4:	40020058 	.word	0x40020058
 80061b8:	40020070 	.word	0x40020070
 80061bc:	40020088 	.word	0x40020088
 80061c0:	400200a0 	.word	0x400200a0
 80061c4:	400200b8 	.word	0x400200b8
 80061c8:	40020410 	.word	0x40020410
 80061cc:	40020428 	.word	0x40020428
 80061d0:	40020440 	.word	0x40020440
 80061d4:	40020458 	.word	0x40020458
 80061d8:	40020470 	.word	0x40020470
 80061dc:	40020488 	.word	0x40020488
 80061e0:	400204a0 	.word	0x400204a0
 80061e4:	400204b8 	.word	0x400204b8
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 020a 	bic.w	r2, r2, #10
 80061f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8097 	beq.w	8006340 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800621a:	e091      	b.n	8006340 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	2208      	movs	r2, #8
 8006226:	409a      	lsls	r2, r3
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	4013      	ands	r3, r2
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8088 	beq.w	8006342 <HAL_DMA_IRQHandler+0xe0e>
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8082 	beq.w	8006342 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a41      	ldr	r2, [pc, #260]	@ (8006348 <HAL_DMA_IRQHandler+0xe14>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d04a      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a3f      	ldr	r2, [pc, #252]	@ (800634c <HAL_DMA_IRQHandler+0xe18>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d045      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a3e      	ldr	r2, [pc, #248]	@ (8006350 <HAL_DMA_IRQHandler+0xe1c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d040      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a3c      	ldr	r2, [pc, #240]	@ (8006354 <HAL_DMA_IRQHandler+0xe20>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d03b      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a3b      	ldr	r2, [pc, #236]	@ (8006358 <HAL_DMA_IRQHandler+0xe24>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d036      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a39      	ldr	r2, [pc, #228]	@ (800635c <HAL_DMA_IRQHandler+0xe28>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d031      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a38      	ldr	r2, [pc, #224]	@ (8006360 <HAL_DMA_IRQHandler+0xe2c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d02c      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a36      	ldr	r2, [pc, #216]	@ (8006364 <HAL_DMA_IRQHandler+0xe30>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d027      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a35      	ldr	r2, [pc, #212]	@ (8006368 <HAL_DMA_IRQHandler+0xe34>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d022      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a33      	ldr	r2, [pc, #204]	@ (800636c <HAL_DMA_IRQHandler+0xe38>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01d      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a32      	ldr	r2, [pc, #200]	@ (8006370 <HAL_DMA_IRQHandler+0xe3c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d018      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a30      	ldr	r2, [pc, #192]	@ (8006374 <HAL_DMA_IRQHandler+0xe40>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006378 <HAL_DMA_IRQHandler+0xe44>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a2d      	ldr	r2, [pc, #180]	@ (800637c <HAL_DMA_IRQHandler+0xe48>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d009      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006380 <HAL_DMA_IRQHandler+0xe4c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_DMA_IRQHandler+0xdaa>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006384 <HAL_DMA_IRQHandler+0xe50>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d108      	bne.n	80062f0 <HAL_DMA_IRQHandler+0xdbc>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 021c 	bic.w	r2, r2, #28
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	e007      	b.n	8006300 <HAL_DMA_IRQHandler+0xdcc>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 020e 	bic.w	r2, r2, #14
 80062fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	2201      	movs	r2, #1
 800630a:	409a      	lsls	r2, r3
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
 8006336:	e004      	b.n	8006342 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006338:	bf00      	nop
 800633a:	e002      	b.n	8006342 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006340:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006342:	3728      	adds	r7, #40	@ 0x28
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40020010 	.word	0x40020010
 800634c:	40020028 	.word	0x40020028
 8006350:	40020040 	.word	0x40020040
 8006354:	40020058 	.word	0x40020058
 8006358:	40020070 	.word	0x40020070
 800635c:	40020088 	.word	0x40020088
 8006360:	400200a0 	.word	0x400200a0
 8006364:	400200b8 	.word	0x400200b8
 8006368:	40020410 	.word	0x40020410
 800636c:	40020428 	.word	0x40020428
 8006370:	40020440 	.word	0x40020440
 8006374:	40020458 	.word	0x40020458
 8006378:	40020470 	.word	0x40020470
 800637c:	40020488 	.word	0x40020488
 8006380:	400204a0 	.word	0x400204a0
 8006384:	400204b8 	.word	0x400204b8

08006388 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a7f      	ldr	r2, [pc, #508]	@ (80065bc <DMA_SetConfig+0x21c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d072      	beq.n	80064aa <DMA_SetConfig+0x10a>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a7d      	ldr	r2, [pc, #500]	@ (80065c0 <DMA_SetConfig+0x220>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d06d      	beq.n	80064aa <DMA_SetConfig+0x10a>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a7c      	ldr	r2, [pc, #496]	@ (80065c4 <DMA_SetConfig+0x224>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d068      	beq.n	80064aa <DMA_SetConfig+0x10a>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a7a      	ldr	r2, [pc, #488]	@ (80065c8 <DMA_SetConfig+0x228>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d063      	beq.n	80064aa <DMA_SetConfig+0x10a>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a79      	ldr	r2, [pc, #484]	@ (80065cc <DMA_SetConfig+0x22c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d05e      	beq.n	80064aa <DMA_SetConfig+0x10a>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a77      	ldr	r2, [pc, #476]	@ (80065d0 <DMA_SetConfig+0x230>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d059      	beq.n	80064aa <DMA_SetConfig+0x10a>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a76      	ldr	r2, [pc, #472]	@ (80065d4 <DMA_SetConfig+0x234>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d054      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a74      	ldr	r2, [pc, #464]	@ (80065d8 <DMA_SetConfig+0x238>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d04f      	beq.n	80064aa <DMA_SetConfig+0x10a>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a73      	ldr	r2, [pc, #460]	@ (80065dc <DMA_SetConfig+0x23c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d04a      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a71      	ldr	r2, [pc, #452]	@ (80065e0 <DMA_SetConfig+0x240>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d045      	beq.n	80064aa <DMA_SetConfig+0x10a>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a70      	ldr	r2, [pc, #448]	@ (80065e4 <DMA_SetConfig+0x244>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d040      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a6e      	ldr	r2, [pc, #440]	@ (80065e8 <DMA_SetConfig+0x248>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d03b      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a6d      	ldr	r2, [pc, #436]	@ (80065ec <DMA_SetConfig+0x24c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d036      	beq.n	80064aa <DMA_SetConfig+0x10a>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a6b      	ldr	r2, [pc, #428]	@ (80065f0 <DMA_SetConfig+0x250>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d031      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a6a      	ldr	r2, [pc, #424]	@ (80065f4 <DMA_SetConfig+0x254>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d02c      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a68      	ldr	r2, [pc, #416]	@ (80065f8 <DMA_SetConfig+0x258>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d027      	beq.n	80064aa <DMA_SetConfig+0x10a>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a67      	ldr	r2, [pc, #412]	@ (80065fc <DMA_SetConfig+0x25c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a65      	ldr	r2, [pc, #404]	@ (8006600 <DMA_SetConfig+0x260>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <DMA_SetConfig+0x10a>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a64      	ldr	r2, [pc, #400]	@ (8006604 <DMA_SetConfig+0x264>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a62      	ldr	r2, [pc, #392]	@ (8006608 <DMA_SetConfig+0x268>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a61      	ldr	r2, [pc, #388]	@ (800660c <DMA_SetConfig+0x26c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <DMA_SetConfig+0x10a>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a5f      	ldr	r2, [pc, #380]	@ (8006610 <DMA_SetConfig+0x270>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <DMA_SetConfig+0x10a>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a5e      	ldr	r2, [pc, #376]	@ (8006614 <DMA_SetConfig+0x274>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <DMA_SetConfig+0x10a>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a5c      	ldr	r2, [pc, #368]	@ (8006618 <DMA_SetConfig+0x278>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d101      	bne.n	80064ae <DMA_SetConfig+0x10e>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <DMA_SetConfig+0x110>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00d      	beq.n	80064d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80064bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80064ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a39      	ldr	r2, [pc, #228]	@ (80065bc <DMA_SetConfig+0x21c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d04a      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a38      	ldr	r2, [pc, #224]	@ (80065c0 <DMA_SetConfig+0x220>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d045      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a36      	ldr	r2, [pc, #216]	@ (80065c4 <DMA_SetConfig+0x224>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d040      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a35      	ldr	r2, [pc, #212]	@ (80065c8 <DMA_SetConfig+0x228>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03b      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a33      	ldr	r2, [pc, #204]	@ (80065cc <DMA_SetConfig+0x22c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d036      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a32      	ldr	r2, [pc, #200]	@ (80065d0 <DMA_SetConfig+0x230>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d031      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a30      	ldr	r2, [pc, #192]	@ (80065d4 <DMA_SetConfig+0x234>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d02c      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a2f      	ldr	r2, [pc, #188]	@ (80065d8 <DMA_SetConfig+0x238>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d027      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a2d      	ldr	r2, [pc, #180]	@ (80065dc <DMA_SetConfig+0x23c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a2c      	ldr	r2, [pc, #176]	@ (80065e0 <DMA_SetConfig+0x240>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01d      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2a      	ldr	r2, [pc, #168]	@ (80065e4 <DMA_SetConfig+0x244>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a29      	ldr	r2, [pc, #164]	@ (80065e8 <DMA_SetConfig+0x248>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a27      	ldr	r2, [pc, #156]	@ (80065ec <DMA_SetConfig+0x24c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a26      	ldr	r2, [pc, #152]	@ (80065f0 <DMA_SetConfig+0x250>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a24      	ldr	r2, [pc, #144]	@ (80065f4 <DMA_SetConfig+0x254>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <DMA_SetConfig+0x1d0>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a23      	ldr	r2, [pc, #140]	@ (80065f8 <DMA_SetConfig+0x258>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d101      	bne.n	8006574 <DMA_SetConfig+0x1d4>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <DMA_SetConfig+0x1d6>
 8006574:	2300      	movs	r3, #0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d059      	beq.n	800662e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	223f      	movs	r2, #63	@ 0x3f
 8006584:	409a      	lsls	r2, r3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006598:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b40      	cmp	r3, #64	@ 0x40
 80065a8:	d138      	bne.n	800661c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065ba:	e086      	b.n	80066ca <DMA_SetConfig+0x32a>
 80065bc:	40020010 	.word	0x40020010
 80065c0:	40020028 	.word	0x40020028
 80065c4:	40020040 	.word	0x40020040
 80065c8:	40020058 	.word	0x40020058
 80065cc:	40020070 	.word	0x40020070
 80065d0:	40020088 	.word	0x40020088
 80065d4:	400200a0 	.word	0x400200a0
 80065d8:	400200b8 	.word	0x400200b8
 80065dc:	40020410 	.word	0x40020410
 80065e0:	40020428 	.word	0x40020428
 80065e4:	40020440 	.word	0x40020440
 80065e8:	40020458 	.word	0x40020458
 80065ec:	40020470 	.word	0x40020470
 80065f0:	40020488 	.word	0x40020488
 80065f4:	400204a0 	.word	0x400204a0
 80065f8:	400204b8 	.word	0x400204b8
 80065fc:	58025408 	.word	0x58025408
 8006600:	5802541c 	.word	0x5802541c
 8006604:	58025430 	.word	0x58025430
 8006608:	58025444 	.word	0x58025444
 800660c:	58025458 	.word	0x58025458
 8006610:	5802546c 	.word	0x5802546c
 8006614:	58025480 	.word	0x58025480
 8006618:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]
}
 800662c:	e04d      	b.n	80066ca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a29      	ldr	r2, [pc, #164]	@ (80066d8 <DMA_SetConfig+0x338>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d022      	beq.n	800667e <DMA_SetConfig+0x2de>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a27      	ldr	r2, [pc, #156]	@ (80066dc <DMA_SetConfig+0x33c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01d      	beq.n	800667e <DMA_SetConfig+0x2de>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a26      	ldr	r2, [pc, #152]	@ (80066e0 <DMA_SetConfig+0x340>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d018      	beq.n	800667e <DMA_SetConfig+0x2de>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a24      	ldr	r2, [pc, #144]	@ (80066e4 <DMA_SetConfig+0x344>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <DMA_SetConfig+0x2de>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a23      	ldr	r2, [pc, #140]	@ (80066e8 <DMA_SetConfig+0x348>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00e      	beq.n	800667e <DMA_SetConfig+0x2de>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a21      	ldr	r2, [pc, #132]	@ (80066ec <DMA_SetConfig+0x34c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <DMA_SetConfig+0x2de>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a20      	ldr	r2, [pc, #128]	@ (80066f0 <DMA_SetConfig+0x350>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <DMA_SetConfig+0x2de>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1e      	ldr	r2, [pc, #120]	@ (80066f4 <DMA_SetConfig+0x354>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <DMA_SetConfig+0x2e2>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <DMA_SetConfig+0x2e4>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	2201      	movs	r2, #1
 8006692:	409a      	lsls	r2, r3
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b40      	cmp	r3, #64	@ 0x40
 80066a6:	d108      	bne.n	80066ba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	60da      	str	r2, [r3, #12]
}
 80066b8:	e007      	b.n	80066ca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	60da      	str	r2, [r3, #12]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	58025408 	.word	0x58025408
 80066dc:	5802541c 	.word	0x5802541c
 80066e0:	58025430 	.word	0x58025430
 80066e4:	58025444 	.word	0x58025444
 80066e8:	58025458 	.word	0x58025458
 80066ec:	5802546c 	.word	0x5802546c
 80066f0:	58025480 	.word	0x58025480
 80066f4:	58025494 	.word	0x58025494

080066f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a42      	ldr	r2, [pc, #264]	@ (8006810 <DMA_CalcBaseAndBitshift+0x118>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d04a      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a41      	ldr	r2, [pc, #260]	@ (8006814 <DMA_CalcBaseAndBitshift+0x11c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d045      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a3f      	ldr	r2, [pc, #252]	@ (8006818 <DMA_CalcBaseAndBitshift+0x120>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d040      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a3e      	ldr	r2, [pc, #248]	@ (800681c <DMA_CalcBaseAndBitshift+0x124>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d03b      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a3c      	ldr	r2, [pc, #240]	@ (8006820 <DMA_CalcBaseAndBitshift+0x128>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d036      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a3b      	ldr	r2, [pc, #236]	@ (8006824 <DMA_CalcBaseAndBitshift+0x12c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d031      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a39      	ldr	r2, [pc, #228]	@ (8006828 <DMA_CalcBaseAndBitshift+0x130>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d02c      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a38      	ldr	r2, [pc, #224]	@ (800682c <DMA_CalcBaseAndBitshift+0x134>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d027      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a36      	ldr	r2, [pc, #216]	@ (8006830 <DMA_CalcBaseAndBitshift+0x138>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d022      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a35      	ldr	r2, [pc, #212]	@ (8006834 <DMA_CalcBaseAndBitshift+0x13c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d01d      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a33      	ldr	r2, [pc, #204]	@ (8006838 <DMA_CalcBaseAndBitshift+0x140>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d018      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a32      	ldr	r2, [pc, #200]	@ (800683c <DMA_CalcBaseAndBitshift+0x144>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a30      	ldr	r2, [pc, #192]	@ (8006840 <DMA_CalcBaseAndBitshift+0x148>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00e      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a2f      	ldr	r2, [pc, #188]	@ (8006844 <DMA_CalcBaseAndBitshift+0x14c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d009      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a2d      	ldr	r2, [pc, #180]	@ (8006848 <DMA_CalcBaseAndBitshift+0x150>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d004      	beq.n	80067a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a2c      	ldr	r2, [pc, #176]	@ (800684c <DMA_CalcBaseAndBitshift+0x154>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d101      	bne.n	80067a4 <DMA_CalcBaseAndBitshift+0xac>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <DMA_CalcBaseAndBitshift+0xae>
 80067a4:	2300      	movs	r3, #0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d024      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	3b10      	subs	r3, #16
 80067b2:	4a27      	ldr	r2, [pc, #156]	@ (8006850 <DMA_CalcBaseAndBitshift+0x158>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	091b      	lsrs	r3, r3, #4
 80067ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	4a24      	ldr	r2, [pc, #144]	@ (8006854 <DMA_CalcBaseAndBitshift+0x15c>)
 80067c4:	5cd3      	ldrb	r3, [r2, r3]
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d908      	bls.n	80067e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006858 <DMA_CalcBaseAndBitshift+0x160>)
 80067da:	4013      	ands	r3, r2
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80067e2:	e00d      	b.n	8006800 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006858 <DMA_CalcBaseAndBitshift+0x160>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f2:	e005      	b.n	8006800 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40020010 	.word	0x40020010
 8006814:	40020028 	.word	0x40020028
 8006818:	40020040 	.word	0x40020040
 800681c:	40020058 	.word	0x40020058
 8006820:	40020070 	.word	0x40020070
 8006824:	40020088 	.word	0x40020088
 8006828:	400200a0 	.word	0x400200a0
 800682c:	400200b8 	.word	0x400200b8
 8006830:	40020410 	.word	0x40020410
 8006834:	40020428 	.word	0x40020428
 8006838:	40020440 	.word	0x40020440
 800683c:	40020458 	.word	0x40020458
 8006840:	40020470 	.word	0x40020470
 8006844:	40020488 	.word	0x40020488
 8006848:	400204a0 	.word	0x400204a0
 800684c:	400204b8 	.word	0x400204b8
 8006850:	aaaaaaab 	.word	0xaaaaaaab
 8006854:	0800fe3c 	.word	0x0800fe3c
 8006858:	fffffc00 	.word	0xfffffc00

0800685c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d120      	bne.n	80068b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006874:	2b03      	cmp	r3, #3
 8006876:	d858      	bhi.n	800692a <DMA_CheckFifoParam+0xce>
 8006878:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <DMA_CheckFifoParam+0x24>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	08006891 	.word	0x08006891
 8006884:	080068a3 	.word	0x080068a3
 8006888:	08006891 	.word	0x08006891
 800688c:	0800692b 	.word	0x0800692b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d048      	beq.n	800692e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068a0:	e045      	b.n	800692e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80068aa:	d142      	bne.n	8006932 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068b0:	e03f      	b.n	8006932 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068ba:	d123      	bne.n	8006904 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d838      	bhi.n	8006936 <DMA_CheckFifoParam+0xda>
 80068c4:	a201      	add	r2, pc, #4	@ (adr r2, 80068cc <DMA_CheckFifoParam+0x70>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	080068dd 	.word	0x080068dd
 80068d0:	080068e3 	.word	0x080068e3
 80068d4:	080068dd 	.word	0x080068dd
 80068d8:	080068f5 	.word	0x080068f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
        break;
 80068e0:	e030      	b.n	8006944 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d025      	beq.n	800693a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068f2:	e022      	b.n	800693a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80068fc:	d11f      	bne.n	800693e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006902:	e01c      	b.n	800693e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	2b02      	cmp	r3, #2
 800690a:	d902      	bls.n	8006912 <DMA_CheckFifoParam+0xb6>
 800690c:	2b03      	cmp	r3, #3
 800690e:	d003      	beq.n	8006918 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006910:	e018      	b.n	8006944 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
        break;
 8006916:	e015      	b.n	8006944 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00e      	beq.n	8006942 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
    break;
 8006928:	e00b      	b.n	8006942 <DMA_CheckFifoParam+0xe6>
        break;
 800692a:	bf00      	nop
 800692c:	e00a      	b.n	8006944 <DMA_CheckFifoParam+0xe8>
        break;
 800692e:	bf00      	nop
 8006930:	e008      	b.n	8006944 <DMA_CheckFifoParam+0xe8>
        break;
 8006932:	bf00      	nop
 8006934:	e006      	b.n	8006944 <DMA_CheckFifoParam+0xe8>
        break;
 8006936:	bf00      	nop
 8006938:	e004      	b.n	8006944 <DMA_CheckFifoParam+0xe8>
        break;
 800693a:	bf00      	nop
 800693c:	e002      	b.n	8006944 <DMA_CheckFifoParam+0xe8>
        break;
 800693e:	bf00      	nop
 8006940:	e000      	b.n	8006944 <DMA_CheckFifoParam+0xe8>
    break;
 8006942:	bf00      	nop
    }
  }

  return status;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop

08006954 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a38      	ldr	r2, [pc, #224]	@ (8006a48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d022      	beq.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a36      	ldr	r2, [pc, #216]	@ (8006a4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01d      	beq.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a35      	ldr	r2, [pc, #212]	@ (8006a50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d018      	beq.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a33      	ldr	r2, [pc, #204]	@ (8006a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a32      	ldr	r2, [pc, #200]	@ (8006a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a30      	ldr	r2, [pc, #192]	@ (8006a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80069b6:	2300      	movs	r3, #0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01a      	beq.n	80069f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	3b08      	subs	r3, #8
 80069c4:	4a28      	ldr	r2, [pc, #160]	@ (8006a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	091b      	lsrs	r3, r3, #4
 80069cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4b26      	ldr	r3, [pc, #152]	@ (8006a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a24      	ldr	r2, [pc, #144]	@ (8006a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80069e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	2201      	movs	r2, #1
 80069ea:	409a      	lsls	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80069f0:	e024      	b.n	8006a3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	3b10      	subs	r3, #16
 80069fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80069fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006a00:	091b      	lsrs	r3, r3, #4
 8006a02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4a1c      	ldr	r2, [pc, #112]	@ (8006a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d806      	bhi.n	8006a1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d902      	bls.n	8006a1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3308      	adds	r3, #8
 8006a18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4b18      	ldr	r3, [pc, #96]	@ (8006a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	461a      	mov	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a16      	ldr	r2, [pc, #88]	@ (8006a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006a2c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	2201      	movs	r2, #1
 8006a36:	409a      	lsls	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	58025408 	.word	0x58025408
 8006a4c:	5802541c 	.word	0x5802541c
 8006a50:	58025430 	.word	0x58025430
 8006a54:	58025444 	.word	0x58025444
 8006a58:	58025458 	.word	0x58025458
 8006a5c:	5802546c 	.word	0x5802546c
 8006a60:	58025480 	.word	0x58025480
 8006a64:	58025494 	.word	0x58025494
 8006a68:	cccccccd 	.word	0xcccccccd
 8006a6c:	16009600 	.word	0x16009600
 8006a70:	58025880 	.word	0x58025880
 8006a74:	aaaaaaab 	.word	0xaaaaaaab
 8006a78:	400204b8 	.word	0x400204b8
 8006a7c:	4002040f 	.word	0x4002040f
 8006a80:	10008200 	.word	0x10008200
 8006a84:	40020880 	.word	0x40020880

08006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d04a      	beq.n	8006b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d847      	bhi.n	8006b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a25      	ldr	r2, [pc, #148]	@ (8006b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d022      	beq.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a24      	ldr	r2, [pc, #144]	@ (8006b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d01d      	beq.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a22      	ldr	r2, [pc, #136]	@ (8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d018      	beq.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a21      	ldr	r2, [pc, #132]	@ (8006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8006b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00e      	beq.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1e      	ldr	r2, [pc, #120]	@ (8006b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d009      	beq.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d004      	beq.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1b      	ldr	r2, [pc, #108]	@ (8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d101      	bne.n	8006af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4b17      	ldr	r3, [pc, #92]	@ (8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	461a      	mov	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a15      	ldr	r2, [pc, #84]	@ (8006b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b10:	671a      	str	r2, [r3, #112]	@ 0x70
 8006b12:	e009      	b.n	8006b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a11      	ldr	r2, [pc, #68]	@ (8006b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006b26:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	409a      	lsls	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	58025408 	.word	0x58025408
 8006b44:	5802541c 	.word	0x5802541c
 8006b48:	58025430 	.word	0x58025430
 8006b4c:	58025444 	.word	0x58025444
 8006b50:	58025458 	.word	0x58025458
 8006b54:	5802546c 	.word	0x5802546c
 8006b58:	58025480 	.word	0x58025480
 8006b5c:	58025494 	.word	0x58025494
 8006b60:	1600963f 	.word	0x1600963f
 8006b64:	58025940 	.word	0x58025940
 8006b68:	1000823f 	.word	0x1000823f
 8006b6c:	40020940 	.word	0x40020940

08006b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b089      	sub	sp, #36	@ 0x24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b7e:	4b86      	ldr	r3, [pc, #536]	@ (8006d98 <HAL_GPIO_Init+0x228>)
 8006b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b82:	e18c      	b.n	8006e9e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	2101      	movs	r1, #1
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b90:	4013      	ands	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 817e 	beq.w	8006e98 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f003 0303 	and.w	r3, r3, #3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d005      	beq.n	8006bb4 <HAL_GPIO_Init+0x44>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d130      	bne.n	8006c16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	2203      	movs	r2, #3
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bea:	2201      	movs	r2, #1
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	091b      	lsrs	r3, r3, #4
 8006c00:	f003 0201 	and.w	r2, r3, #1
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d017      	beq.n	8006c52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	43db      	mvns	r3, r3
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	4013      	ands	r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d123      	bne.n	8006ca6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	08da      	lsrs	r2, r3, #3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3208      	adds	r2, #8
 8006c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	220f      	movs	r2, #15
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	43db      	mvns	r3, r3
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	08da      	lsrs	r2, r3, #3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3208      	adds	r2, #8
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb6:	43db      	mvns	r3, r3
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f003 0203 	and.w	r2, r3, #3
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	fa02 f303 	lsl.w	r3, r2, r3
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80d8 	beq.w	8006e98 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8006d9c <HAL_GPIO_Init+0x22c>)
 8006cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cee:	4a2b      	ldr	r2, [pc, #172]	@ (8006d9c <HAL_GPIO_Init+0x22c>)
 8006cf0:	f043 0302 	orr.w	r3, r3, #2
 8006cf4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006cf8:	4b28      	ldr	r3, [pc, #160]	@ (8006d9c <HAL_GPIO_Init+0x22c>)
 8006cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d06:	4a26      	ldr	r2, [pc, #152]	@ (8006da0 <HAL_GPIO_Init+0x230>)
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	220f      	movs	r2, #15
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	43db      	mvns	r3, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	4013      	ands	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006da4 <HAL_GPIO_Init+0x234>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d04a      	beq.n	8006dc8 <HAL_GPIO_Init+0x258>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a1c      	ldr	r2, [pc, #112]	@ (8006da8 <HAL_GPIO_Init+0x238>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d02b      	beq.n	8006d92 <HAL_GPIO_Init+0x222>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dac <HAL_GPIO_Init+0x23c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d025      	beq.n	8006d8e <HAL_GPIO_Init+0x21e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a1a      	ldr	r2, [pc, #104]	@ (8006db0 <HAL_GPIO_Init+0x240>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01f      	beq.n	8006d8a <HAL_GPIO_Init+0x21a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a19      	ldr	r2, [pc, #100]	@ (8006db4 <HAL_GPIO_Init+0x244>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d019      	beq.n	8006d86 <HAL_GPIO_Init+0x216>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a18      	ldr	r2, [pc, #96]	@ (8006db8 <HAL_GPIO_Init+0x248>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d013      	beq.n	8006d82 <HAL_GPIO_Init+0x212>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a17      	ldr	r2, [pc, #92]	@ (8006dbc <HAL_GPIO_Init+0x24c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00d      	beq.n	8006d7e <HAL_GPIO_Init+0x20e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a16      	ldr	r2, [pc, #88]	@ (8006dc0 <HAL_GPIO_Init+0x250>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d007      	beq.n	8006d7a <HAL_GPIO_Init+0x20a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a15      	ldr	r2, [pc, #84]	@ (8006dc4 <HAL_GPIO_Init+0x254>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d101      	bne.n	8006d76 <HAL_GPIO_Init+0x206>
 8006d72:	2309      	movs	r3, #9
 8006d74:	e029      	b.n	8006dca <HAL_GPIO_Init+0x25a>
 8006d76:	230a      	movs	r3, #10
 8006d78:	e027      	b.n	8006dca <HAL_GPIO_Init+0x25a>
 8006d7a:	2307      	movs	r3, #7
 8006d7c:	e025      	b.n	8006dca <HAL_GPIO_Init+0x25a>
 8006d7e:	2306      	movs	r3, #6
 8006d80:	e023      	b.n	8006dca <HAL_GPIO_Init+0x25a>
 8006d82:	2305      	movs	r3, #5
 8006d84:	e021      	b.n	8006dca <HAL_GPIO_Init+0x25a>
 8006d86:	2304      	movs	r3, #4
 8006d88:	e01f      	b.n	8006dca <HAL_GPIO_Init+0x25a>
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e01d      	b.n	8006dca <HAL_GPIO_Init+0x25a>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e01b      	b.n	8006dca <HAL_GPIO_Init+0x25a>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e019      	b.n	8006dca <HAL_GPIO_Init+0x25a>
 8006d96:	bf00      	nop
 8006d98:	58000080 	.word	0x58000080
 8006d9c:	58024400 	.word	0x58024400
 8006da0:	58000400 	.word	0x58000400
 8006da4:	58020000 	.word	0x58020000
 8006da8:	58020400 	.word	0x58020400
 8006dac:	58020800 	.word	0x58020800
 8006db0:	58020c00 	.word	0x58020c00
 8006db4:	58021000 	.word	0x58021000
 8006db8:	58021400 	.word	0x58021400
 8006dbc:	58021800 	.word	0x58021800
 8006dc0:	58021c00 	.word	0x58021c00
 8006dc4:	58022400 	.word	0x58022400
 8006dc8:	2300      	movs	r3, #0
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	f002 0203 	and.w	r2, r2, #3
 8006dd0:	0092      	lsls	r2, r2, #2
 8006dd2:	4093      	lsls	r3, r2
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dda:	4938      	ldr	r1, [pc, #224]	@ (8006ebc <HAL_GPIO_Init+0x34c>)
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	089b      	lsrs	r3, r3, #2
 8006de0:	3302      	adds	r3, #2
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	43db      	mvns	r3, r3
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	4013      	ands	r3, r2
 8006df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	43db      	mvns	r3, r3
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	4013      	ands	r3, r2
 8006e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	4013      	ands	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	43db      	mvns	r3, r3
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f47f ae6b 	bne.w	8006b84 <HAL_GPIO_Init+0x14>
  }
}
 8006eae:	bf00      	nop
 8006eb0:	bf00      	nop
 8006eb2:	3724      	adds	r7, #36	@ 0x24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	58000400 	.word	0x58000400

08006ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	807b      	strh	r3, [r7, #2]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ed0:	787b      	ldrb	r3, [r7, #1]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ed6:	887a      	ldrh	r2, [r7, #2]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006edc:	e003      	b.n	8006ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ede:	887b      	ldrh	r3, [r7, #2]
 8006ee0:	041a      	lsls	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	619a      	str	r2, [r3, #24]
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006efc:	4b19      	ldr	r3, [pc, #100]	@ (8006f64 <HAL_PWREx_ConfigSupply+0x70>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d00a      	beq.n	8006f1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f08:	4b16      	ldr	r3, [pc, #88]	@ (8006f64 <HAL_PWREx_ConfigSupply+0x70>)
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d001      	beq.n	8006f1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e01f      	b.n	8006f5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e01d      	b.n	8006f5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f1e:	4b11      	ldr	r3, [pc, #68]	@ (8006f64 <HAL_PWREx_ConfigSupply+0x70>)
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f023 0207 	bic.w	r2, r3, #7
 8006f26:	490f      	ldr	r1, [pc, #60]	@ (8006f64 <HAL_PWREx_ConfigSupply+0x70>)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f2e:	f7fc fe23 	bl	8003b78 <HAL_GetTick>
 8006f32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f34:	e009      	b.n	8006f4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f36:	f7fc fe1f 	bl	8003b78 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f44:	d901      	bls.n	8006f4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e007      	b.n	8006f5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f4a:	4b06      	ldr	r3, [pc, #24]	@ (8006f64 <HAL_PWREx_ConfigSupply+0x70>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f56:	d1ee      	bne.n	8006f36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	58024800 	.word	0x58024800

08006f68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08c      	sub	sp, #48	@ 0x30
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e3c8      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 8087 	beq.w	8007096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f88:	4b88      	ldr	r3, [pc, #544]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f92:	4b86      	ldr	r3, [pc, #536]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8006f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d007      	beq.n	8006fae <HAL_RCC_OscConfig+0x46>
 8006f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa0:	2b18      	cmp	r3, #24
 8006fa2:	d110      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x5e>
 8006fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d10b      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fae:	4b7f      	ldr	r3, [pc, #508]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d06c      	beq.n	8007094 <HAL_RCC_OscConfig+0x12c>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d168      	bne.n	8007094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e3a2      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fce:	d106      	bne.n	8006fde <HAL_RCC_OscConfig+0x76>
 8006fd0:	4b76      	ldr	r3, [pc, #472]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a75      	ldr	r2, [pc, #468]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8006fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	e02e      	b.n	800703c <HAL_RCC_OscConfig+0xd4>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10c      	bne.n	8007000 <HAL_RCC_OscConfig+0x98>
 8006fe6:	4b71      	ldr	r3, [pc, #452]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a70      	ldr	r2, [pc, #448]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8006fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4b6e      	ldr	r3, [pc, #440]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a6d      	ldr	r2, [pc, #436]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8006ff8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e01d      	b.n	800703c <HAL_RCC_OscConfig+0xd4>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007008:	d10c      	bne.n	8007024 <HAL_RCC_OscConfig+0xbc>
 800700a:	4b68      	ldr	r3, [pc, #416]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a67      	ldr	r2, [pc, #412]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	4b65      	ldr	r3, [pc, #404]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a64      	ldr	r2, [pc, #400]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 800701c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e00b      	b.n	800703c <HAL_RCC_OscConfig+0xd4>
 8007024:	4b61      	ldr	r3, [pc, #388]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a60      	ldr	r2, [pc, #384]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 800702a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	4b5e      	ldr	r3, [pc, #376]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a5d      	ldr	r2, [pc, #372]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800703a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d013      	beq.n	800706c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007044:	f7fc fd98 	bl	8003b78 <HAL_GetTick>
 8007048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800704c:	f7fc fd94 	bl	8003b78 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b64      	cmp	r3, #100	@ 0x64
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e356      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800705e:	4b53      	ldr	r3, [pc, #332]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCC_OscConfig+0xe4>
 800706a:	e014      	b.n	8007096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fc fd84 	bl	8003b78 <HAL_GetTick>
 8007070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007074:	f7fc fd80 	bl	8003b78 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b64      	cmp	r3, #100	@ 0x64
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e342      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007086:	4b49      	ldr	r3, [pc, #292]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f0      	bne.n	8007074 <HAL_RCC_OscConfig+0x10c>
 8007092:	e000      	b.n	8007096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 808c 	beq.w	80071bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070a4:	4b41      	ldr	r3, [pc, #260]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070ae:	4b3f      	ldr	r3, [pc, #252]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 80070b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <HAL_RCC_OscConfig+0x162>
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	2b18      	cmp	r3, #24
 80070be:	d137      	bne.n	8007130 <HAL_RCC_OscConfig+0x1c8>
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d132      	bne.n	8007130 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ca:	4b38      	ldr	r3, [pc, #224]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <HAL_RCC_OscConfig+0x17a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e314      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070e2:	4b32      	ldr	r3, [pc, #200]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f023 0219 	bic.w	r2, r3, #25
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	492f      	ldr	r1, [pc, #188]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f4:	f7fc fd40 	bl	8003b78 <HAL_GetTick>
 80070f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070fc:	f7fc fd3c 	bl	8003b78 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e2fe      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800710e:	4b27      	ldr	r3, [pc, #156]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0f0      	beq.n	80070fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800711a:	4b24      	ldr	r3, [pc, #144]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	061b      	lsls	r3, r3, #24
 8007128:	4920      	ldr	r1, [pc, #128]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 800712a:	4313      	orrs	r3, r2
 800712c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800712e:	e045      	b.n	80071bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d026      	beq.n	8007186 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007138:	4b1c      	ldr	r3, [pc, #112]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f023 0219 	bic.w	r2, r3, #25
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	4919      	ldr	r1, [pc, #100]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007146:	4313      	orrs	r3, r2
 8007148:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714a:	f7fc fd15 	bl	8003b78 <HAL_GetTick>
 800714e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007152:	f7fc fd11 	bl	8003b78 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e2d3      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007164:	4b11      	ldr	r3, [pc, #68]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007170:	4b0e      	ldr	r3, [pc, #56]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	061b      	lsls	r3, r3, #24
 800717e:	490b      	ldr	r1, [pc, #44]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007180:	4313      	orrs	r3, r2
 8007182:	604b      	str	r3, [r1, #4]
 8007184:	e01a      	b.n	80071bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007186:	4b09      	ldr	r3, [pc, #36]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a08      	ldr	r2, [pc, #32]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007192:	f7fc fcf1 	bl	8003b78 <HAL_GetTick>
 8007196:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007198:	e00a      	b.n	80071b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800719a:	f7fc fced 	bl	8003b78 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d903      	bls.n	80071b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e2af      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
 80071ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071b0:	4b96      	ldr	r3, [pc, #600]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1ee      	bne.n	800719a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d06a      	beq.n	800729e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071c8:	4b90      	ldr	r3, [pc, #576]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071d2:	4b8e      	ldr	r3, [pc, #568]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80071d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d007      	beq.n	80071ee <HAL_RCC_OscConfig+0x286>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b18      	cmp	r3, #24
 80071e2:	d11b      	bne.n	800721c <HAL_RCC_OscConfig+0x2b4>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d116      	bne.n	800721c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ee:	4b87      	ldr	r3, [pc, #540]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <HAL_RCC_OscConfig+0x29e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	2b80      	cmp	r3, #128	@ 0x80
 8007200:	d001      	beq.n	8007206 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e282      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007206:	4b81      	ldr	r3, [pc, #516]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	061b      	lsls	r3, r3, #24
 8007214:	497d      	ldr	r1, [pc, #500]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007216:	4313      	orrs	r3, r2
 8007218:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800721a:	e040      	b.n	800729e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d023      	beq.n	800726c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007224:	4b79      	ldr	r3, [pc, #484]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a78      	ldr	r2, [pc, #480]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 800722a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800722e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fc fca2 	bl	8003b78 <HAL_GetTick>
 8007234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007238:	f7fc fc9e 	bl	8003b78 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e260      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800724a:	4b70      	ldr	r3, [pc, #448]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f0      	beq.n	8007238 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007256:	4b6d      	ldr	r3, [pc, #436]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	061b      	lsls	r3, r3, #24
 8007264:	4969      	ldr	r1, [pc, #420]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007266:	4313      	orrs	r3, r2
 8007268:	60cb      	str	r3, [r1, #12]
 800726a:	e018      	b.n	800729e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800726c:	4b67      	ldr	r3, [pc, #412]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a66      	ldr	r2, [pc, #408]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fc fc7e 	bl	8003b78 <HAL_GetTick>
 800727c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007280:	f7fc fc7a 	bl	8003b78 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e23c      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007292:	4b5e      	ldr	r3, [pc, #376]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f0      	bne.n	8007280 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0308 	and.w	r3, r3, #8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d036      	beq.n	8007318 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d019      	beq.n	80072e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072b2:	4b56      	ldr	r3, [pc, #344]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80072b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b6:	4a55      	ldr	r2, [pc, #340]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80072b8:	f043 0301 	orr.w	r3, r3, #1
 80072bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072be:	f7fc fc5b 	bl	8003b78 <HAL_GetTick>
 80072c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072c4:	e008      	b.n	80072d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072c6:	f7fc fc57 	bl	8003b78 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e219      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072d8:	4b4c      	ldr	r3, [pc, #304]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80072da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f0      	beq.n	80072c6 <HAL_RCC_OscConfig+0x35e>
 80072e4:	e018      	b.n	8007318 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072e6:	4b49      	ldr	r3, [pc, #292]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80072e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ea:	4a48      	ldr	r2, [pc, #288]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f2:	f7fc fc41 	bl	8003b78 <HAL_GetTick>
 80072f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072f8:	e008      	b.n	800730c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fa:	f7fc fc3d 	bl	8003b78 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d901      	bls.n	800730c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e1ff      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800730c:	4b3f      	ldr	r3, [pc, #252]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 800730e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1f0      	bne.n	80072fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b00      	cmp	r3, #0
 8007322:	d036      	beq.n	8007392 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d019      	beq.n	8007360 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800732c:	4b37      	ldr	r3, [pc, #220]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a36      	ldr	r2, [pc, #216]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007332:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007336:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007338:	f7fc fc1e 	bl	8003b78 <HAL_GetTick>
 800733c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007340:	f7fc fc1a 	bl	8003b78 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e1dc      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007352:	4b2e      	ldr	r3, [pc, #184]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0f0      	beq.n	8007340 <HAL_RCC_OscConfig+0x3d8>
 800735e:	e018      	b.n	8007392 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007360:	4b2a      	ldr	r3, [pc, #168]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a29      	ldr	r2, [pc, #164]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007366:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800736a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800736c:	f7fc fc04 	bl	8003b78 <HAL_GetTick>
 8007370:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007374:	f7fc fc00 	bl	8003b78 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e1c2      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007386:	4b21      	ldr	r3, [pc, #132]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f0      	bne.n	8007374 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8086 	beq.w	80074ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007410 <HAL_RCC_OscConfig+0x4a8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007410 <HAL_RCC_OscConfig+0x4a8>)
 80073a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073ac:	f7fc fbe4 	bl	8003b78 <HAL_GetTick>
 80073b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b4:	f7fc fbe0 	bl	8003b78 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b64      	cmp	r3, #100	@ 0x64
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e1a2      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073c6:	4b12      	ldr	r3, [pc, #72]	@ (8007410 <HAL_RCC_OscConfig+0x4a8>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f0      	beq.n	80073b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d106      	bne.n	80073e8 <HAL_RCC_OscConfig+0x480>
 80073da:	4b0c      	ldr	r3, [pc, #48]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073de:	4a0b      	ldr	r2, [pc, #44]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e6:	e032      	b.n	800744e <HAL_RCC_OscConfig+0x4e6>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d111      	bne.n	8007414 <HAL_RCC_OscConfig+0x4ac>
 80073f0:	4b06      	ldr	r3, [pc, #24]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f4:	4a05      	ldr	r2, [pc, #20]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80073f6:	f023 0301 	bic.w	r3, r3, #1
 80073fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80073fc:	4b03      	ldr	r3, [pc, #12]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 80073fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007400:	4a02      	ldr	r2, [pc, #8]	@ (800740c <HAL_RCC_OscConfig+0x4a4>)
 8007402:	f023 0304 	bic.w	r3, r3, #4
 8007406:	6713      	str	r3, [r2, #112]	@ 0x70
 8007408:	e021      	b.n	800744e <HAL_RCC_OscConfig+0x4e6>
 800740a:	bf00      	nop
 800740c:	58024400 	.word	0x58024400
 8007410:	58024800 	.word	0x58024800
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b05      	cmp	r3, #5
 800741a:	d10c      	bne.n	8007436 <HAL_RCC_OscConfig+0x4ce>
 800741c:	4b83      	ldr	r3, [pc, #524]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 800741e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007420:	4a82      	ldr	r2, [pc, #520]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007422:	f043 0304 	orr.w	r3, r3, #4
 8007426:	6713      	str	r3, [r2, #112]	@ 0x70
 8007428:	4b80      	ldr	r3, [pc, #512]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 800742a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742c:	4a7f      	ldr	r2, [pc, #508]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 800742e:	f043 0301 	orr.w	r3, r3, #1
 8007432:	6713      	str	r3, [r2, #112]	@ 0x70
 8007434:	e00b      	b.n	800744e <HAL_RCC_OscConfig+0x4e6>
 8007436:	4b7d      	ldr	r3, [pc, #500]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743a:	4a7c      	ldr	r2, [pc, #496]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	6713      	str	r3, [r2, #112]	@ 0x70
 8007442:	4b7a      	ldr	r3, [pc, #488]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007446:	4a79      	ldr	r2, [pc, #484]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007448:	f023 0304 	bic.w	r3, r3, #4
 800744c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d015      	beq.n	8007482 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007456:	f7fc fb8f 	bl	8003b78 <HAL_GetTick>
 800745a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800745c:	e00a      	b.n	8007474 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745e:	f7fc fb8b 	bl	8003b78 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746c:	4293      	cmp	r3, r2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e14b      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007474:	4b6d      	ldr	r3, [pc, #436]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0ee      	beq.n	800745e <HAL_RCC_OscConfig+0x4f6>
 8007480:	e014      	b.n	80074ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007482:	f7fc fb79 	bl	8003b78 <HAL_GetTick>
 8007486:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007488:	e00a      	b.n	80074a0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748a:	f7fc fb75 	bl	8003b78 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007498:	4293      	cmp	r3, r2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e135      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074a0:	4b62      	ldr	r3, [pc, #392]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80074a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1ee      	bne.n	800748a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 812a 	beq.w	800770a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074b6:	4b5d      	ldr	r3, [pc, #372]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074be:	2b18      	cmp	r3, #24
 80074c0:	f000 80ba 	beq.w	8007638 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	f040 8095 	bne.w	80075f8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ce:	4b57      	ldr	r3, [pc, #348]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a56      	ldr	r2, [pc, #344]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80074d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074da:	f7fc fb4d 	bl	8003b78 <HAL_GetTick>
 80074de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074e0:	e008      	b.n	80074f4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e2:	f7fc fb49 	bl	8003b78 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d901      	bls.n	80074f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e10b      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074f4:	4b4d      	ldr	r3, [pc, #308]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1f0      	bne.n	80074e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007500:	4b4a      	ldr	r3, [pc, #296]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007502:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007504:	4b4a      	ldr	r3, [pc, #296]	@ (8007630 <HAL_RCC_OscConfig+0x6c8>)
 8007506:	4013      	ands	r3, r2
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007510:	0112      	lsls	r2, r2, #4
 8007512:	430a      	orrs	r2, r1
 8007514:	4945      	ldr	r1, [pc, #276]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007516:	4313      	orrs	r3, r2
 8007518:	628b      	str	r3, [r1, #40]	@ 0x28
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751e:	3b01      	subs	r3, #1
 8007520:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007528:	3b01      	subs	r3, #1
 800752a:	025b      	lsls	r3, r3, #9
 800752c:	b29b      	uxth	r3, r3
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007534:	3b01      	subs	r3, #1
 8007536:	041b      	lsls	r3, r3, #16
 8007538:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007542:	3b01      	subs	r3, #1
 8007544:	061b      	lsls	r3, r3, #24
 8007546:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800754a:	4938      	ldr	r1, [pc, #224]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 800754c:	4313      	orrs	r3, r2
 800754e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007550:	4b36      	ldr	r3, [pc, #216]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	4a35      	ldr	r2, [pc, #212]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800755c:	4b33      	ldr	r3, [pc, #204]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 800755e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007560:	4b34      	ldr	r3, [pc, #208]	@ (8007634 <HAL_RCC_OscConfig+0x6cc>)
 8007562:	4013      	ands	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007568:	00d2      	lsls	r2, r2, #3
 800756a:	4930      	ldr	r1, [pc, #192]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 800756c:	4313      	orrs	r3, r2
 800756e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007570:	4b2e      	ldr	r3, [pc, #184]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	f023 020c 	bic.w	r2, r3, #12
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757c:	492b      	ldr	r1, [pc, #172]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 800757e:	4313      	orrs	r3, r2
 8007580:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007582:	4b2a      	ldr	r3, [pc, #168]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	f023 0202 	bic.w	r2, r3, #2
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800758e:	4927      	ldr	r1, [pc, #156]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007590:	4313      	orrs	r3, r2
 8007592:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007594:	4b25      	ldr	r3, [pc, #148]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007598:	4a24      	ldr	r2, [pc, #144]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 800759a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800759e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a0:	4b22      	ldr	r3, [pc, #136]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	4a21      	ldr	r2, [pc, #132]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075ac:	4b1f      	ldr	r3, [pc, #124]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	4a1e      	ldr	r2, [pc, #120]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80075b8:	4b1c      	ldr	r3, [pc, #112]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	4a1b      	ldr	r2, [pc, #108]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075c4:	4b19      	ldr	r3, [pc, #100]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a18      	ldr	r2, [pc, #96]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d0:	f7fc fad2 	bl	8003b78 <HAL_GetTick>
 80075d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d8:	f7fc face 	bl	8003b78 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e090      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075ea:	4b10      	ldr	r3, [pc, #64]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x670>
 80075f6:	e088      	b.n	800770a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f8:	4b0c      	ldr	r3, [pc, #48]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a0b      	ldr	r2, [pc, #44]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 80075fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007604:	f7fc fab8 	bl	8003b78 <HAL_GetTick>
 8007608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800760a:	e008      	b.n	800761e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760c:	f7fc fab4 	bl	8003b78 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e076      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800761e:	4b03      	ldr	r3, [pc, #12]	@ (800762c <HAL_RCC_OscConfig+0x6c4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1f0      	bne.n	800760c <HAL_RCC_OscConfig+0x6a4>
 800762a:	e06e      	b.n	800770a <HAL_RCC_OscConfig+0x7a2>
 800762c:	58024400 	.word	0x58024400
 8007630:	fffffc0c 	.word	0xfffffc0c
 8007634:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007638:	4b36      	ldr	r3, [pc, #216]	@ (8007714 <HAL_RCC_OscConfig+0x7ac>)
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800763e:	4b35      	ldr	r3, [pc, #212]	@ (8007714 <HAL_RCC_OscConfig+0x7ac>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007642:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007648:	2b01      	cmp	r3, #1
 800764a:	d031      	beq.n	80076b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f003 0203 	and.w	r2, r3, #3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007656:	429a      	cmp	r2, r3
 8007658:	d12a      	bne.n	80076b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	091b      	lsrs	r3, r3, #4
 800765e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007666:	429a      	cmp	r2, r3
 8007668:	d122      	bne.n	80076b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007674:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007676:	429a      	cmp	r2, r3
 8007678:	d11a      	bne.n	80076b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	0a5b      	lsrs	r3, r3, #9
 800767e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007686:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007688:	429a      	cmp	r2, r3
 800768a:	d111      	bne.n	80076b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	0c1b      	lsrs	r3, r3, #16
 8007690:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007698:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800769a:	429a      	cmp	r2, r3
 800769c:	d108      	bne.n	80076b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	0e1b      	lsrs	r3, r3, #24
 80076a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d001      	beq.n	80076b4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e02b      	b.n	800770c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80076b4:	4b17      	ldr	r3, [pc, #92]	@ (8007714 <HAL_RCC_OscConfig+0x7ac>)
 80076b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b8:	08db      	lsrs	r3, r3, #3
 80076ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d01f      	beq.n	800770a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80076ca:	4b12      	ldr	r3, [pc, #72]	@ (8007714 <HAL_RCC_OscConfig+0x7ac>)
 80076cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ce:	4a11      	ldr	r2, [pc, #68]	@ (8007714 <HAL_RCC_OscConfig+0x7ac>)
 80076d0:	f023 0301 	bic.w	r3, r3, #1
 80076d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076d6:	f7fc fa4f 	bl	8003b78 <HAL_GetTick>
 80076da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80076dc:	bf00      	nop
 80076de:	f7fc fa4b 	bl	8003b78 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d0f9      	beq.n	80076de <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007714 <HAL_RCC_OscConfig+0x7ac>)
 80076ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007718 <HAL_RCC_OscConfig+0x7b0>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80076f6:	00d2      	lsls	r2, r2, #3
 80076f8:	4906      	ldr	r1, [pc, #24]	@ (8007714 <HAL_RCC_OscConfig+0x7ac>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80076fe:	4b05      	ldr	r3, [pc, #20]	@ (8007714 <HAL_RCC_OscConfig+0x7ac>)
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	4a04      	ldr	r2, [pc, #16]	@ (8007714 <HAL_RCC_OscConfig+0x7ac>)
 8007704:	f043 0301 	orr.w	r3, r3, #1
 8007708:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3730      	adds	r7, #48	@ 0x30
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	58024400 	.word	0x58024400
 8007718:	ffff0007 	.word	0xffff0007

0800771c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e19c      	b.n	8007a6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007730:	4b8a      	ldr	r3, [pc, #552]	@ (800795c <HAL_RCC_ClockConfig+0x240>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d910      	bls.n	8007760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800773e:	4b87      	ldr	r3, [pc, #540]	@ (800795c <HAL_RCC_ClockConfig+0x240>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f023 020f 	bic.w	r2, r3, #15
 8007746:	4985      	ldr	r1, [pc, #532]	@ (800795c <HAL_RCC_ClockConfig+0x240>)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	4313      	orrs	r3, r2
 800774c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800774e:	4b83      	ldr	r3, [pc, #524]	@ (800795c <HAL_RCC_ClockConfig+0x240>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 030f 	and.w	r3, r3, #15
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d001      	beq.n	8007760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e184      	b.n	8007a6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d010      	beq.n	800778e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	4b7b      	ldr	r3, [pc, #492]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007778:	429a      	cmp	r2, r3
 800777a:	d908      	bls.n	800778e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800777c:	4b78      	ldr	r3, [pc, #480]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	4975      	ldr	r1, [pc, #468]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 800778a:	4313      	orrs	r3, r2
 800778c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d010      	beq.n	80077bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695a      	ldr	r2, [r3, #20]
 800779e:	4b70      	ldr	r3, [pc, #448]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d908      	bls.n	80077bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	496a      	ldr	r1, [pc, #424]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d010      	beq.n	80077ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699a      	ldr	r2, [r3, #24]
 80077cc:	4b64      	ldr	r3, [pc, #400]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d908      	bls.n	80077ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077d8:	4b61      	ldr	r3, [pc, #388]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	495e      	ldr	r1, [pc, #376]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d010      	beq.n	8007818 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	69da      	ldr	r2, [r3, #28]
 80077fa:	4b59      	ldr	r3, [pc, #356]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007802:	429a      	cmp	r2, r3
 8007804:	d908      	bls.n	8007818 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007806:	4b56      	ldr	r3, [pc, #344]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	4953      	ldr	r1, [pc, #332]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007814:	4313      	orrs	r3, r2
 8007816:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d010      	beq.n	8007846 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	4b4d      	ldr	r3, [pc, #308]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f003 030f 	and.w	r3, r3, #15
 8007830:	429a      	cmp	r2, r3
 8007832:	d908      	bls.n	8007846 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007834:	4b4a      	ldr	r3, [pc, #296]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f023 020f 	bic.w	r2, r3, #15
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	4947      	ldr	r1, [pc, #284]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007842:	4313      	orrs	r3, r2
 8007844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d055      	beq.n	80078fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007852:	4b43      	ldr	r3, [pc, #268]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	4940      	ldr	r1, [pc, #256]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007860:	4313      	orrs	r3, r2
 8007862:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	2b02      	cmp	r3, #2
 800786a:	d107      	bne.n	800787c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800786c:	4b3c      	ldr	r3, [pc, #240]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d121      	bne.n	80078bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e0f6      	b.n	8007a6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b03      	cmp	r3, #3
 8007882:	d107      	bne.n	8007894 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007884:	4b36      	ldr	r3, [pc, #216]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d115      	bne.n	80078bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e0ea      	b.n	8007a6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d107      	bne.n	80078ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800789c:	4b30      	ldr	r3, [pc, #192]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0de      	b.n	8007a6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078ac:	4b2c      	ldr	r3, [pc, #176]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0d6      	b.n	8007a6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078bc:	4b28      	ldr	r3, [pc, #160]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f023 0207 	bic.w	r2, r3, #7
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	4925      	ldr	r1, [pc, #148]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ce:	f7fc f953 	bl	8003b78 <HAL_GetTick>
 80078d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d4:	e00a      	b.n	80078ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d6:	f7fc f94f 	bl	8003b78 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e0be      	b.n	8007a6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d1eb      	bne.n	80078d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	4b14      	ldr	r3, [pc, #80]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	429a      	cmp	r2, r3
 8007918:	d208      	bcs.n	800792c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800791a:	4b11      	ldr	r3, [pc, #68]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	f023 020f 	bic.w	r2, r3, #15
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	490e      	ldr	r1, [pc, #56]	@ (8007960 <HAL_RCC_ClockConfig+0x244>)
 8007928:	4313      	orrs	r3, r2
 800792a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800792c:	4b0b      	ldr	r3, [pc, #44]	@ (800795c <HAL_RCC_ClockConfig+0x240>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d214      	bcs.n	8007964 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800793a:	4b08      	ldr	r3, [pc, #32]	@ (800795c <HAL_RCC_ClockConfig+0x240>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f023 020f 	bic.w	r2, r3, #15
 8007942:	4906      	ldr	r1, [pc, #24]	@ (800795c <HAL_RCC_ClockConfig+0x240>)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	4313      	orrs	r3, r2
 8007948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800794a:	4b04      	ldr	r3, [pc, #16]	@ (800795c <HAL_RCC_ClockConfig+0x240>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d005      	beq.n	8007964 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e086      	b.n	8007a6a <HAL_RCC_ClockConfig+0x34e>
 800795c:	52002000 	.word	0x52002000
 8007960:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d010      	beq.n	8007992 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	4b3f      	ldr	r3, [pc, #252]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800797c:	429a      	cmp	r2, r3
 800797e:	d208      	bcs.n	8007992 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007980:	4b3c      	ldr	r3, [pc, #240]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	4939      	ldr	r1, [pc, #228]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 800798e:	4313      	orrs	r3, r2
 8007990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0308 	and.w	r3, r3, #8
 800799a:	2b00      	cmp	r3, #0
 800799c:	d010      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695a      	ldr	r2, [r3, #20]
 80079a2:	4b34      	ldr	r3, [pc, #208]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d208      	bcs.n	80079c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079ae:	4b31      	ldr	r3, [pc, #196]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	492e      	ldr	r1, [pc, #184]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d010      	beq.n	80079ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	699a      	ldr	r2, [r3, #24]
 80079d0:	4b28      	ldr	r3, [pc, #160]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079d8:	429a      	cmp	r2, r3
 80079da:	d208      	bcs.n	80079ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079dc:	4b25      	ldr	r3, [pc, #148]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	4922      	ldr	r1, [pc, #136]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d010      	beq.n	8007a1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69da      	ldr	r2, [r3, #28]
 80079fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d208      	bcs.n	8007a1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	4917      	ldr	r1, [pc, #92]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a1c:	f000 f834 	bl	8007a88 <HAL_RCC_GetSysClockFreq>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4b14      	ldr	r3, [pc, #80]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	0a1b      	lsrs	r3, r3, #8
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	4912      	ldr	r1, [pc, #72]	@ (8007a78 <HAL_RCC_ClockConfig+0x35c>)
 8007a2e:	5ccb      	ldrb	r3, [r1, r3]
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
 8007a38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a74 <HAL_RCC_ClockConfig+0x358>)
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	4a0d      	ldr	r2, [pc, #52]	@ (8007a78 <HAL_RCC_ClockConfig+0x35c>)
 8007a44:	5cd3      	ldrb	r3, [r2, r3]
 8007a46:	f003 031f 	and.w	r3, r3, #31
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a50:	4a0a      	ldr	r2, [pc, #40]	@ (8007a7c <HAL_RCC_ClockConfig+0x360>)
 8007a52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a54:	4a0a      	ldr	r2, [pc, #40]	@ (8007a80 <HAL_RCC_ClockConfig+0x364>)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a84 <HAL_RCC_ClockConfig+0x368>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fc f840 	bl	8003ae4 <HAL_InitTick>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	58024400 	.word	0x58024400
 8007a78:	0800f96c 	.word	0x0800f96c
 8007a7c:	24000008 	.word	0x24000008
 8007a80:	24000004 	.word	0x24000004
 8007a84:	2400000c 	.word	0x2400000c

08007a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b089      	sub	sp, #36	@ 0x24
 8007a8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a8e:	4bb3      	ldr	r3, [pc, #716]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a96:	2b18      	cmp	r3, #24
 8007a98:	f200 8155 	bhi.w	8007d46 <HAL_RCC_GetSysClockFreq+0x2be>
 8007a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007b09 	.word	0x08007b09
 8007aa8:	08007d47 	.word	0x08007d47
 8007aac:	08007d47 	.word	0x08007d47
 8007ab0:	08007d47 	.word	0x08007d47
 8007ab4:	08007d47 	.word	0x08007d47
 8007ab8:	08007d47 	.word	0x08007d47
 8007abc:	08007d47 	.word	0x08007d47
 8007ac0:	08007d47 	.word	0x08007d47
 8007ac4:	08007b2f 	.word	0x08007b2f
 8007ac8:	08007d47 	.word	0x08007d47
 8007acc:	08007d47 	.word	0x08007d47
 8007ad0:	08007d47 	.word	0x08007d47
 8007ad4:	08007d47 	.word	0x08007d47
 8007ad8:	08007d47 	.word	0x08007d47
 8007adc:	08007d47 	.word	0x08007d47
 8007ae0:	08007d47 	.word	0x08007d47
 8007ae4:	08007b35 	.word	0x08007b35
 8007ae8:	08007d47 	.word	0x08007d47
 8007aec:	08007d47 	.word	0x08007d47
 8007af0:	08007d47 	.word	0x08007d47
 8007af4:	08007d47 	.word	0x08007d47
 8007af8:	08007d47 	.word	0x08007d47
 8007afc:	08007d47 	.word	0x08007d47
 8007b00:	08007d47 	.word	0x08007d47
 8007b04:	08007b3b 	.word	0x08007b3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b08:	4b94      	ldr	r3, [pc, #592]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d009      	beq.n	8007b28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b14:	4b91      	ldr	r3, [pc, #580]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	08db      	lsrs	r3, r3, #3
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	4a90      	ldr	r2, [pc, #576]	@ (8007d60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
 8007b24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007b26:	e111      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b28:	4b8d      	ldr	r3, [pc, #564]	@ (8007d60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b2a:	61bb      	str	r3, [r7, #24]
      break;
 8007b2c:	e10e      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b30:	61bb      	str	r3, [r7, #24]
      break;
 8007b32:	e10b      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007b34:	4b8c      	ldr	r3, [pc, #560]	@ (8007d68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b36:	61bb      	str	r3, [r7, #24]
      break;
 8007b38:	e108      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b3a:	4b88      	ldr	r3, [pc, #544]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007b44:	4b85      	ldr	r3, [pc, #532]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b50:	4b82      	ldr	r3, [pc, #520]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b5a:	4b80      	ldr	r3, [pc, #512]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b5e:	08db      	lsrs	r3, r3, #3
 8007b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80e1 	beq.w	8007d40 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	f000 8083 	beq.w	8007c8c <HAL_RCC_GetSysClockFreq+0x204>
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	f200 80a1 	bhi.w	8007cd0 <HAL_RCC_GetSysClockFreq+0x248>
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_RCC_GetSysClockFreq+0x114>
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d056      	beq.n	8007c48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007b9a:	e099      	b.n	8007cd0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d02d      	beq.n	8007c04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	08db      	lsrs	r3, r3, #3
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	4a6b      	ldr	r2, [pc, #428]	@ (8007d60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	ee07 3a90 	vmov	s15, r3
 8007bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd2:	4b62      	ldr	r3, [pc, #392]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007be6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c02:	e087      	b.n	8007d14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007d70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c16:	4b51      	ldr	r3, [pc, #324]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c46:	e065      	b.n	8007d14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007d74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5a:	4b40      	ldr	r3, [pc, #256]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c8a:	e043      	b.n	8007d14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007d78 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cb2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cce:	e021      	b.n	8007d14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007d74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cf6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d14:	4b11      	ldr	r3, [pc, #68]	@ (8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d18:	0a5b      	lsrs	r3, r3, #9
 8007d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d1e:	3301      	adds	r3, #1
 8007d20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	ee07 3a90 	vmov	s15, r3
 8007d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d38:	ee17 3a90 	vmov	r3, s15
 8007d3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007d3e:	e005      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	61bb      	str	r3, [r7, #24]
      break;
 8007d44:	e002      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007d46:	4b07      	ldr	r3, [pc, #28]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d48:	61bb      	str	r3, [r7, #24]
      break;
 8007d4a:	bf00      	nop
  }

  return sysclockfreq;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3724      	adds	r7, #36	@ 0x24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	03d09000 	.word	0x03d09000
 8007d64:	003d0900 	.word	0x003d0900
 8007d68:	017d7840 	.word	0x017d7840
 8007d6c:	46000000 	.word	0x46000000
 8007d70:	4c742400 	.word	0x4c742400
 8007d74:	4a742400 	.word	0x4a742400
 8007d78:	4bbebc20 	.word	0x4bbebc20

08007d7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d80:	b0c6      	sub	sp, #280	@ 0x118
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007da0:	2500      	movs	r5, #0
 8007da2:	ea54 0305 	orrs.w	r3, r4, r5
 8007da6:	d049      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007db2:	d02f      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007db4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007db8:	d828      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dbe:	d01a      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007dc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dc4:	d822      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dce:	d007      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dd0:	e01c      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd2:	4bab      	ldr	r3, [pc, #684]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	4aaa      	ldr	r2, [pc, #680]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007dde:	e01a      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de4:	3308      	adds	r3, #8
 8007de6:	2102      	movs	r1, #2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 f967 	bl	80090bc <RCCEx_PLL2_Config>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007df4:	e00f      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	3328      	adds	r3, #40	@ 0x28
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 fa0e 	bl	8009220 <RCCEx_PLL3_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e0a:	e004      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e12:	e000      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e1e:	4b98      	ldr	r3, [pc, #608]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e2c:	4a94      	ldr	r2, [pc, #592]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e32:	e003      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007e48:	f04f 0900 	mov.w	r9, #0
 8007e4c:	ea58 0309 	orrs.w	r3, r8, r9
 8007e50:	d047      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d82a      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e79 	.word	0x08007e79
 8007e68:	08007e87 	.word	0x08007e87
 8007e6c:	08007e9d 	.word	0x08007e9d
 8007e70:	08007ebb 	.word	0x08007ebb
 8007e74:	08007ebb 	.word	0x08007ebb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e78:	4b81      	ldr	r3, [pc, #516]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7c:	4a80      	ldr	r2, [pc, #512]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e84:	e01a      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 f914 	bl	80090bc <RCCEx_PLL2_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e9a:	e00f      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea0:	3328      	adds	r3, #40	@ 0x28
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f9bb 	bl	8009220 <RCCEx_PLL3_Config>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eb0:	e004      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007eb8:	e000      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ec4:	4b6e      	ldr	r3, [pc, #440]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ec8:	f023 0107 	bic.w	r1, r3, #7
 8007ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed2:	4a6b      	ldr	r2, [pc, #428]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ed8:	e003      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ede:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007eee:	f04f 0b00 	mov.w	fp, #0
 8007ef2:	ea5a 030b 	orrs.w	r3, sl, fp
 8007ef6:	d05b      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f00:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007f04:	d03b      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007f06:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007f0a:	d834      	bhi.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007f0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f10:	d037      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007f12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f16:	d82e      	bhi.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007f18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f1c:	d033      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007f1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f22:	d828      	bhi.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f28:	d01a      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f2e:	d822      	bhi.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007f34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f38:	d007      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007f3a:	e01c      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f3c:	4b50      	ldr	r3, [pc, #320]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f40:	4a4f      	ldr	r2, [pc, #316]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f48:	e01e      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4e:	3308      	adds	r3, #8
 8007f50:	2100      	movs	r1, #0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f001 f8b2 	bl	80090bc <RCCEx_PLL2_Config>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007f5e:	e013      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f64:	3328      	adds	r3, #40	@ 0x28
 8007f66:	2100      	movs	r1, #0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f001 f959 	bl	8009220 <RCCEx_PLL3_Config>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f74:	e008      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f7c:	e004      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007f7e:	bf00      	nop
 8007f80:	e002      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007f82:	bf00      	nop
 8007f84:	e000      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10b      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f90:	4b3b      	ldr	r3, [pc, #236]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f94:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fa0:	4a37      	ldr	r2, [pc, #220]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fa6:	e003      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007fc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	d05d      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007fd8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007fdc:	d03b      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007fde:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007fe2:	d834      	bhi.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007fe4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fe8:	d037      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007fea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fee:	d82e      	bhi.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007ff0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ff4:	d033      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007ff6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ffa:	d828      	bhi.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007ffc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008000:	d01a      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008006:	d822      	bhi.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800800c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008010:	d007      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008012:	e01c      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008014:	4b1a      	ldr	r3, [pc, #104]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	4a19      	ldr	r2, [pc, #100]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800801a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800801e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008020:	e01e      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008026:	3308      	adds	r3, #8
 8008028:	2100      	movs	r1, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f001 f846 	bl	80090bc <RCCEx_PLL2_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008036:	e013      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803c:	3328      	adds	r3, #40	@ 0x28
 800803e:	2100      	movs	r1, #0
 8008040:	4618      	mov	r0, r3
 8008042:	f001 f8ed 	bl	8009220 <RCCEx_PLL3_Config>
 8008046:	4603      	mov	r3, r0
 8008048:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800804c:	e008      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008054:	e004      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008056:	bf00      	nop
 8008058:	e002      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800805a:	bf00      	nop
 800805c:	e000      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800805e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008068:	4b05      	ldr	r3, [pc, #20]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800806a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008074:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008078:	4a01      	ldr	r2, [pc, #4]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800807a:	430b      	orrs	r3, r1
 800807c:	6593      	str	r3, [r2, #88]	@ 0x58
 800807e:	e005      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008098:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800809c:	2300      	movs	r3, #0
 800809e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80080a2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4313      	orrs	r3, r2
 80080aa:	d03a      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80080ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b2:	2b30      	cmp	r3, #48	@ 0x30
 80080b4:	d01f      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80080b6:	2b30      	cmp	r3, #48	@ 0x30
 80080b8:	d819      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d00c      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d815      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d019      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	d111      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ca:	4baa      	ldr	r3, [pc, #680]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ce:	4aa9      	ldr	r2, [pc, #676]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80080d6:	e011      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080dc:	3308      	adds	r3, #8
 80080de:	2102      	movs	r1, #2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 ffeb 	bl	80090bc <RCCEx_PLL2_Config>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080f4:	e002      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80080fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008104:	4b9b      	ldr	r3, [pc, #620]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008108:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800810c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008112:	4a98      	ldr	r2, [pc, #608]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008114:	430b      	orrs	r3, r1
 8008116:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008118:	e003      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800811e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800812e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008132:	2300      	movs	r3, #0
 8008134:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008138:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800813c:	460b      	mov	r3, r1
 800813e:	4313      	orrs	r3, r2
 8008140:	d051      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800814c:	d035      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800814e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008152:	d82e      	bhi.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008154:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008158:	d031      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x442>
 800815a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800815e:	d828      	bhi.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008164:	d01a      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800816a:	d822      	bhi.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008174:	d007      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008176:	e01c      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008178:	4b7e      	ldr	r3, [pc, #504]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800817a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817c:	4a7d      	ldr	r2, [pc, #500]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800817e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008184:	e01c      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818a:	3308      	adds	r3, #8
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f000 ff94 	bl	80090bc <RCCEx_PLL2_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800819a:	e011      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800819c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a0:	3328      	adds	r3, #40	@ 0x28
 80081a2:	2100      	movs	r1, #0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f001 f83b 	bl	8009220 <RCCEx_PLL3_Config>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081b0:	e006      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081b8:	e002      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80081ba:	bf00      	nop
 80081bc:	e000      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80081be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80081c8:	4b6a      	ldr	r3, [pc, #424]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081d6:	4a67      	ldr	r2, [pc, #412]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081d8:	430b      	orrs	r3, r1
 80081da:	6513      	str	r3, [r2, #80]	@ 0x50
 80081dc:	e003      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80081e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80081f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081f6:	2300      	movs	r3, #0
 80081f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008200:	460b      	mov	r3, r1
 8008202:	4313      	orrs	r3, r2
 8008204:	d053      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800820c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008210:	d033      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008212:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008216:	d82c      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008218:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800821c:	d02f      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800821e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008222:	d826      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008224:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008228:	d02b      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800822a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800822e:	d820      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008234:	d012      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800823a:	d81a      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d022      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008244:	d115      	bne.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824a:	3308      	adds	r3, #8
 800824c:	2101      	movs	r1, #1
 800824e:	4618      	mov	r0, r3
 8008250:	f000 ff34 	bl	80090bc <RCCEx_PLL2_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800825a:	e015      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008260:	3328      	adds	r3, #40	@ 0x28
 8008262:	2101      	movs	r1, #1
 8008264:	4618      	mov	r0, r3
 8008266:	f000 ffdb 	bl	8009220 <RCCEx_PLL3_Config>
 800826a:	4603      	mov	r3, r0
 800826c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008270:	e00a      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008278:	e006      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800827a:	bf00      	nop
 800827c:	e004      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800827e:	bf00      	nop
 8008280:	e002      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008282:	bf00      	nop
 8008284:	e000      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008290:	4b38      	ldr	r3, [pc, #224]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008294:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800829c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800829e:	4a35      	ldr	r2, [pc, #212]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80082ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082c8:	460b      	mov	r3, r1
 80082ca:	4313      	orrs	r3, r2
 80082cc:	d058      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80082ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082da:	d033      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80082dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082e0:	d82c      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e6:	d02f      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ec:	d826      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80082ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082f2:	d02b      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80082f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082f8:	d820      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80082fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082fe:	d012      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008304:	d81a      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d022      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800830a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800830e:	d115      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008314:	3308      	adds	r3, #8
 8008316:	2101      	movs	r1, #1
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fecf 	bl	80090bc <RCCEx_PLL2_Config>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008324:	e015      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832a:	3328      	adds	r3, #40	@ 0x28
 800832c:	2101      	movs	r1, #1
 800832e:	4618      	mov	r0, r3
 8008330:	f000 ff76 	bl	8009220 <RCCEx_PLL3_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800833a:	e00a      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008342:	e006      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008344:	bf00      	nop
 8008346:	e004      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008348:	bf00      	nop
 800834a:	e002      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800834c:	bf00      	nop
 800834e:	e000      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008352:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10e      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800835a:	4b06      	ldr	r3, [pc, #24]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800835c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800835e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800836a:	4a02      	ldr	r2, [pc, #8]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800836c:	430b      	orrs	r3, r1
 800836e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008370:	e006      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008372:	bf00      	nop
 8008374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800837c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800838c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008396:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800839a:	460b      	mov	r3, r1
 800839c:	4313      	orrs	r3, r2
 800839e:	d037      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083aa:	d00e      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80083ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b0:	d816      	bhi.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d018      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80083b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083ba:	d111      	bne.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083bc:	4bc4      	ldr	r3, [pc, #784]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c0:	4ac3      	ldr	r2, [pc, #780]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80083c8:	e00f      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ce:	3308      	adds	r3, #8
 80083d0:	2101      	movs	r1, #1
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fe72 	bl	80090bc <RCCEx_PLL2_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80083de:	e004      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083e6:	e000      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80083e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083f2:	4bb7      	ldr	r3, [pc, #732]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80083fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008400:	4ab3      	ldr	r2, [pc, #716]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008402:	430b      	orrs	r3, r1
 8008404:	6513      	str	r3, [r2, #80]	@ 0x50
 8008406:	e003      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800840c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800841c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008420:	2300      	movs	r3, #0
 8008422:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008426:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800842a:	460b      	mov	r3, r1
 800842c:	4313      	orrs	r3, r2
 800842e:	d039      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008436:	2b03      	cmp	r3, #3
 8008438:	d81c      	bhi.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800843a:	a201      	add	r2, pc, #4	@ (adr r2, 8008440 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	0800847d 	.word	0x0800847d
 8008444:	08008451 	.word	0x08008451
 8008448:	0800845f 	.word	0x0800845f
 800844c:	0800847d 	.word	0x0800847d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008450:	4b9f      	ldr	r3, [pc, #636]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008454:	4a9e      	ldr	r2, [pc, #632]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800845a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800845c:	e00f      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800845e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008462:	3308      	adds	r3, #8
 8008464:	2102      	movs	r1, #2
 8008466:	4618      	mov	r0, r3
 8008468:	f000 fe28 	bl	80090bc <RCCEx_PLL2_Config>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008472:	e004      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800847a:	e000      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800847c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800847e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10a      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008486:	4b92      	ldr	r3, [pc, #584]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800848a:	f023 0103 	bic.w	r1, r3, #3
 800848e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008494:	4a8e      	ldr	r2, [pc, #568]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008496:	430b      	orrs	r3, r1
 8008498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800849a:	e003      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80084b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084b4:	2300      	movs	r3, #0
 80084b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084be:	460b      	mov	r3, r1
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f000 8099 	beq.w	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084c6:	4b83      	ldr	r3, [pc, #524]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a82      	ldr	r2, [pc, #520]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084d2:	f7fb fb51 	bl	8003b78 <HAL_GetTick>
 80084d6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084da:	e00b      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084dc:	f7fb fb4c 	bl	8003b78 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	2b64      	cmp	r3, #100	@ 0x64
 80084ea:	d903      	bls.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80084f2:	e005      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084f4:	4b77      	ldr	r3, [pc, #476]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0ed      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008504:	2b00      	cmp	r3, #0
 8008506:	d173      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008508:	4b71      	ldr	r3, [pc, #452]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800850a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800850c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008514:	4053      	eors	r3, r2
 8008516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851a:	2b00      	cmp	r3, #0
 800851c:	d015      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800851e:	4b6c      	ldr	r3, [pc, #432]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008526:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800852a:	4b69      	ldr	r3, [pc, #420]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800852c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800852e:	4a68      	ldr	r2, [pc, #416]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008534:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008536:	4b66      	ldr	r3, [pc, #408]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853a:	4a65      	ldr	r2, [pc, #404]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800853c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008540:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008542:	4a63      	ldr	r2, [pc, #396]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008548:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800854a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008556:	d118      	bne.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008558:	f7fb fb0e 	bl	8003b78 <HAL_GetTick>
 800855c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008560:	e00d      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008562:	f7fb fb09 	bl	8003b78 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800856c:	1ad2      	subs	r2, r2, r3
 800856e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008572:	429a      	cmp	r2, r3
 8008574:	d903      	bls.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800857c:	e005      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800857e:	4b54      	ldr	r3, [pc, #336]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0eb      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800858a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800858e:	2b00      	cmp	r3, #0
 8008590:	d129      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800859a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800859e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085a2:	d10e      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80085a4:	4b4a      	ldr	r3, [pc, #296]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80085b4:	091a      	lsrs	r2, r3, #4
 80085b6:	4b48      	ldr	r3, [pc, #288]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	4a45      	ldr	r2, [pc, #276]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085bc:	430b      	orrs	r3, r1
 80085be:	6113      	str	r3, [r2, #16]
 80085c0:	e005      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 80085c2:	4b43      	ldr	r3, [pc, #268]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	4a42      	ldr	r2, [pc, #264]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80085cc:	6113      	str	r3, [r2, #16]
 80085ce:	4b40      	ldr	r3, [pc, #256]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80085d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80085da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085de:	4a3c      	ldr	r2, [pc, #240]	@ (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085e0:	430b      	orrs	r3, r1
 80085e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085e4:	e008      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80085ee:	e003      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80085f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f002 0301 	and.w	r3, r2, #1
 8008604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008608:	2300      	movs	r3, #0
 800860a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800860e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008612:	460b      	mov	r3, r1
 8008614:	4313      	orrs	r3, r2
 8008616:	f000 808f 	beq.w	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800861a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008620:	2b28      	cmp	r3, #40	@ 0x28
 8008622:	d871      	bhi.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008624:	a201      	add	r2, pc, #4	@ (adr r2, 800862c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862a:	bf00      	nop
 800862c:	08008711 	.word	0x08008711
 8008630:	08008709 	.word	0x08008709
 8008634:	08008709 	.word	0x08008709
 8008638:	08008709 	.word	0x08008709
 800863c:	08008709 	.word	0x08008709
 8008640:	08008709 	.word	0x08008709
 8008644:	08008709 	.word	0x08008709
 8008648:	08008709 	.word	0x08008709
 800864c:	080086dd 	.word	0x080086dd
 8008650:	08008709 	.word	0x08008709
 8008654:	08008709 	.word	0x08008709
 8008658:	08008709 	.word	0x08008709
 800865c:	08008709 	.word	0x08008709
 8008660:	08008709 	.word	0x08008709
 8008664:	08008709 	.word	0x08008709
 8008668:	08008709 	.word	0x08008709
 800866c:	080086f3 	.word	0x080086f3
 8008670:	08008709 	.word	0x08008709
 8008674:	08008709 	.word	0x08008709
 8008678:	08008709 	.word	0x08008709
 800867c:	08008709 	.word	0x08008709
 8008680:	08008709 	.word	0x08008709
 8008684:	08008709 	.word	0x08008709
 8008688:	08008709 	.word	0x08008709
 800868c:	08008711 	.word	0x08008711
 8008690:	08008709 	.word	0x08008709
 8008694:	08008709 	.word	0x08008709
 8008698:	08008709 	.word	0x08008709
 800869c:	08008709 	.word	0x08008709
 80086a0:	08008709 	.word	0x08008709
 80086a4:	08008709 	.word	0x08008709
 80086a8:	08008709 	.word	0x08008709
 80086ac:	08008711 	.word	0x08008711
 80086b0:	08008709 	.word	0x08008709
 80086b4:	08008709 	.word	0x08008709
 80086b8:	08008709 	.word	0x08008709
 80086bc:	08008709 	.word	0x08008709
 80086c0:	08008709 	.word	0x08008709
 80086c4:	08008709 	.word	0x08008709
 80086c8:	08008709 	.word	0x08008709
 80086cc:	08008711 	.word	0x08008711
 80086d0:	58024400 	.word	0x58024400
 80086d4:	58024800 	.word	0x58024800
 80086d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e0:	3308      	adds	r3, #8
 80086e2:	2101      	movs	r1, #1
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fce9 	bl	80090bc <RCCEx_PLL2_Config>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80086f0:	e00f      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f6:	3328      	adds	r3, #40	@ 0x28
 80086f8:	2101      	movs	r1, #1
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fd90 	bl	8009220 <RCCEx_PLL3_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008706:	e004      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800870e:	e000      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10a      	bne.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800871a:	4bbf      	ldr	r3, [pc, #764]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800871c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008728:	4abb      	ldr	r2, [pc, #748]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800872a:	430b      	orrs	r3, r1
 800872c:	6553      	str	r3, [r2, #84]	@ 0x54
 800872e:	e003      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f002 0302 	and.w	r3, r2, #2
 8008744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800874e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008752:	460b      	mov	r3, r1
 8008754:	4313      	orrs	r3, r2
 8008756:	d041      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800875c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800875e:	2b05      	cmp	r3, #5
 8008760:	d824      	bhi.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008762:	a201      	add	r2, pc, #4	@ (adr r2, 8008768 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	080087b5 	.word	0x080087b5
 800876c:	08008781 	.word	0x08008781
 8008770:	08008797 	.word	0x08008797
 8008774:	080087b5 	.word	0x080087b5
 8008778:	080087b5 	.word	0x080087b5
 800877c:	080087b5 	.word	0x080087b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008784:	3308      	adds	r3, #8
 8008786:	2101      	movs	r1, #1
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fc97 	bl	80090bc <RCCEx_PLL2_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008794:	e00f      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879a:	3328      	adds	r3, #40	@ 0x28
 800879c:	2101      	movs	r1, #1
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fd3e 	bl	8009220 <RCCEx_PLL3_Config>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80087aa:	e004      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80087b2:	e000      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80087b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80087be:	4b96      	ldr	r3, [pc, #600]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80087c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087c2:	f023 0107 	bic.w	r1, r3, #7
 80087c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087cc:	4a92      	ldr	r2, [pc, #584]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80087ce:	430b      	orrs	r3, r1
 80087d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80087d2:	e003      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	f002 0304 	and.w	r3, r2, #4
 80087e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087ec:	2300      	movs	r3, #0
 80087ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087f6:	460b      	mov	r3, r1
 80087f8:	4313      	orrs	r3, r2
 80087fa:	d044      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80087fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008804:	2b05      	cmp	r3, #5
 8008806:	d825      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008808:	a201      	add	r2, pc, #4	@ (adr r2, 8008810 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800880a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880e:	bf00      	nop
 8008810:	0800885d 	.word	0x0800885d
 8008814:	08008829 	.word	0x08008829
 8008818:	0800883f 	.word	0x0800883f
 800881c:	0800885d 	.word	0x0800885d
 8008820:	0800885d 	.word	0x0800885d
 8008824:	0800885d 	.word	0x0800885d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882c:	3308      	adds	r3, #8
 800882e:	2101      	movs	r1, #1
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fc43 	bl	80090bc <RCCEx_PLL2_Config>
 8008836:	4603      	mov	r3, r0
 8008838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800883c:	e00f      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800883e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008842:	3328      	adds	r3, #40	@ 0x28
 8008844:	2101      	movs	r1, #1
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fcea 	bl	8009220 <RCCEx_PLL3_Config>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008852:	e004      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800885a:	e000      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800885c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800885e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10b      	bne.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008866:	4b6c      	ldr	r3, [pc, #432]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886a:	f023 0107 	bic.w	r1, r3, #7
 800886e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008876:	4a68      	ldr	r2, [pc, #416]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008878:	430b      	orrs	r3, r1
 800887a:	6593      	str	r3, [r2, #88]	@ 0x58
 800887c:	e003      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f002 0320 	and.w	r3, r2, #32
 8008892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008896:	2300      	movs	r3, #0
 8008898:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800889c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4313      	orrs	r3, r2
 80088a4:	d055      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80088a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088b2:	d033      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80088b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088b8:	d82c      	bhi.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80088ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088be:	d02f      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80088c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c4:	d826      	bhi.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80088c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088ca:	d02b      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80088cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088d0:	d820      	bhi.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80088d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088d6:	d012      	beq.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80088d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088dc:	d81a      	bhi.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d022      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80088e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088e6:	d115      	bne.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ec:	3308      	adds	r3, #8
 80088ee:	2100      	movs	r1, #0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fbe3 	bl	80090bc <RCCEx_PLL2_Config>
 80088f6:	4603      	mov	r3, r0
 80088f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80088fc:	e015      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008902:	3328      	adds	r3, #40	@ 0x28
 8008904:	2102      	movs	r1, #2
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fc8a 	bl	8009220 <RCCEx_PLL3_Config>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008912:	e00a      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800891a:	e006      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800891c:	bf00      	nop
 800891e:	e004      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008920:	bf00      	nop
 8008922:	e002      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008924:	bf00      	nop
 8008926:	e000      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800892a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008932:	4b39      	ldr	r3, [pc, #228]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008936:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800893a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800893e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008942:	4a35      	ldr	r2, [pc, #212]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008944:	430b      	orrs	r3, r1
 8008946:	6553      	str	r3, [r2, #84]	@ 0x54
 8008948:	e003      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800894a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800894e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800895e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008962:	2300      	movs	r3, #0
 8008964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008968:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800896c:	460b      	mov	r3, r1
 800896e:	4313      	orrs	r3, r2
 8008970:	d058      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800897a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800897e:	d033      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008980:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008984:	d82c      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898a:	d02f      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800898c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008990:	d826      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008992:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008996:	d02b      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008998:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800899c:	d820      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800899e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089a2:	d012      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80089a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089a8:	d81a      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d022      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80089ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b2:	d115      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b8:	3308      	adds	r3, #8
 80089ba:	2100      	movs	r1, #0
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 fb7d 	bl	80090bc <RCCEx_PLL2_Config>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80089c8:	e015      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ce:	3328      	adds	r3, #40	@ 0x28
 80089d0:	2102      	movs	r1, #2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fc24 	bl	8009220 <RCCEx_PLL3_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80089de:	e00a      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80089e6:	e006      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80089e8:	bf00      	nop
 80089ea:	e004      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80089ec:	bf00      	nop
 80089ee:	e002      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80089f0:	bf00      	nop
 80089f2:	e000      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80089f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10e      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089fe:	4b06      	ldr	r3, [pc, #24]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a02:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a0e:	4a02      	ldr	r2, [pc, #8]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a10:	430b      	orrs	r3, r1
 8008a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a14:	e006      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008a16:	bf00      	nop
 8008a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008a30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4313      	orrs	r3, r2
 8008a42:	d055      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a4c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a50:	d033      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008a52:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a56:	d82c      	bhi.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a5c:	d02f      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a62:	d826      	bhi.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008a64:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a68:	d02b      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008a6a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a6e:	d820      	bhi.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a74:	d012      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008a76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a7a:	d81a      	bhi.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d022      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a84:	d115      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fb14 	bl	80090bc <RCCEx_PLL2_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a9a:	e015      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa0:	3328      	adds	r3, #40	@ 0x28
 8008aa2:	2102      	movs	r1, #2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fbbb 	bl	8009220 <RCCEx_PLL3_Config>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ab0:	e00a      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ab8:	e006      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008aba:	bf00      	nop
 8008abc:	e004      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008abe:	bf00      	nop
 8008ac0:	e002      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008ac2:	bf00      	nop
 8008ac4:	e000      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10b      	bne.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008ad0:	4ba0      	ldr	r3, [pc, #640]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008adc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ae0:	4a9c      	ldr	r2, [pc, #624]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ae2:	430b      	orrs	r3, r1
 8008ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ae6:	e003      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008aec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f002 0308 	and.w	r3, r2, #8
 8008afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b00:	2300      	movs	r3, #0
 8008b02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b06:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	d01e      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1c:	d10c      	bne.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b22:	3328      	adds	r3, #40	@ 0x28
 8008b24:	2102      	movs	r1, #2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fb7a 	bl	8009220 <RCCEx_PLL3_Config>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008b38:	4b86      	ldr	r3, [pc, #536]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b3c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b48:	4a82      	ldr	r2, [pc, #520]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b4a:	430b      	orrs	r3, r1
 8008b4c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f002 0310 	and.w	r3, r2, #16
 8008b5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b64:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	d01e      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b7a:	d10c      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b80:	3328      	adds	r3, #40	@ 0x28
 8008b82:	2102      	movs	r1, #2
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fb4b 	bl	8009220 <RCCEx_PLL3_Config>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b96:	4b6f      	ldr	r3, [pc, #444]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ba6:	4a6b      	ldr	r2, [pc, #428]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008bba:	2300      	movs	r3, #0
 8008bbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008bbe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	d03e      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bd4:	d022      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008bd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bda:	d81b      	bhi.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008be4:	d00b      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008be6:	e015      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bec:	3308      	adds	r3, #8
 8008bee:	2100      	movs	r1, #0
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fa63 	bl	80090bc <RCCEx_PLL2_Config>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008bfc:	e00f      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c02:	3328      	adds	r3, #40	@ 0x28
 8008c04:	2102      	movs	r1, #2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fb0a 	bl	8009220 <RCCEx_PLL3_Config>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c12:	e004      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c1a:	e000      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10b      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c26:	4b4b      	ldr	r3, [pc, #300]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c36:	4a47      	ldr	r2, [pc, #284]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c3c:	e003      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008c52:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c54:	2300      	movs	r3, #0
 8008c56:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	d03b      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c6e:	d01f      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008c70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c74:	d818      	bhi.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c7a:	d003      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c80:	d007      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008c82:	e011      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c84:	4b33      	ldr	r3, [pc, #204]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c88:	4a32      	ldr	r2, [pc, #200]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c90:	e00f      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c96:	3328      	adds	r3, #40	@ 0x28
 8008c98:	2101      	movs	r1, #1
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fac0 	bl	8009220 <RCCEx_PLL3_Config>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ca6:	e004      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cae:	e000      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cba:	4b26      	ldr	r3, [pc, #152]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cca:	4a22      	ldr	r2, [pc, #136]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	6553      	str	r3, [r2, #84]	@ 0x54
 8008cd0:	e003      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008ce6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ce8:	2300      	movs	r3, #0
 8008cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	d034      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d04:	d007      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008d06:	e011      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d08:	4b12      	ldr	r3, [pc, #72]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0c:	4a11      	ldr	r2, [pc, #68]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d14:	e00e      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	2102      	movs	r1, #2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f9cc 	bl	80090bc <RCCEx_PLL2_Config>
 8008d24:	4603      	mov	r3, r0
 8008d26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d2a:	e003      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10d      	bne.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d3c:	4b05      	ldr	r3, [pc, #20]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d4a:	4a02      	ldr	r2, [pc, #8]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d4c:	430b      	orrs	r3, r1
 8008d4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d50:	e006      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008d52:	bf00      	nop
 8008d54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008d6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d6e:	2300      	movs	r3, #0
 8008d70:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d72:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008d76:	460b      	mov	r3, r1
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	d00c      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d80:	3328      	adds	r3, #40	@ 0x28
 8008d82:	2102      	movs	r1, #2
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 fa4b 	bl	8009220 <RCCEx_PLL3_Config>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008da2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008da4:	2300      	movs	r3, #0
 8008da6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008da8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008dac:	460b      	mov	r3, r1
 8008dae:	4313      	orrs	r3, r2
 8008db0:	d036      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008db8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dbc:	d018      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008dbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dc2:	d811      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dc8:	d014      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dce:	d80b      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d011      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dd8:	d106      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dda:	4bb7      	ldr	r3, [pc, #732]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dde:	4ab6      	ldr	r2, [pc, #728]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008de4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008de6:	e008      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008dee:	e004      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008df0:	bf00      	nop
 8008df2:	e002      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008df4:	bf00      	nop
 8008df6:	e000      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10a      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e02:	4bad      	ldr	r3, [pc, #692]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e10:	4aa9      	ldr	r2, [pc, #676]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e12:	430b      	orrs	r3, r1
 8008e14:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e16:	e003      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008e2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e2e:	2300      	movs	r3, #0
 8008e30:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008e36:	460b      	mov	r3, r1
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	d009      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e3c:	4b9e      	ldr	r3, [pc, #632]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e4a:	4a9b      	ldr	r2, [pc, #620]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e5e:	2300      	movs	r3, #0
 8008e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e62:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008e66:	460b      	mov	r3, r1
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	d009      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e6c:	4b92      	ldr	r3, [pc, #584]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e70:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e7a:	4a8f      	ldr	r2, [pc, #572]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e8e:	2300      	movs	r3, #0
 8008e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008e96:	460b      	mov	r3, r1
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	d00e      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e9c:	4b86      	ldr	r3, [pc, #536]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	4a85      	ldr	r2, [pc, #532]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ea2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ea6:	6113      	str	r3, [r2, #16]
 8008ea8:	4b83      	ldr	r3, [pc, #524]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008eaa:	6919      	ldr	r1, [r3, #16]
 8008eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008eb4:	4a80      	ldr	r2, [pc, #512]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008eb6:	430b      	orrs	r3, r1
 8008eb8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ec8:	2300      	movs	r3, #0
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ecc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	d009      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ed6:	4b78      	ldr	r3, [pc, #480]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee4:	4a74      	ldr	r2, [pc, #464]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ee6:	430b      	orrs	r3, r1
 8008ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ef8:	2300      	movs	r3, #0
 8008efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008f00:	460b      	mov	r3, r1
 8008f02:	4313      	orrs	r3, r2
 8008f04:	d00a      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f06:	4b6c      	ldr	r3, [pc, #432]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f0a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f16:	4a68      	ldr	r2, [pc, #416]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008f18:	430b      	orrs	r3, r1
 8008f1a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	2100      	movs	r1, #0
 8008f26:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008f32:	460b      	mov	r3, r1
 8008f34:	4313      	orrs	r3, r2
 8008f36:	d011      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 f8bb 	bl	80090bc <RCCEx_PLL2_Config>
 8008f46:	4603      	mov	r3, r0
 8008f48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	2100      	movs	r1, #0
 8008f66:	6239      	str	r1, [r7, #32]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008f72:	460b      	mov	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	d011      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 f89b 	bl	80090bc <RCCEx_PLL2_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	61b9      	str	r1, [r7, #24]
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	61fb      	str	r3, [r7, #28]
 8008fae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	d011      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	2102      	movs	r1, #2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f87b 	bl	80090bc <RCCEx_PLL2_Config>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	6139      	str	r1, [r7, #16]
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	d011      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ffc:	3328      	adds	r3, #40	@ 0x28
 8008ffe:	2100      	movs	r1, #0
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f90d 	bl	8009220 <RCCEx_PLL3_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800900c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009018:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800901c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	2100      	movs	r1, #0
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009032:	460b      	mov	r3, r1
 8009034:	4313      	orrs	r3, r2
 8009036:	d011      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800903c:	3328      	adds	r3, #40	@ 0x28
 800903e:	2101      	movs	r1, #1
 8009040:	4618      	mov	r0, r3
 8009042:	f000 f8ed 	bl	8009220 <RCCEx_PLL3_Config>
 8009046:	4603      	mov	r3, r0
 8009048:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800904c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009058:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800905c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	2100      	movs	r1, #0
 8009066:	6039      	str	r1, [r7, #0]
 8009068:	f003 0320 	and.w	r3, r3, #32
 800906c:	607b      	str	r3, [r7, #4]
 800906e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009072:	460b      	mov	r3, r1
 8009074:	4313      	orrs	r3, r2
 8009076:	d011      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800907c:	3328      	adds	r3, #40	@ 0x28
 800907e:	2102      	movs	r1, #2
 8009080:	4618      	mov	r0, r3
 8009082:	f000 f8cd 	bl	8009220 <RCCEx_PLL3_Config>
 8009086:	4603      	mov	r3, r0
 8009088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800908c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800909c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	e000      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80090b0:	46bd      	mov	sp, r7
 80090b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090b6:	bf00      	nop
 80090b8:	58024400 	.word	0x58024400

080090bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090ca:	4b53      	ldr	r3, [pc, #332]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80090cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d101      	bne.n	80090da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e099      	b.n	800920e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80090da:	4b4f      	ldr	r3, [pc, #316]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a4e      	ldr	r2, [pc, #312]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80090e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090e6:	f7fa fd47 	bl	8003b78 <HAL_GetTick>
 80090ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090ec:	e008      	b.n	8009100 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090ee:	f7fa fd43 	bl	8003b78 <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d901      	bls.n	8009100 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e086      	b.n	800920e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009100:	4b45      	ldr	r3, [pc, #276]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1f0      	bne.n	80090ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800910c:	4b42      	ldr	r3, [pc, #264]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 800910e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009110:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	031b      	lsls	r3, r3, #12
 800911a:	493f      	ldr	r1, [pc, #252]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 800911c:	4313      	orrs	r3, r2
 800911e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	3b01      	subs	r3, #1
 8009126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	3b01      	subs	r3, #1
 8009130:	025b      	lsls	r3, r3, #9
 8009132:	b29b      	uxth	r3, r3
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	3b01      	subs	r3, #1
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009142:	431a      	orrs	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	3b01      	subs	r3, #1
 800914a:	061b      	lsls	r3, r3, #24
 800914c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009150:	4931      	ldr	r1, [pc, #196]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 8009152:	4313      	orrs	r3, r2
 8009154:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009156:	4b30      	ldr	r3, [pc, #192]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 8009158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	492d      	ldr	r1, [pc, #180]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 8009164:	4313      	orrs	r3, r2
 8009166:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009168:	4b2b      	ldr	r3, [pc, #172]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	f023 0220 	bic.w	r2, r3, #32
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	4928      	ldr	r1, [pc, #160]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 8009176:	4313      	orrs	r3, r2
 8009178:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800917a:	4b27      	ldr	r3, [pc, #156]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 800917c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917e:	4a26      	ldr	r2, [pc, #152]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 8009180:	f023 0310 	bic.w	r3, r3, #16
 8009184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009186:	4b24      	ldr	r3, [pc, #144]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 8009188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800918a:	4b24      	ldr	r3, [pc, #144]	@ (800921c <RCCEx_PLL2_Config+0x160>)
 800918c:	4013      	ands	r3, r2
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	69d2      	ldr	r2, [r2, #28]
 8009192:	00d2      	lsls	r2, r2, #3
 8009194:	4920      	ldr	r1, [pc, #128]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 8009196:	4313      	orrs	r3, r2
 8009198:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800919a:	4b1f      	ldr	r3, [pc, #124]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 800919c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919e:	4a1e      	ldr	r2, [pc, #120]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80091a0:	f043 0310 	orr.w	r3, r3, #16
 80091a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d106      	bne.n	80091ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80091ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80091ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b0:	4a19      	ldr	r2, [pc, #100]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80091b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091b8:	e00f      	b.n	80091da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d106      	bne.n	80091ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80091c0:	4b15      	ldr	r3, [pc, #84]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80091c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c4:	4a14      	ldr	r2, [pc, #80]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80091c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091cc:	e005      	b.n	80091da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80091ce:	4b12      	ldr	r3, [pc, #72]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d2:	4a11      	ldr	r2, [pc, #68]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80091d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80091d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80091da:	4b0f      	ldr	r3, [pc, #60]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a0e      	ldr	r2, [pc, #56]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 80091e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80091e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091e6:	f7fa fcc7 	bl	8003b78 <HAL_GetTick>
 80091ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091ec:	e008      	b.n	8009200 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091ee:	f7fa fcc3 	bl	8003b78 <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d901      	bls.n	8009200 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e006      	b.n	800920e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009200:	4b05      	ldr	r3, [pc, #20]	@ (8009218 <RCCEx_PLL2_Config+0x15c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0f0      	beq.n	80091ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	58024400 	.word	0x58024400
 800921c:	ffff0007 	.word	0xffff0007

08009220 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800922e:	4b53      	ldr	r3, [pc, #332]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009232:	f003 0303 	and.w	r3, r3, #3
 8009236:	2b03      	cmp	r3, #3
 8009238:	d101      	bne.n	800923e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e099      	b.n	8009372 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800923e:	4b4f      	ldr	r3, [pc, #316]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a4e      	ldr	r2, [pc, #312]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800924a:	f7fa fc95 	bl	8003b78 <HAL_GetTick>
 800924e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009250:	e008      	b.n	8009264 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009252:	f7fa fc91 	bl	8003b78 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d901      	bls.n	8009264 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e086      	b.n	8009372 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009264:	4b45      	ldr	r3, [pc, #276]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1f0      	bne.n	8009252 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009270:	4b42      	ldr	r3, [pc, #264]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009274:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	051b      	lsls	r3, r3, #20
 800927e:	493f      	ldr	r1, [pc, #252]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009280:	4313      	orrs	r3, r2
 8009282:	628b      	str	r3, [r1, #40]	@ 0x28
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	3b01      	subs	r3, #1
 800928a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	3b01      	subs	r3, #1
 8009294:	025b      	lsls	r3, r3, #9
 8009296:	b29b      	uxth	r3, r3
 8009298:	431a      	orrs	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	3b01      	subs	r3, #1
 80092a0:	041b      	lsls	r3, r3, #16
 80092a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	061b      	lsls	r3, r3, #24
 80092b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092b4:	4931      	ldr	r1, [pc, #196]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80092ba:	4b30      	ldr	r3, [pc, #192]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 80092bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	492d      	ldr	r1, [pc, #180]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 80092c8:	4313      	orrs	r3, r2
 80092ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80092cc:	4b2b      	ldr	r3, [pc, #172]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 80092ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	4928      	ldr	r1, [pc, #160]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80092de:	4b27      	ldr	r3, [pc, #156]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	4a26      	ldr	r2, [pc, #152]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 80092e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80092ea:	4b24      	ldr	r3, [pc, #144]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 80092ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092ee:	4b24      	ldr	r3, [pc, #144]	@ (8009380 <RCCEx_PLL3_Config+0x160>)
 80092f0:	4013      	ands	r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	69d2      	ldr	r2, [r2, #28]
 80092f6:	00d2      	lsls	r2, r2, #3
 80092f8:	4920      	ldr	r1, [pc, #128]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092fe:	4b1f      	ldr	r3, [pc, #124]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009302:	4a1e      	ldr	r2, [pc, #120]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d106      	bne.n	800931e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009310:	4b1a      	ldr	r3, [pc, #104]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009314:	4a19      	ldr	r2, [pc, #100]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009316:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800931a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800931c:	e00f      	b.n	800933e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d106      	bne.n	8009332 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009324:	4b15      	ldr	r3, [pc, #84]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009328:	4a14      	ldr	r2, [pc, #80]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 800932a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800932e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009330:	e005      	b.n	800933e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009332:	4b12      	ldr	r3, [pc, #72]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009336:	4a11      	ldr	r2, [pc, #68]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800933c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800933e:	4b0f      	ldr	r3, [pc, #60]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a0e      	ldr	r2, [pc, #56]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800934a:	f7fa fc15 	bl	8003b78 <HAL_GetTick>
 800934e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009350:	e008      	b.n	8009364 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009352:	f7fa fc11 	bl	8003b78 <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	2b02      	cmp	r3, #2
 800935e:	d901      	bls.n	8009364 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e006      	b.n	8009372 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009364:	4b05      	ldr	r3, [pc, #20]	@ (800937c <RCCEx_PLL3_Config+0x15c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d0f0      	beq.n	8009352 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	58024400 	.word	0x58024400
 8009380:	ffff0007 	.word	0xffff0007

08009384 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e10f      	b.n	80095b6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a87      	ldr	r2, [pc, #540]	@ (80095c0 <HAL_SPI_Init+0x23c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00f      	beq.n	80093c6 <HAL_SPI_Init+0x42>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a86      	ldr	r2, [pc, #536]	@ (80095c4 <HAL_SPI_Init+0x240>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d00a      	beq.n	80093c6 <HAL_SPI_Init+0x42>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a84      	ldr	r2, [pc, #528]	@ (80095c8 <HAL_SPI_Init+0x244>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d005      	beq.n	80093c6 <HAL_SPI_Init+0x42>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	2b0f      	cmp	r3, #15
 80093c0:	d901      	bls.n	80093c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e0f7      	b.n	80095b6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 fc90 	bl	800acec <SPI_GetPacketSize>
 80093cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a7b      	ldr	r2, [pc, #492]	@ (80095c0 <HAL_SPI_Init+0x23c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d00c      	beq.n	80093f2 <HAL_SPI_Init+0x6e>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a79      	ldr	r2, [pc, #484]	@ (80095c4 <HAL_SPI_Init+0x240>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d007      	beq.n	80093f2 <HAL_SPI_Init+0x6e>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a78      	ldr	r2, [pc, #480]	@ (80095c8 <HAL_SPI_Init+0x244>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d002      	beq.n	80093f2 <HAL_SPI_Init+0x6e>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b08      	cmp	r3, #8
 80093f0:	d811      	bhi.n	8009416 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80093f6:	4a72      	ldr	r2, [pc, #456]	@ (80095c0 <HAL_SPI_Init+0x23c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d009      	beq.n	8009410 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a70      	ldr	r2, [pc, #448]	@ (80095c4 <HAL_SPI_Init+0x240>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d004      	beq.n	8009410 <HAL_SPI_Init+0x8c>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a6f      	ldr	r2, [pc, #444]	@ (80095c8 <HAL_SPI_Init+0x244>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d104      	bne.n	800941a <HAL_SPI_Init+0x96>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b10      	cmp	r3, #16
 8009414:	d901      	bls.n	800941a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e0cd      	b.n	80095b6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7f8 fb3e 	bl	8001ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f022 0201 	bic.w	r2, r2, #1
 800944a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009456:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009460:	d119      	bne.n	8009496 <HAL_SPI_Init+0x112>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800946a:	d103      	bne.n	8009474 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009470:	2b00      	cmp	r3, #0
 8009472:	d008      	beq.n	8009486 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10c      	bne.n	8009496 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009484:	d107      	bne.n	8009496 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009494:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00f      	beq.n	80094c2 <HAL_SPI_Init+0x13e>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	2b06      	cmp	r3, #6
 80094a8:	d90b      	bls.n	80094c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	e007      	b.n	80094d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	69da      	ldr	r2, [r3, #28]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094da:	431a      	orrs	r2, r3
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	431a      	orrs	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e4:	ea42 0103 	orr.w	r1, r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fc:	431a      	orrs	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	431a      	orrs	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	431a      	orrs	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	431a      	orrs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009526:	431a      	orrs	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009532:	ea42 0103 	orr.w	r1, r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d113      	bne.n	8009572 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800955c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009570:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0201 	bic.w	r2, r2, #1
 8009580:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00a      	beq.n	80095a4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	40013000 	.word	0x40013000
 80095c4:	40003800 	.word	0x40003800
 80095c8:	40003c00 	.word	0x40003c00

080095cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	4613      	mov	r3, r2
 80095da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3320      	adds	r3, #32
 80095e2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095e4:	f7fa fac8 	bl	8003b78 <HAL_GetTick>
 80095e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d001      	beq.n	80095fa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80095f6:	2302      	movs	r3, #2
 80095f8:	e1d1      	b.n	800999e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <HAL_SPI_Transmit+0x3a>
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e1c9      	b.n	800999e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_SPI_Transmit+0x4c>
 8009614:	2302      	movs	r3, #2
 8009616:	e1c2      	b.n	800999e <HAL_SPI_Transmit+0x3d2>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2203      	movs	r2, #3
 8009624:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	88fa      	ldrh	r2, [r7, #6]
 800963a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	88fa      	ldrh	r2, [r7, #6]
 8009642:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009670:	d108      	bne.n	8009684 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	e009      	b.n	8009698 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009696:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	4b96      	ldr	r3, [pc, #600]	@ (80098f8 <HAL_SPI_Transmit+0x32c>)
 80096a0:	4013      	ands	r3, r2
 80096a2:	88f9      	ldrh	r1, [r7, #6]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	6812      	ldr	r2, [r2, #0]
 80096a8:	430b      	orrs	r3, r1
 80096aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0201 	orr.w	r2, r2, #1
 80096ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096c4:	d107      	bne.n	80096d6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	2b0f      	cmp	r3, #15
 80096dc:	d947      	bls.n	800976e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80096de:	e03f      	b.n	8009760 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d114      	bne.n	8009718 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6812      	ldr	r2, [r2, #0]
 80096f8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096fe:	1d1a      	adds	r2, r3, #4
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009716:	e023      	b.n	8009760 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009718:	f7fa fa2e 	bl	8003b78 <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	429a      	cmp	r2, r3
 8009726:	d803      	bhi.n	8009730 <HAL_SPI_Transmit+0x164>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d102      	bne.n	8009736 <HAL_SPI_Transmit+0x16a>
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d114      	bne.n	8009760 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f001 fa0a 	bl	800ab50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009742:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e11e      	b.n	800999e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009766:	b29b      	uxth	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1b9      	bne.n	80096e0 <HAL_SPI_Transmit+0x114>
 800976c:	e0f1      	b.n	8009952 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	2b07      	cmp	r3, #7
 8009774:	f240 80e6 	bls.w	8009944 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009778:	e05d      	b.n	8009836 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	2b02      	cmp	r3, #2
 8009786:	d132      	bne.n	80097ee <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800978e:	b29b      	uxth	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	d918      	bls.n	80097c6 <HAL_SPI_Transmit+0x1fa>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d014      	beq.n	80097c6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6812      	ldr	r2, [r2, #0]
 80097a6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ac:	1d1a      	adds	r2, r3, #4
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	3b02      	subs	r3, #2
 80097bc:	b29a      	uxth	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80097c4:	e037      	b.n	8009836 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ca:	881a      	ldrh	r2, [r3, #0]
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097d4:	1c9a      	adds	r2, r3, #2
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	3b01      	subs	r3, #1
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80097ec:	e023      	b.n	8009836 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097ee:	f7fa f9c3 	bl	8003b78 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d803      	bhi.n	8009806 <HAL_SPI_Transmit+0x23a>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d102      	bne.n	800980c <HAL_SPI_Transmit+0x240>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d114      	bne.n	8009836 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f001 f99f 	bl	800ab50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009818:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e0b3      	b.n	800999e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d19b      	bne.n	800977a <HAL_SPI_Transmit+0x1ae>
 8009842:	e086      	b.n	8009952 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b02      	cmp	r3, #2
 8009850:	d154      	bne.n	80098fc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b03      	cmp	r3, #3
 800985c:	d918      	bls.n	8009890 <HAL_SPI_Transmit+0x2c4>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009862:	2b40      	cmp	r3, #64	@ 0x40
 8009864:	d914      	bls.n	8009890 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6812      	ldr	r2, [r2, #0]
 8009870:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009876:	1d1a      	adds	r2, r3, #4
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009882:	b29b      	uxth	r3, r3
 8009884:	3b04      	subs	r3, #4
 8009886:	b29a      	uxth	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800988e:	e059      	b.n	8009944 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b01      	cmp	r3, #1
 800989a:	d917      	bls.n	80098cc <HAL_SPI_Transmit+0x300>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d013      	beq.n	80098cc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098a8:	881a      	ldrh	r2, [r3, #0]
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098b2:	1c9a      	adds	r2, r3, #2
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b02      	subs	r3, #2
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80098ca:	e03b      	b.n	8009944 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3320      	adds	r3, #32
 80098d6:	7812      	ldrb	r2, [r2, #0]
 80098d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80098f6:	e025      	b.n	8009944 <HAL_SPI_Transmit+0x378>
 80098f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098fc:	f7fa f93c 	bl	8003b78 <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	d803      	bhi.n	8009914 <HAL_SPI_Transmit+0x348>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d102      	bne.n	800991a <HAL_SPI_Transmit+0x34e>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d114      	bne.n	8009944 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f001 f918 	bl	800ab50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009926:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e02c      	b.n	800999e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800994a:	b29b      	uxth	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	f47f af79 	bne.w	8009844 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2200      	movs	r2, #0
 800995a:	2108      	movs	r1, #8
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f001 f997 	bl	800ac90 <SPI_WaitOnFlagUntilTimeout>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d007      	beq.n	8009978 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800996e:	f043 0220 	orr.w	r2, r3, #32
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f001 f8e9 	bl	800ab50 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e000      	b.n	800999e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800999c:	2300      	movs	r3, #0
  }
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop

080099a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08e      	sub	sp, #56	@ 0x38
 80099ac:	af02      	add	r7, sp, #8
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3320      	adds	r3, #32
 80099bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3330      	adds	r3, #48	@ 0x30
 80099c4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ca:	095b      	lsrs	r3, r3, #5
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	3301      	adds	r3, #1
 80099d0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099d2:	f7fa f8d1 	bl	8003b78 <HAL_GetTick>
 80099d6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80099d8:	887b      	ldrh	r3, [r7, #2]
 80099da:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80099dc:	887b      	ldrh	r3, [r7, #2]
 80099de:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d001      	beq.n	80099f0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80099ec:	2302      	movs	r3, #2
 80099ee:	e310      	b.n	800a012 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d005      	beq.n	8009a02 <HAL_SPI_TransmitReceive+0x5a>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <HAL_SPI_TransmitReceive+0x5a>
 80099fc:	887b      	ldrh	r3, [r7, #2]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e305      	b.n	800a012 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d101      	bne.n	8009a14 <HAL_SPI_TransmitReceive+0x6c>
 8009a10:	2302      	movs	r3, #2
 8009a12:	e2fe      	b.n	800a012 <HAL_SPI_TransmitReceive+0x66a>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2205      	movs	r2, #5
 8009a20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	887a      	ldrh	r2, [r7, #2]
 8009a36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	887a      	ldrh	r2, [r7, #2]
 8009a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	887a      	ldrh	r2, [r7, #2]
 8009a4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	887a      	ldrh	r2, [r7, #2]
 8009a54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68da      	ldr	r2, [r3, #12]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009a72:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a70      	ldr	r2, [pc, #448]	@ (8009c3c <HAL_SPI_TransmitReceive+0x294>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d009      	beq.n	8009a92 <HAL_SPI_TransmitReceive+0xea>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a6f      	ldr	r2, [pc, #444]	@ (8009c40 <HAL_SPI_TransmitReceive+0x298>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d004      	beq.n	8009a92 <HAL_SPI_TransmitReceive+0xea>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a6d      	ldr	r2, [pc, #436]	@ (8009c44 <HAL_SPI_TransmitReceive+0x29c>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d102      	bne.n	8009a98 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8009a92:	2310      	movs	r3, #16
 8009a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a96:	e001      	b.n	8009a9c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8009a98:	2308      	movs	r3, #8
 8009a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	4b69      	ldr	r3, [pc, #420]	@ (8009c48 <HAL_SPI_TransmitReceive+0x2a0>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	8879      	ldrh	r1, [r7, #2]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ac8:	d107      	bne.n	8009ada <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	2b0f      	cmp	r3, #15
 8009ae0:	f240 80a2 	bls.w	8009c28 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae6:	089b      	lsrs	r3, r3, #2
 8009ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009aea:	e094      	b.n	8009c16 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d120      	bne.n	8009b3c <HAL_SPI_TransmitReceive+0x194>
 8009afa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d01d      	beq.n	8009b3c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009b00:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009b02:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b06:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d217      	bcs.n	8009b3c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6812      	ldr	r2, [r2, #0]
 8009b16:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b1c:	1d1a      	adds	r2, r3, #4
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b3a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009b44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d065      	beq.n	8009c16 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d118      	bne.n	8009b8a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b62:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b68:	1d1a      	adds	r2, r3, #4
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	3b01      	subs	r3, #1
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b86:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009b88:	e045      	b.n	8009c16 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009b8a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009b8c:	8bfb      	ldrh	r3, [r7, #30]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d21d      	bcs.n	8009bce <HAL_SPI_TransmitReceive+0x226>
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d018      	beq.n	8009bce <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ba4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009ba6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bac:	1d1a      	adds	r2, r3, #4
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bca:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009bcc:	e023      	b.n	8009c16 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bce:	f7f9 ffd3 	bl	8003b78 <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d803      	bhi.n	8009be6 <HAL_SPI_TransmitReceive+0x23e>
 8009bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be4:	d102      	bne.n	8009bec <HAL_SPI_TransmitReceive+0x244>
 8009be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d114      	bne.n	8009c16 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 ffaf 	bl	800ab50 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bf8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e1fd      	b.n	800a012 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009c16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f47f af67 	bne.w	8009aec <HAL_SPI_TransmitReceive+0x144>
 8009c1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f47f af63 	bne.w	8009aec <HAL_SPI_TransmitReceive+0x144>
 8009c26:	e1ce      	b.n	8009fc6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	2b07      	cmp	r3, #7
 8009c2e:	f240 81c2 	bls.w	8009fb6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8009c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c34:	085b      	lsrs	r3, r3, #1
 8009c36:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009c38:	e0c9      	b.n	8009dce <HAL_SPI_TransmitReceive+0x426>
 8009c3a:	bf00      	nop
 8009c3c:	40013000 	.word	0x40013000
 8009c40:	40003800 	.word	0x40003800
 8009c44:	40003c00 	.word	0x40003c00
 8009c48:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d11f      	bne.n	8009c9a <HAL_SPI_TransmitReceive+0x2f2>
 8009c5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01c      	beq.n	8009c9a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009c60:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009c62:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c66:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d216      	bcs.n	8009c9a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c70:	881a      	ldrh	r2, [r3, #0]
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c7a:	1c9a      	adds	r2, r3, #2
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c98:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	695b      	ldr	r3, [r3, #20]
 8009ca0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009ca2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8092 	beq.w	8009dce <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d118      	bne.n	8009cea <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cbc:	6a3a      	ldr	r2, [r7, #32]
 8009cbe:	8812      	ldrh	r2, [r2, #0]
 8009cc0:	b292      	uxth	r2, r2
 8009cc2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cc8:	1c9a      	adds	r2, r3, #2
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ce6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009ce8:	e071      	b.n	8009dce <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009cea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009cec:	8bfb      	ldrh	r3, [r7, #30]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d228      	bcs.n	8009d44 <HAL_SPI_TransmitReceive+0x39c>
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d023      	beq.n	8009d44 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d00:	6a3a      	ldr	r2, [r7, #32]
 8009d02:	8812      	ldrh	r2, [r2, #0]
 8009d04:	b292      	uxth	r2, r2
 8009d06:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d0c:	1c9a      	adds	r2, r3, #2
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d16:	6a3a      	ldr	r2, [r7, #32]
 8009d18:	8812      	ldrh	r2, [r2, #0]
 8009d1a:	b292      	uxth	r2, r2
 8009d1c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d22:	1c9a      	adds	r2, r3, #2
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	3b02      	subs	r3, #2
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d40:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009d42:	e044      	b.n	8009dce <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009d44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d11d      	bne.n	8009d86 <HAL_SPI_TransmitReceive+0x3de>
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d018      	beq.n	8009d86 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d58:	6a3a      	ldr	r2, [r7, #32]
 8009d5a:	8812      	ldrh	r2, [r2, #0]
 8009d5c:	b292      	uxth	r2, r2
 8009d5e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d64:	1c9a      	adds	r2, r3, #2
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d82:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009d84:	e023      	b.n	8009dce <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d86:	f7f9 fef7 	bl	8003b78 <HAL_GetTick>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d803      	bhi.n	8009d9e <HAL_SPI_TransmitReceive+0x3f6>
 8009d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d102      	bne.n	8009da4 <HAL_SPI_TransmitReceive+0x3fc>
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d114      	bne.n	8009dce <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 fed3 	bl	800ab50 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009db0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e121      	b.n	800a012 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009dce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f47f af3b 	bne.w	8009c4c <HAL_SPI_TransmitReceive+0x2a4>
 8009dd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f47f af37 	bne.w	8009c4c <HAL_SPI_TransmitReceive+0x2a4>
 8009dde:	e0f2      	b.n	8009fc6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d121      	bne.n	8009e32 <HAL_SPI_TransmitReceive+0x48a>
 8009dee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d01e      	beq.n	8009e32 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009df4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009df6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d218      	bcs.n	8009e32 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3320      	adds	r3, #32
 8009e0a:	7812      	ldrb	r2, [r2, #0]
 8009e0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e30:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009e3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 80ba 	beq.w	8009fb6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d11b      	bne.n	8009e88 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	b2d2      	uxtb	r2, r2
 8009e60:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	3b01      	subs	r3, #1
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e84:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009e86:	e096      	b.n	8009fb6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009e88:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009e8a:	8bfb      	ldrh	r3, [r7, #30]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d24a      	bcs.n	8009f26 <HAL_SPI_TransmitReceive+0x57e>
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d045      	beq.n	8009f26 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ea6:	7812      	ldrb	r2, [r2, #0]
 8009ea8:	b2d2      	uxtb	r2, r2
 8009eaa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ec2:	7812      	ldrb	r2, [r2, #0]
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ede:	7812      	ldrb	r2, [r2, #0]
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009efa:	7812      	ldrb	r2, [r2, #0]
 8009efc:	b2d2      	uxtb	r2, r2
 8009efe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	3b04      	subs	r3, #4
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f22:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009f24:	e047      	b.n	8009fb6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009f26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d820      	bhi.n	8009f6e <HAL_SPI_TransmitReceive+0x5c6>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d01b      	beq.n	8009f6e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f42:	7812      	ldrb	r2, [r2, #0]
 8009f44:	b2d2      	uxtb	r2, r2
 8009f46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009f6c:	e023      	b.n	8009fb6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f6e:	f7f9 fe03 	bl	8003b78 <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d803      	bhi.n	8009f86 <HAL_SPI_TransmitReceive+0x5de>
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f84:	d102      	bne.n	8009f8c <HAL_SPI_TransmitReceive+0x5e4>
 8009f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d114      	bne.n	8009fb6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f000 fddf 	bl	800ab50 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e02d      	b.n	800a012 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009fb6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f47f af11 	bne.w	8009de0 <HAL_SPI_TransmitReceive+0x438>
 8009fbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f47f af0d 	bne.w	8009de0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2108      	movs	r1, #8
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 fe5d 	bl	800ac90 <SPI_WaitOnFlagUntilTimeout>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d007      	beq.n	8009fec <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fe2:	f043 0220 	orr.w	r2, r3, #32
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 fdaf 	bl	800ab50 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e000      	b.n	800a012 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800a010:	2300      	movs	r3, #0
  }
}
 800a012:	4618      	mov	r0, r3
 800a014:	3730      	adds	r7, #48	@ 0x30
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop

0800a01c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	4613      	mov	r3, r2
 800a028:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b01      	cmp	r3, #1
 800a034:	d001      	beq.n	800a03a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800a036:	2302      	movs	r3, #2
 800a038:	e126      	b.n	800a288 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <HAL_SPI_Transmit_DMA+0x2a>
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e11e      	b.n	800a288 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a050:	2b01      	cmp	r3, #1
 800a052:	d101      	bne.n	800a058 <HAL_SPI_Transmit_DMA+0x3c>
 800a054:	2302      	movs	r3, #2
 800a056:	e117      	b.n	800a288 <HAL_SPI_Transmit_DMA+0x26c>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2203      	movs	r2, #3
 800a064:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	88fa      	ldrh	r2, [r7, #6]
 800a07a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	88fa      	ldrh	r2, [r7, #6]
 800a082:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a0b0:	d108      	bne.n	800a0c4 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	e009      	b.n	800a0d8 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a0d6:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	2b0f      	cmp	r3, #15
 800a0de:	d905      	bls.n	800a0ec <HAL_SPI_Transmit_DMA+0xd0>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0ea:	d10f      	bne.n	800a10c <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a0f0:	2b07      	cmp	r3, #7
 800a0f2:	d911      	bls.n	800a118 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0fe:	d00b      	beq.n	800a118 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a104:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a106:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a10a:	d005      	beq.n	800a118 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e0b7      	b.n	800a288 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	2b07      	cmp	r3, #7
 800a11e:	d820      	bhi.n	800a162 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a12a:	d109      	bne.n	800a140 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a132:	b29b      	uxth	r3, r3
 800a134:	3301      	adds	r3, #1
 800a136:	105b      	asrs	r3, r3, #1
 800a138:	b29a      	uxth	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a14a:	d11e      	bne.n	800a18a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a152:	b29b      	uxth	r3, r3
 800a154:	3303      	adds	r3, #3
 800a156:	109b      	asrs	r3, r3, #2
 800a158:	b29a      	uxth	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a160:	e013      	b.n	800a18a <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	2b0f      	cmp	r3, #15
 800a168:	d80f      	bhi.n	800a18a <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a174:	d109      	bne.n	800a18a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	3301      	adds	r3, #1
 800a180:	105b      	asrs	r3, r3, #1
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a18e:	4a40      	ldr	r2, [pc, #256]	@ (800a290 <HAL_SPI_Transmit_DMA+0x274>)
 800a190:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a196:	4a3f      	ldr	r2, [pc, #252]	@ (800a294 <HAL_SPI_Transmit_DMA+0x278>)
 800a198:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a19e:	4a3e      	ldr	r2, [pc, #248]	@ (800a298 <HAL_SPI_Transmit_DMA+0x27c>)
 800a1a0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a1b8:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3320      	adds	r3, #32
 800a1ca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a1d4:	f7fa f9e0 	bl	8004598 <HAL_DMA_Start_IT>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d011      	beq.n	800a202 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1e4:	f043 0210 	orr.w	r2, r3, #16
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e042      	b.n	800a288 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a20c:	d108      	bne.n	800a220 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6859      	ldr	r1, [r3, #4]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	4b20      	ldr	r3, [pc, #128]	@ (800a29c <HAL_SPI_Transmit_DMA+0x280>)
 800a21a:	400b      	ands	r3, r1
 800a21c:	6053      	str	r3, [r2, #4]
 800a21e:	e009      	b.n	800a234 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	4b1d      	ldr	r3, [pc, #116]	@ (800a29c <HAL_SPI_Transmit_DMA+0x280>)
 800a228:	4013      	ands	r3, r2
 800a22a:	88f9      	ldrh	r1, [r7, #6]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	6812      	ldr	r2, [r2, #0]
 800a230:	430b      	orrs	r3, r1
 800a232:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689a      	ldr	r2, [r3, #8]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a242:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	691a      	ldr	r2, [r3, #16]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800a252:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0201 	orr.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a26c:	d107      	bne.n	800a27e <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a27c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	0800aa9d 	.word	0x0800aa9d
 800a294:	0800aa11 	.word	0x0800aa11
 800a298:	0800aad5 	.word	0x0800aad5
 800a29c:	ffff0000 	.word	0xffff0000

0800a2a0 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
 800a2ac:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d001      	beq.n	800a2be <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e19c      	b.n	800a5f8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <HAL_SPI_TransmitReceive_DMA+0x30>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <HAL_SPI_TransmitReceive_DMA+0x30>
 800a2ca:	887b      	ldrh	r3, [r7, #2]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e191      	b.n	800a5f8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_SPI_TransmitReceive_DMA+0x42>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e18a      	b.n	800a5f8 <HAL_SPI_TransmitReceive_DMA+0x358>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2205      	movs	r2, #5
 800a2ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	887a      	ldrh	r2, [r7, #2]
 800a304:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	887a      	ldrh	r2, [r7, #2]
 800a30c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	887a      	ldrh	r2, [r7, #2]
 800a31a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	887a      	ldrh	r2, [r7, #2]
 800a322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a340:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a350:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	2b0f      	cmp	r3, #15
 800a358:	d90b      	bls.n	800a372 <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a35e:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800a360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a364:	d121      	bne.n	800a3aa <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a36a:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800a36c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a370:	d11b      	bne.n	800a3aa <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800a376:	2b07      	cmp	r3, #7
 800a378:	d91d      	bls.n	800a3b6 <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a37e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800a380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a384:	d005      	beq.n	800a392 <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a38a:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a38c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a390:	d10b      	bne.n	800a3aa <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a396:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800a398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a39c:	d00b      	beq.n	800a3b6 <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3a2:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a3a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3a8:	d005      	beq.n	800a3b6 <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e120      	b.n	800a5f8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	2b07      	cmp	r3, #7
 800a3bc:	d840      	bhi.n	800a440 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3c8:	d109      	bne.n	800a3de <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	105b      	asrs	r3, r3, #1
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3e8:	d109      	bne.n	800a3fe <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3303      	adds	r3, #3
 800a3f4:	109b      	asrs	r3, r3, #2
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a408:	d109      	bne.n	800a41e <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a410:	b29b      	uxth	r3, r3
 800a412:	3301      	adds	r3, #1
 800a414:	105b      	asrs	r3, r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a428:	d12e      	bne.n	800a488 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a430:	b29b      	uxth	r3, r3
 800a432:	3303      	adds	r3, #3
 800a434:	109b      	asrs	r3, r3, #2
 800a436:	b29a      	uxth	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a43e:	e023      	b.n	800a488 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	2b0f      	cmp	r3, #15
 800a446:	d81f      	bhi.n	800a488 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a452:	d109      	bne.n	800a468 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	3301      	adds	r3, #1
 800a45e:	105b      	asrs	r3, r3, #1
 800a460:	b29a      	uxth	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a472:	d109      	bne.n	800a488 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	3301      	adds	r3, #1
 800a47e:	105b      	asrs	r3, r3, #1
 800a480:	b29a      	uxth	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a48c:	4a5c      	ldr	r2, [pc, #368]	@ (800a600 <HAL_SPI_TransmitReceive_DMA+0x360>)
 800a48e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a494:	4a5b      	ldr	r2, [pc, #364]	@ (800a604 <HAL_SPI_TransmitReceive_DMA+0x364>)
 800a496:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a49c:	4a5a      	ldr	r2, [pc, #360]	@ (800a608 <HAL_SPI_TransmitReceive_DMA+0x368>)
 800a49e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3330      	adds	r3, #48	@ 0x30
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4b8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4c0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a4c2:	f7fa f869 	bl	8004598 <HAL_DMA_Start_IT>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d011      	beq.n	800a4f0 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4d2:	f043 0210 	orr.w	r2, r3, #16
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e083      	b.n	800a5f8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689a      	ldr	r2, [r3, #8]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a4fe:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a504:	2200      	movs	r2, #0
 800a506:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a50c:	2200      	movs	r2, #0
 800a50e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a514:	2200      	movs	r2, #0
 800a516:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a51c:	4a3a      	ldr	r2, [pc, #232]	@ (800a608 <HAL_SPI_TransmitReceive_DMA+0x368>)
 800a51e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a528:	4619      	mov	r1, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3320      	adds	r3, #32
 800a530:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a538:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a53a:	f7fa f82d 	bl	8004598 <HAL_DMA_Start_IT>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d016      	beq.n	800a572 <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fa fa8f 	bl	8004a6c <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a554:	f043 0210 	orr.w	r2, r3, #16
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e042      	b.n	800a5f8 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a576:	69db      	ldr	r3, [r3, #28]
 800a578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a57c:	d108      	bne.n	800a590 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6859      	ldr	r1, [r3, #4]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	4b20      	ldr	r3, [pc, #128]	@ (800a60c <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800a58a:	400b      	ands	r3, r1
 800a58c:	6053      	str	r3, [r2, #4]
 800a58e:	e009      	b.n	800a5a4 <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	4b1d      	ldr	r3, [pc, #116]	@ (800a60c <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800a598:	4013      	ands	r3, r2
 800a59a:	8879      	ldrh	r1, [r7, #2]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	6812      	ldr	r2, [r2, #0]
 800a5a0:	430b      	orrs	r3, r1
 800a5a2:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	689a      	ldr	r2, [r3, #8]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a5b2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	691a      	ldr	r2, [r3, #16]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800a5c2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0201 	orr.w	r2, r2, #1
 800a5d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5dc:	d107      	bne.n	800a5ee <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5ec:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	0800aab9 	.word	0x0800aab9
 800a604:	0800aa57 	.word	0x0800aa57
 800a608:	0800aad5 	.word	0x0800aad5
 800a60c:	ffff0000 	.word	0xffff0000

0800a610 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08a      	sub	sp, #40	@ 0x28
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a628:	6a3a      	ldr	r2, [r7, #32]
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	4013      	ands	r3, r2
 800a62e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a638:	2300      	movs	r3, #0
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a642:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3330      	adds	r3, #48	@ 0x30
 800a64a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a652:	2b00      	cmp	r3, #0
 800a654:	d010      	beq.n	800a678 <HAL_SPI_IRQHandler+0x68>
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	f003 0308 	and.w	r3, r3, #8
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00b      	beq.n	800a678 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	699a      	ldr	r2, [r3, #24]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a66e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f9c3 	bl	800a9fc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a676:	e192      	b.n	800a99e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d113      	bne.n	800a6aa <HAL_SPI_IRQHandler+0x9a>
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	f003 0320 	and.w	r3, r3, #32
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10e      	bne.n	800a6aa <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	4798      	blx	r3
    handled = 1UL;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10f      	bne.n	800a6d4 <HAL_SPI_IRQHandler+0xc4>
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00a      	beq.n	800a6d4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d105      	bne.n	800a6d4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	4798      	blx	r3
    handled = 1UL;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10f      	bne.n	800a6fe <HAL_SPI_IRQHandler+0xee>
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	f003 0302 	and.w	r3, r3, #2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d105      	bne.n	800a6fe <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	4798      	blx	r3
    handled = 1UL;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	f040 8147 	bne.w	800a994 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	f003 0308 	and.w	r3, r3, #8
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 808b 	beq.w	800a828 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	699a      	ldr	r2, [r3, #24]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f042 0208 	orr.w	r2, r2, #8
 800a720:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	699a      	ldr	r2, [r3, #24]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f042 0210 	orr.w	r2, r2, #16
 800a730:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	699a      	ldr	r2, [r3, #24]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a740:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	691a      	ldr	r2, [r3, #16]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0208 	bic.w	r2, r2, #8
 800a750:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d13d      	bne.n	800a7dc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a760:	e036      	b.n	800a7d0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	2b0f      	cmp	r3, #15
 800a768:	d90b      	bls.n	800a782 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a772:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a774:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a77a:	1d1a      	adds	r2, r3, #4
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	665a      	str	r2, [r3, #100]	@ 0x64
 800a780:	e01d      	b.n	800a7be <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	2b07      	cmp	r3, #7
 800a788:	d90b      	bls.n	800a7a2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	8812      	ldrh	r2, [r2, #0]
 800a792:	b292      	uxth	r2, r2
 800a794:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a79a:	1c9a      	adds	r2, r3, #2
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	665a      	str	r2, [r3, #100]	@ 0x64
 800a7a0:	e00d      	b.n	800a7be <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7ae:	7812      	ldrb	r2, [r2, #0]
 800a7b0:	b2d2      	uxtb	r2, r2
 800a7b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1c2      	bne.n	800a762 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f9b7 	bl	800ab50 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d003      	beq.n	800a7fc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f8f7 	bl	800a9e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a7fa:	e0d0      	b.n	800a99e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a7fc:	7cfb      	ldrb	r3, [r7, #19]
 800a7fe:	2b05      	cmp	r3, #5
 800a800:	d103      	bne.n	800a80a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7f6 fd98 	bl	8001338 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a808:	e0c6      	b.n	800a998 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a80a:	7cfb      	ldrb	r3, [r7, #19]
 800a80c:	2b04      	cmp	r3, #4
 800a80e:	d103      	bne.n	800a818 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 f8cb 	bl	800a9ac <HAL_SPI_RxCpltCallback>
    return;
 800a816:	e0bf      	b.n	800a998 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a818:	7cfb      	ldrb	r3, [r7, #19]
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	f040 80bc 	bne.w	800a998 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7f6 fd61 	bl	80012e8 <HAL_SPI_TxCpltCallback>
    return;
 800a826:	e0b7      	b.n	800a998 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 80b5 	beq.w	800a99e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00f      	beq.n	800a85e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a844:	f043 0204 	orr.w	r2, r3, #4
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a85c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00f      	beq.n	800a888 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a86e:	f043 0201 	orr.w	r2, r3, #1
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	699a      	ldr	r2, [r3, #24]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a886:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00f      	beq.n	800a8b2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a898:	f043 0208 	orr.w	r2, r3, #8
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	699a      	ldr	r2, [r3, #24]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8b0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	f003 0320 	and.w	r3, r3, #32
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00f      	beq.n	800a8dc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	699a      	ldr	r2, [r3, #24]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f042 0220 	orr.w	r2, r2, #32
 800a8da:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d05a      	beq.n	800a99c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f022 0201 	bic.w	r2, r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6919      	ldr	r1, [r3, #16]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	4b28      	ldr	r3, [pc, #160]	@ (800a9a4 <HAL_SPI_IRQHandler+0x394>)
 800a902:	400b      	ands	r3, r1
 800a904:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a90c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a910:	d138      	bne.n	800a984 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a920:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a926:	2b00      	cmp	r3, #0
 800a928:	d013      	beq.n	800a952 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a92e:	4a1e      	ldr	r2, [pc, #120]	@ (800a9a8 <HAL_SPI_IRQHandler+0x398>)
 800a930:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a936:	4618      	mov	r0, r3
 800a938:	f7fa fbb6 	bl	80050a8 <HAL_DMA_Abort_IT>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d007      	beq.n	800a952 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a948:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a956:	2b00      	cmp	r3, #0
 800a958:	d020      	beq.n	800a99c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a95e:	4a12      	ldr	r2, [pc, #72]	@ (800a9a8 <HAL_SPI_IRQHandler+0x398>)
 800a960:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a966:	4618      	mov	r0, r3
 800a968:	f7fa fb9e 	bl	80050a8 <HAL_DMA_Abort_IT>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d014      	beq.n	800a99c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a978:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a982:	e00b      	b.n	800a99c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f82b 	bl	800a9e8 <HAL_SPI_ErrorCallback>
    return;
 800a992:	e003      	b.n	800a99c <HAL_SPI_IRQHandler+0x38c>
    return;
 800a994:	bf00      	nop
 800a996:	e002      	b.n	800a99e <HAL_SPI_IRQHandler+0x38e>
    return;
 800a998:	bf00      	nop
 800a99a:	e000      	b.n	800a99e <HAL_SPI_IRQHandler+0x38e>
    return;
 800a99c:	bf00      	nop
  }
}
 800a99e:	3728      	adds	r7, #40	@ 0x28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	fffffc94 	.word	0xfffffc94
 800a9a8:	0800ab1b 	.word	0x0800ab1b

0800a9ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa1c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b07      	cmp	r3, #7
 800aa28:	d011      	beq.n	800aa4e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa34:	d103      	bne.n	800aa3e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7f6 fc56 	bl	80012e8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800aa3c:	e007      	b.n	800aa4e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	691a      	ldr	r2, [r3, #16]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f042 0208 	orr.w	r2, r2, #8
 800aa4c:	611a      	str	r2, [r3, #16]
}
 800aa4e:	bf00      	nop
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa62:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b07      	cmp	r3, #7
 800aa6e:	d011      	beq.n	800aa94 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa7a:	d103      	bne.n	800aa84 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7f6 fc5b 	bl	8001338 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800aa82:	e007      	b.n	800aa94 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	691a      	ldr	r2, [r3, #16]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f042 0208 	orr.w	r2, r2, #8
 800aa92:	611a      	str	r2, [r3, #16]
}
 800aa94:	bf00      	nop
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa8:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7ff ff88 	bl	800a9c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aab0:	bf00      	nop
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac4:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7ff ff84 	bl	800a9d4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aacc:	bf00      	nop
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae0:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7fb fc50 	bl	8006388 <HAL_DMA_GetError>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d011      	beq.n	800ab12 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 f82e 	bl	800ab50 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aafa:	f043 0210 	orr.w	r2, r3, #16
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f7ff ff6b 	bl	800a9e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab26:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f7ff ff51 	bl	800a9e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	699a      	ldr	r2, [r3, #24]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f042 0208 	orr.w	r2, r2, #8
 800ab6e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	699a      	ldr	r2, [r3, #24]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0210 	orr.w	r2, r2, #16
 800ab7e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f022 0201 	bic.w	r2, r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6919      	ldr	r1, [r3, #16]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	4b3c      	ldr	r3, [pc, #240]	@ (800ac8c <SPI_CloseTransfer+0x13c>)
 800ab9c:	400b      	ands	r3, r1
 800ab9e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689a      	ldr	r2, [r3, #8]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800abae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b04      	cmp	r3, #4
 800abba:	d014      	beq.n	800abe6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f003 0320 	and.w	r3, r3, #32
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00f      	beq.n	800abe6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abcc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	699a      	ldr	r2, [r3, #24]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f042 0220 	orr.w	r2, r2, #32
 800abe4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d014      	beq.n	800ac1c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00f      	beq.n	800ac1c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac02:	f043 0204 	orr.w	r2, r3, #4
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	699a      	ldr	r2, [r3, #24]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac1a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00f      	beq.n	800ac46 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac2c:	f043 0201 	orr.w	r2, r3, #1
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	699a      	ldr	r2, [r3, #24]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac44:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00f      	beq.n	800ac70 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac56:	f043 0208 	orr.w	r2, r3, #8
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	699a      	ldr	r2, [r3, #24]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac6e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ac80:	bf00      	nop
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	fffffc90 	.word	0xfffffc90

0800ac90 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aca0:	e010      	b.n	800acc4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aca2:	f7f8 ff69 	bl	8003b78 <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d803      	bhi.n	800acba <SPI_WaitOnFlagUntilTimeout+0x2a>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb8:	d102      	bne.n	800acc0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e00f      	b.n	800ace4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	695a      	ldr	r2, [r3, #20]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4013      	ands	r3, r2
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	bf0c      	ite	eq
 800acd4:	2301      	moveq	r3, #1
 800acd6:	2300      	movne	r3, #0
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d0df      	beq.n	800aca2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acf8:	095b      	lsrs	r3, r3, #5
 800acfa:	3301      	adds	r3, #1
 800acfc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	3301      	adds	r3, #1
 800ad04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	3307      	adds	r3, #7
 800ad0a:	08db      	lsrs	r3, r3, #3
 800ad0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	fb02 f303 	mul.w	r3, r2, r3
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ad22:	b480      	push	{r7}
 800ad24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ad26:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800ad32:	b480      	push	{r7}
 800ad34:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800ad36:	bf00      	nop
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	4a08      	ldr	r2, [pc, #32]	@ (800ad70 <disk_status+0x30>)
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	79fa      	ldrb	r2, [r7, #7]
 800ad58:	4905      	ldr	r1, [pc, #20]	@ (800ad70 <disk_status+0x30>)
 800ad5a:	440a      	add	r2, r1
 800ad5c:	7a12      	ldrb	r2, [r2, #8]
 800ad5e:	4610      	mov	r0, r2
 800ad60:	4798      	blx	r3
 800ad62:	4603      	mov	r3, r0
 800ad64:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	24028dfc 	.word	0x24028dfc

0800ad74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ad82:	79fb      	ldrb	r3, [r7, #7]
 800ad84:	4a0e      	ldr	r2, [pc, #56]	@ (800adc0 <disk_initialize+0x4c>)
 800ad86:	5cd3      	ldrb	r3, [r2, r3]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d114      	bne.n	800adb6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	4a0c      	ldr	r2, [pc, #48]	@ (800adc0 <disk_initialize+0x4c>)
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	79fa      	ldrb	r2, [r7, #7]
 800ad9a:	4909      	ldr	r1, [pc, #36]	@ (800adc0 <disk_initialize+0x4c>)
 800ad9c:	440a      	add	r2, r1
 800ad9e:	7a12      	ldrb	r2, [r2, #8]
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d103      	bne.n	800adb6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	4a03      	ldr	r2, [pc, #12]	@ (800adc0 <disk_initialize+0x4c>)
 800adb2:	2101      	movs	r1, #1
 800adb4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	24028dfc 	.word	0x24028dfc

0800adc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800adc4:	b590      	push	{r4, r7, lr}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
 800adce:	603b      	str	r3, [r7, #0]
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4a0a      	ldr	r2, [pc, #40]	@ (800ae00 <disk_read+0x3c>)
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	689c      	ldr	r4, [r3, #8]
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	4a07      	ldr	r2, [pc, #28]	@ (800ae00 <disk_read+0x3c>)
 800ade4:	4413      	add	r3, r2
 800ade6:	7a18      	ldrb	r0, [r3, #8]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	68b9      	ldr	r1, [r7, #8]
 800adee:	47a0      	blx	r4
 800adf0:	4603      	mov	r3, r0
 800adf2:	75fb      	strb	r3, [r7, #23]
  return res;
 800adf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	371c      	adds	r7, #28
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd90      	pop	{r4, r7, pc}
 800adfe:	bf00      	nop
 800ae00:	24028dfc 	.word	0x24028dfc

0800ae04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ae04:	b590      	push	{r4, r7, lr}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60b9      	str	r1, [r7, #8]
 800ae0c:	607a      	str	r2, [r7, #4]
 800ae0e:	603b      	str	r3, [r7, #0]
 800ae10:	4603      	mov	r3, r0
 800ae12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	4a0a      	ldr	r2, [pc, #40]	@ (800ae40 <disk_write+0x3c>)
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	68dc      	ldr	r4, [r3, #12]
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	4a07      	ldr	r2, [pc, #28]	@ (800ae40 <disk_write+0x3c>)
 800ae24:	4413      	add	r3, r2
 800ae26:	7a18      	ldrb	r0, [r3, #8]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	47a0      	blx	r4
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	371c      	adds	r7, #28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd90      	pop	{r4, r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	24028dfc 	.word	0x24028dfc

0800ae44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	603a      	str	r2, [r7, #0]
 800ae4e:	71fb      	strb	r3, [r7, #7]
 800ae50:	460b      	mov	r3, r1
 800ae52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ae54:	79fb      	ldrb	r3, [r7, #7]
 800ae56:	4a09      	ldr	r2, [pc, #36]	@ (800ae7c <disk_ioctl+0x38>)
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	79fa      	ldrb	r2, [r7, #7]
 800ae62:	4906      	ldr	r1, [pc, #24]	@ (800ae7c <disk_ioctl+0x38>)
 800ae64:	440a      	add	r2, r1
 800ae66:	7a10      	ldrb	r0, [r2, #8]
 800ae68:	79b9      	ldrb	r1, [r7, #6]
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	4798      	blx	r3
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73fb      	strb	r3, [r7, #15]
  return res;
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	24028dfc 	.word	0x24028dfc

0800ae80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ae90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ae94:	021b      	lsls	r3, r3, #8
 800ae96:	b21a      	sxth	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	b21b      	sxth	r3, r3
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	b21b      	sxth	r3, r3
 800aea2:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aea4:	89fb      	ldrh	r3, [r7, #14]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b085      	sub	sp, #20
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3303      	adds	r3, #3
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	021b      	lsls	r3, r3, #8
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	3202      	adds	r2, #2
 800aeca:	7812      	ldrb	r2, [r2, #0]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	021b      	lsls	r3, r3, #8
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	3201      	adds	r2, #1
 800aed8:	7812      	ldrb	r2, [r2, #0]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	021b      	lsls	r3, r3, #8
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	7812      	ldrb	r2, [r2, #0]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
	return rv;
 800aeea:	68fb      	ldr	r3, [r7, #12]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	607a      	str	r2, [r7, #4]
 800af0a:	887a      	ldrh	r2, [r7, #2]
 800af0c:	b2d2      	uxtb	r2, r2
 800af0e:	701a      	strb	r2, [r3, #0]
 800af10:	887b      	ldrh	r3, [r7, #2]
 800af12:	0a1b      	lsrs	r3, r3, #8
 800af14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	607a      	str	r2, [r7, #4]
 800af1c:	887a      	ldrh	r2, [r7, #2]
 800af1e:	b2d2      	uxtb	r2, r2
 800af20:	701a      	strb	r2, [r3, #0]
}
 800af22:	bf00      	nop
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800af2e:	b480      	push	{r7}
 800af30:	b083      	sub	sp, #12
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	1c5a      	adds	r2, r3, #1
 800af3c:	607a      	str	r2, [r7, #4]
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	b2d2      	uxtb	r2, r2
 800af42:	701a      	strb	r2, [r3, #0]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	0a1b      	lsrs	r3, r3, #8
 800af48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	0a1b      	lsrs	r3, r3, #8
 800af5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	1c5a      	adds	r2, r3, #1
 800af60:	607a      	str	r2, [r7, #4]
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	b2d2      	uxtb	r2, r2
 800af66:	701a      	strb	r2, [r3, #0]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	0a1b      	lsrs	r3, r3, #8
 800af6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	1c5a      	adds	r2, r3, #1
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	b2d2      	uxtb	r2, r2
 800af78:	701a      	strb	r2, [r3, #0]
}
 800af7a:	bf00      	nop
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800af86:	b480      	push	{r7}
 800af88:	b087      	sub	sp, #28
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	60b9      	str	r1, [r7, #8]
 800af90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00d      	beq.n	800afbc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	1c53      	adds	r3, r2, #1
 800afa4:	613b      	str	r3, [r7, #16]
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	1c59      	adds	r1, r3, #1
 800afaa:	6179      	str	r1, [r7, #20]
 800afac:	7812      	ldrb	r2, [r2, #0]
 800afae:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	607b      	str	r3, [r7, #4]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1f1      	bne.n	800afa0 <mem_cpy+0x1a>
	}
}
 800afbc:	bf00      	nop
 800afbe:	371c      	adds	r7, #28
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	617a      	str	r2, [r7, #20]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	b2d2      	uxtb	r2, r2
 800afe2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	607b      	str	r3, [r7, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1f3      	bne.n	800afd8 <mem_set+0x10>
}
 800aff0:	bf00      	nop
 800aff2:	bf00      	nop
 800aff4:	371c      	adds	r7, #28
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800affe:	b480      	push	{r7}
 800b000:	b089      	sub	sp, #36	@ 0x24
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	61fb      	str	r3, [r7, #28]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b012:	2300      	movs	r3, #0
 800b014:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	61fa      	str	r2, [r7, #28]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	4619      	mov	r1, r3
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	61ba      	str	r2, [r7, #24]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	1acb      	subs	r3, r1, r3
 800b02a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3b01      	subs	r3, #1
 800b030:	607b      	str	r3, [r7, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <mem_cmp+0x40>
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0eb      	beq.n	800b016 <mem_cmp+0x18>

	return r;
 800b03e:	697b      	ldr	r3, [r7, #20]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3724      	adds	r7, #36	@ 0x24
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b056:	e002      	b.n	800b05e <chk_chr+0x12>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3301      	adds	r3, #1
 800b05c:	607b      	str	r3, [r7, #4]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d005      	beq.n	800b072 <chk_chr+0x26>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	461a      	mov	r2, r3
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	4293      	cmp	r3, r2
 800b070:	d1f2      	bne.n	800b058 <chk_chr+0xc>
	return *str;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	781b      	ldrb	r3, [r3, #0]
}
 800b076:	4618      	mov	r0, r3
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
	...

0800b084 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b08e:	2300      	movs	r3, #0
 800b090:	60bb      	str	r3, [r7, #8]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	e029      	b.n	800b0ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b098:	4a27      	ldr	r2, [pc, #156]	@ (800b138 <chk_lock+0xb4>)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	4413      	add	r3, r2
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d01d      	beq.n	800b0e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b0a6:	4a24      	ldr	r2, [pc, #144]	@ (800b138 <chk_lock+0xb4>)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	011b      	lsls	r3, r3, #4
 800b0ac:	4413      	add	r3, r2
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d116      	bne.n	800b0e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b0b8:	4a1f      	ldr	r2, [pc, #124]	@ (800b138 <chk_lock+0xb4>)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	011b      	lsls	r3, r3, #4
 800b0be:	4413      	add	r3, r2
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d10c      	bne.n	800b0e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b0cc:	4a1a      	ldr	r2, [pc, #104]	@ (800b138 <chk_lock+0xb4>)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	4413      	add	r3, r2
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d102      	bne.n	800b0e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b0e0:	e007      	b.n	800b0f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d9d2      	bls.n	800b098 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d109      	bne.n	800b10c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d102      	bne.n	800b104 <chk_lock+0x80>
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b02      	cmp	r3, #2
 800b102:	d101      	bne.n	800b108 <chk_lock+0x84>
 800b104:	2300      	movs	r3, #0
 800b106:	e010      	b.n	800b12a <chk_lock+0xa6>
 800b108:	2312      	movs	r3, #18
 800b10a:	e00e      	b.n	800b12a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d108      	bne.n	800b124 <chk_lock+0xa0>
 800b112:	4a09      	ldr	r2, [pc, #36]	@ (800b138 <chk_lock+0xb4>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	011b      	lsls	r3, r3, #4
 800b118:	4413      	add	r3, r2
 800b11a:	330c      	adds	r3, #12
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b122:	d101      	bne.n	800b128 <chk_lock+0xa4>
 800b124:	2310      	movs	r3, #16
 800b126:	e000      	b.n	800b12a <chk_lock+0xa6>
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	24028ddc 	.word	0x24028ddc

0800b13c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b142:	2300      	movs	r3, #0
 800b144:	607b      	str	r3, [r7, #4]
 800b146:	e002      	b.n	800b14e <enq_lock+0x12>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3301      	adds	r3, #1
 800b14c:	607b      	str	r3, [r7, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d806      	bhi.n	800b162 <enq_lock+0x26>
 800b154:	4a09      	ldr	r2, [pc, #36]	@ (800b17c <enq_lock+0x40>)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	011b      	lsls	r3, r3, #4
 800b15a:	4413      	add	r3, r2
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1f2      	bne.n	800b148 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b02      	cmp	r3, #2
 800b166:	bf14      	ite	ne
 800b168:	2301      	movne	r3, #1
 800b16a:	2300      	moveq	r3, #0
 800b16c:	b2db      	uxtb	r3, r3
}
 800b16e:	4618      	mov	r0, r3
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	24028ddc 	.word	0x24028ddc

0800b180 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	e01f      	b.n	800b1d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b190:	4a41      	ldr	r2, [pc, #260]	@ (800b298 <inc_lock+0x118>)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	011b      	lsls	r3, r3, #4
 800b196:	4413      	add	r3, r2
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d113      	bne.n	800b1ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b1a2:	4a3d      	ldr	r2, [pc, #244]	@ (800b298 <inc_lock+0x118>)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	011b      	lsls	r3, r3, #4
 800b1a8:	4413      	add	r3, r2
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d109      	bne.n	800b1ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b1b6:	4a38      	ldr	r2, [pc, #224]	@ (800b298 <inc_lock+0x118>)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	4413      	add	r3, r2
 800b1be:	3308      	adds	r3, #8
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d006      	beq.n	800b1d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d9dc      	bls.n	800b190 <inc_lock+0x10>
 800b1d6:	e000      	b.n	800b1da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b1d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d132      	bne.n	800b246 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	e002      	b.n	800b1ec <inc_lock+0x6c>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d806      	bhi.n	800b200 <inc_lock+0x80>
 800b1f2:	4a29      	ldr	r2, [pc, #164]	@ (800b298 <inc_lock+0x118>)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	011b      	lsls	r3, r3, #4
 800b1f8:	4413      	add	r3, r2
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1f2      	bne.n	800b1e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b02      	cmp	r3, #2
 800b204:	d101      	bne.n	800b20a <inc_lock+0x8a>
 800b206:	2300      	movs	r3, #0
 800b208:	e040      	b.n	800b28c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	4922      	ldr	r1, [pc, #136]	@ (800b298 <inc_lock+0x118>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	011b      	lsls	r3, r3, #4
 800b214:	440b      	add	r3, r1
 800b216:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	491e      	ldr	r1, [pc, #120]	@ (800b298 <inc_lock+0x118>)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	011b      	lsls	r3, r3, #4
 800b222:	440b      	add	r3, r1
 800b224:	3304      	adds	r3, #4
 800b226:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	695a      	ldr	r2, [r3, #20]
 800b22c:	491a      	ldr	r1, [pc, #104]	@ (800b298 <inc_lock+0x118>)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	011b      	lsls	r3, r3, #4
 800b232:	440b      	add	r3, r1
 800b234:	3308      	adds	r3, #8
 800b236:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b238:	4a17      	ldr	r2, [pc, #92]	@ (800b298 <inc_lock+0x118>)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	011b      	lsls	r3, r3, #4
 800b23e:	4413      	add	r3, r2
 800b240:	330c      	adds	r3, #12
 800b242:	2200      	movs	r2, #0
 800b244:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d009      	beq.n	800b260 <inc_lock+0xe0>
 800b24c:	4a12      	ldr	r2, [pc, #72]	@ (800b298 <inc_lock+0x118>)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	011b      	lsls	r3, r3, #4
 800b252:	4413      	add	r3, r2
 800b254:	330c      	adds	r3, #12
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <inc_lock+0xe0>
 800b25c:	2300      	movs	r3, #0
 800b25e:	e015      	b.n	800b28c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d108      	bne.n	800b278 <inc_lock+0xf8>
 800b266:	4a0c      	ldr	r2, [pc, #48]	@ (800b298 <inc_lock+0x118>)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	011b      	lsls	r3, r3, #4
 800b26c:	4413      	add	r3, r2
 800b26e:	330c      	adds	r3, #12
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	3301      	adds	r3, #1
 800b274:	b29a      	uxth	r2, r3
 800b276:	e001      	b.n	800b27c <inc_lock+0xfc>
 800b278:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b27c:	4906      	ldr	r1, [pc, #24]	@ (800b298 <inc_lock+0x118>)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	011b      	lsls	r3, r3, #4
 800b282:	440b      	add	r3, r1
 800b284:	330c      	adds	r3, #12
 800b286:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	3301      	adds	r3, #1
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr
 800b298:	24028ddc 	.word	0x24028ddc

0800b29c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	607b      	str	r3, [r7, #4]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d825      	bhi.n	800b2fc <dec_lock+0x60>
		n = Files[i].ctr;
 800b2b0:	4a17      	ldr	r2, [pc, #92]	@ (800b310 <dec_lock+0x74>)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	011b      	lsls	r3, r3, #4
 800b2b6:	4413      	add	r3, r2
 800b2b8:	330c      	adds	r3, #12
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b2be:	89fb      	ldrh	r3, [r7, #14]
 800b2c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2c4:	d101      	bne.n	800b2ca <dec_lock+0x2e>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b2ca:	89fb      	ldrh	r3, [r7, #14]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <dec_lock+0x3a>
 800b2d0:	89fb      	ldrh	r3, [r7, #14]
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b2d6:	4a0e      	ldr	r2, [pc, #56]	@ (800b310 <dec_lock+0x74>)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	011b      	lsls	r3, r3, #4
 800b2dc:	4413      	add	r3, r2
 800b2de:	330c      	adds	r3, #12
 800b2e0:	89fa      	ldrh	r2, [r7, #14]
 800b2e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b2e4:	89fb      	ldrh	r3, [r7, #14]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d105      	bne.n	800b2f6 <dec_lock+0x5a>
 800b2ea:	4a09      	ldr	r2, [pc, #36]	@ (800b310 <dec_lock+0x74>)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	011b      	lsls	r3, r3, #4
 800b2f0:	4413      	add	r3, r2
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	737b      	strb	r3, [r7, #13]
 800b2fa:	e001      	b.n	800b300 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b300:	7b7b      	ldrb	r3, [r7, #13]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	24028ddc 	.word	0x24028ddc

0800b314 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b31c:	2300      	movs	r3, #0
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	e010      	b.n	800b344 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b322:	4a0d      	ldr	r2, [pc, #52]	@ (800b358 <clear_lock+0x44>)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	011b      	lsls	r3, r3, #4
 800b328:	4413      	add	r3, r2
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d105      	bne.n	800b33e <clear_lock+0x2a>
 800b332:	4a09      	ldr	r2, [pc, #36]	@ (800b358 <clear_lock+0x44>)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	4413      	add	r3, r2
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3301      	adds	r3, #1
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d9eb      	bls.n	800b322 <clear_lock+0xe>
	}
}
 800b34a:	bf00      	nop
 800b34c:	bf00      	nop
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	24028ddc 	.word	0x24028ddc

0800b35c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	78db      	ldrb	r3, [r3, #3]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d034      	beq.n	800b3da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b374:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	7858      	ldrb	r0, [r3, #1]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b380:	2301      	movs	r3, #1
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	f7ff fd3e 	bl	800ae04 <disk_write>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d002      	beq.n	800b394 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b38e:	2301      	movs	r3, #1
 800b390:	73fb      	strb	r3, [r7, #15]
 800b392:	e022      	b.n	800b3da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	697a      	ldr	r2, [r7, #20]
 800b3a0:	1ad2      	subs	r2, r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d217      	bcs.n	800b3da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	789b      	ldrb	r3, [r3, #2]
 800b3ae:	613b      	str	r3, [r7, #16]
 800b3b0:	e010      	b.n	800b3d4 <sync_window+0x78>
					wsect += fs->fsize;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	7858      	ldrb	r0, [r3, #1]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	697a      	ldr	r2, [r7, #20]
 800b3ca:	f7ff fd1b 	bl	800ae04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	613b      	str	r3, [r7, #16]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d8eb      	bhi.n	800b3b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d01b      	beq.n	800b434 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff ffad 	bl	800b35c <sync_window>
 800b402:	4603      	mov	r3, r0
 800b404:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d113      	bne.n	800b434 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7858      	ldrb	r0, [r3, #1]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b416:	2301      	movs	r3, #1
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	f7ff fcd3 	bl	800adc4 <disk_read>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d004      	beq.n	800b42e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b424:	f04f 33ff 	mov.w	r3, #4294967295
 800b428:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800b434:	7bfb      	ldrb	r3, [r7, #15]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7ff ff87 	bl	800b35c <sync_window>
 800b44e:	4603      	mov	r3, r0
 800b450:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b452:	7bfb      	ldrb	r3, [r7, #15]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d159      	bne.n	800b50c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d149      	bne.n	800b4f4 <sync_fs+0xb4>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	791b      	ldrb	r3, [r3, #4]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d145      	bne.n	800b4f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	899b      	ldrh	r3, [r3, #12]
 800b472:	461a      	mov	r2, r3
 800b474:	2100      	movs	r1, #0
 800b476:	f7ff fda7 	bl	800afc8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	3338      	adds	r3, #56	@ 0x38
 800b47e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b482:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff fd36 	bl	800aef8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	3338      	adds	r3, #56	@ 0x38
 800b490:	4921      	ldr	r1, [pc, #132]	@ (800b518 <sync_fs+0xd8>)
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff fd4b 	bl	800af2e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3338      	adds	r3, #56	@ 0x38
 800b49c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b4a0:	491e      	ldr	r1, [pc, #120]	@ (800b51c <sync_fs+0xdc>)
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff fd43 	bl	800af2e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3338      	adds	r3, #56	@ 0x38
 800b4ac:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	f7ff fd39 	bl	800af2e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3338      	adds	r3, #56	@ 0x38
 800b4c0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	f7ff fd2f 	bl	800af2e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	7858      	ldrb	r0, [r3, #1]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	f7ff fc8b 	bl	800ae04 <disk_write>
			fs->fsi_flag = 0;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	785b      	ldrb	r3, [r3, #1]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7ff fca1 	bl	800ae44 <disk_ioctl>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <sync_fs+0xcc>
 800b508:	2301      	movs	r3, #1
 800b50a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	41615252 	.word	0x41615252
 800b51c:	61417272 	.word	0x61417272

0800b520 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	3b02      	subs	r3, #2
 800b52e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	3b02      	subs	r3, #2
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d301      	bcc.n	800b540 <clust2sect+0x20>
 800b53c:	2300      	movs	r3, #0
 800b53e:	e008      	b.n	800b552 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	895b      	ldrh	r3, [r3, #10]
 800b544:	461a      	mov	r2, r3
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	fb03 f202 	mul.w	r2, r3, r2
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b550:	4413      	add	r3, r2
}
 800b552:	4618      	mov	r0, r3
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b086      	sub	sp, #24
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d904      	bls.n	800b57e <get_fat+0x20>
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	69db      	ldr	r3, [r3, #28]
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d302      	bcc.n	800b584 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b57e:	2301      	movs	r3, #1
 800b580:	617b      	str	r3, [r7, #20]
 800b582:	e0ba      	b.n	800b6fa <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b03      	cmp	r3, #3
 800b590:	f000 8082 	beq.w	800b698 <get_fat+0x13a>
 800b594:	2b03      	cmp	r3, #3
 800b596:	f300 80a6 	bgt.w	800b6e6 <get_fat+0x188>
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d002      	beq.n	800b5a4 <get_fat+0x46>
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d055      	beq.n	800b64e <get_fat+0xf0>
 800b5a2:	e0a0      	b.n	800b6e6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	085b      	lsrs	r3, r3, #1
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	899b      	ldrh	r3, [r3, #12]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5c2:	4413      	add	r3, r2
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6938      	ldr	r0, [r7, #16]
 800b5c8:	f7ff ff0c 	bl	800b3e4 <move_window>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f040 808c 	bne.w	800b6ec <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	60fa      	str	r2, [r7, #12]
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	8992      	ldrh	r2, [r2, #12]
 800b5de:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5e2:	fb01 f202 	mul.w	r2, r1, r2
 800b5e6:	1a9b      	subs	r3, r3, r2
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b5f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	899b      	ldrh	r3, [r3, #12]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800b602:	4413      	add	r3, r2
 800b604:	4619      	mov	r1, r3
 800b606:	6938      	ldr	r0, [r7, #16]
 800b608:	f7ff feec 	bl	800b3e4 <move_window>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d16e      	bne.n	800b6f0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	899b      	ldrh	r3, [r3, #12]
 800b616:	461a      	mov	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b61e:	fb01 f202 	mul.w	r2, r1, r2
 800b622:	1a9b      	subs	r3, r3, r2
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	4413      	add	r3, r2
 800b628:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b62c:	021b      	lsls	r3, r3, #8
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	4313      	orrs	r3, r2
 800b632:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <get_fat+0xe6>
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	091b      	lsrs	r3, r3, #4
 800b642:	e002      	b.n	800b64a <get_fat+0xec>
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b64a:	617b      	str	r3, [r7, #20]
			break;
 800b64c:	e055      	b.n	800b6fa <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	899b      	ldrh	r3, [r3, #12]
 800b656:	085b      	lsrs	r3, r3, #1
 800b658:	b29b      	uxth	r3, r3
 800b65a:	4619      	mov	r1, r3
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b662:	4413      	add	r3, r2
 800b664:	4619      	mov	r1, r3
 800b666:	6938      	ldr	r0, [r7, #16]
 800b668:	f7ff febc 	bl	800b3e4 <move_window>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d140      	bne.n	800b6f4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	005b      	lsls	r3, r3, #1
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	8992      	ldrh	r2, [r2, #12]
 800b680:	fbb3 f0f2 	udiv	r0, r3, r2
 800b684:	fb00 f202 	mul.w	r2, r0, r2
 800b688:	1a9b      	subs	r3, r3, r2
 800b68a:	440b      	add	r3, r1
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7ff fbf7 	bl	800ae80 <ld_word>
 800b692:	4603      	mov	r3, r0
 800b694:	617b      	str	r3, [r7, #20]
			break;
 800b696:	e030      	b.n	800b6fa <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	899b      	ldrh	r3, [r3, #12]
 800b6a0:	089b      	lsrs	r3, r3, #2
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6938      	ldr	r0, [r7, #16]
 800b6b2:	f7ff fe97 	bl	800b3e4 <move_window>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d11d      	bne.n	800b6f8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	8992      	ldrh	r2, [r2, #12]
 800b6ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6ce:	fb00 f202 	mul.w	r2, r0, r2
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	440b      	add	r3, r1
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff fbeb 	bl	800aeb2 <ld_dword>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b6e2:	617b      	str	r3, [r7, #20]
			break;
 800b6e4:	e009      	b.n	800b6fa <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	617b      	str	r3, [r7, #20]
 800b6ea:	e006      	b.n	800b6fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6ec:	bf00      	nop
 800b6ee:	e004      	b.n	800b6fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6f0:	bf00      	nop
 800b6f2:	e002      	b.n	800b6fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b6f4:	bf00      	nop
 800b6f6:	e000      	b.n	800b6fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b6f8:	bf00      	nop
		}
	}

	return val;
 800b6fa:	697b      	ldr	r3, [r7, #20]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3718      	adds	r7, #24
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b704:	b590      	push	{r4, r7, lr}
 800b706:	b089      	sub	sp, #36	@ 0x24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b710:	2302      	movs	r3, #2
 800b712:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2b01      	cmp	r3, #1
 800b718:	f240 8109 	bls.w	800b92e <put_fat+0x22a>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	429a      	cmp	r2, r3
 800b724:	f080 8103 	bcs.w	800b92e <put_fat+0x22a>
		switch (fs->fs_type) {
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	f000 80b6 	beq.w	800b89e <put_fat+0x19a>
 800b732:	2b03      	cmp	r3, #3
 800b734:	f300 80fb 	bgt.w	800b92e <put_fat+0x22a>
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d003      	beq.n	800b744 <put_fat+0x40>
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	f000 8083 	beq.w	800b848 <put_fat+0x144>
 800b742:	e0f4      	b.n	800b92e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	61bb      	str	r3, [r7, #24]
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	085b      	lsrs	r3, r3, #1
 800b74c:	69ba      	ldr	r2, [r7, #24]
 800b74e:	4413      	add	r3, r2
 800b750:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	899b      	ldrh	r3, [r3, #12]
 800b75a:	4619      	mov	r1, r3
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b762:	4413      	add	r3, r2
 800b764:	4619      	mov	r1, r3
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff fe3c 	bl	800b3e4 <move_window>
 800b76c:	4603      	mov	r3, r0
 800b76e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b770:	7ffb      	ldrb	r3, [r7, #31]
 800b772:	2b00      	cmp	r3, #0
 800b774:	f040 80d4 	bne.w	800b920 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	61ba      	str	r2, [r7, #24]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	8992      	ldrh	r2, [r2, #12]
 800b788:	fbb3 f0f2 	udiv	r0, r3, r2
 800b78c:	fb00 f202 	mul.w	r2, r0, r2
 800b790:	1a9b      	subs	r3, r3, r2
 800b792:	440b      	add	r3, r1
 800b794:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	f003 0301 	and.w	r3, r3, #1
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00d      	beq.n	800b7bc <put_fat+0xb8>
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	b25b      	sxtb	r3, r3
 800b7a6:	f003 030f 	and.w	r3, r3, #15
 800b7aa:	b25a      	sxtb	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	b25b      	sxtb	r3, r3
 800b7b0:	011b      	lsls	r3, r3, #4
 800b7b2:	b25b      	sxtb	r3, r3
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	b25b      	sxtb	r3, r3
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	e001      	b.n	800b7c0 <put_fat+0xbc>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	899b      	ldrh	r3, [r3, #12]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7da:	4413      	add	r3, r2
 800b7dc:	4619      	mov	r1, r3
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7ff fe00 	bl	800b3e4 <move_window>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7e8:	7ffb      	ldrb	r3, [r7, #31]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f040 809a 	bne.w	800b924 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	899b      	ldrh	r3, [r3, #12]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800b802:	fb00 f202 	mul.w	r2, r0, r2
 800b806:	1a9b      	subs	r3, r3, r2
 800b808:	440b      	add	r3, r1
 800b80a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d003      	beq.n	800b81e <put_fat+0x11a>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	091b      	lsrs	r3, r3, #4
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	e00e      	b.n	800b83c <put_fat+0x138>
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	b25b      	sxtb	r3, r3
 800b824:	f023 030f 	bic.w	r3, r3, #15
 800b828:	b25a      	sxtb	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	0a1b      	lsrs	r3, r3, #8
 800b82e:	b25b      	sxtb	r3, r3
 800b830:	f003 030f 	and.w	r3, r3, #15
 800b834:	b25b      	sxtb	r3, r3
 800b836:	4313      	orrs	r3, r2
 800b838:	b25b      	sxtb	r3, r3
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2201      	movs	r2, #1
 800b844:	70da      	strb	r2, [r3, #3]
			break;
 800b846:	e072      	b.n	800b92e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	899b      	ldrh	r3, [r3, #12]
 800b850:	085b      	lsrs	r3, r3, #1
 800b852:	b29b      	uxth	r3, r3
 800b854:	4619      	mov	r1, r3
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	fbb3 f3f1 	udiv	r3, r3, r1
 800b85c:	4413      	add	r3, r2
 800b85e:	4619      	mov	r1, r3
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f7ff fdbf 	bl	800b3e4 <move_window>
 800b866:	4603      	mov	r3, r0
 800b868:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b86a:	7ffb      	ldrb	r3, [r7, #31]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d15b      	bne.n	800b928 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	8992      	ldrh	r2, [r2, #12]
 800b87e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b882:	fb00 f202 	mul.w	r2, r0, r2
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	440b      	add	r3, r1
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	b292      	uxth	r2, r2
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff fb31 	bl	800aef8 <st_word>
			fs->wflag = 1;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2201      	movs	r2, #1
 800b89a:	70da      	strb	r2, [r3, #3]
			break;
 800b89c:	e047      	b.n	800b92e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	899b      	ldrh	r3, [r3, #12]
 800b8a6:	089b      	lsrs	r3, r3, #2
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8b2:	4413      	add	r3, r2
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7ff fd94 	bl	800b3e4 <move_window>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8c0:	7ffb      	ldrb	r3, [r7, #31]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d132      	bne.n	800b92c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	8992      	ldrh	r2, [r2, #12]
 800b8da:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8de:	fb00 f202 	mul.w	r2, r0, r2
 800b8e2:	1a9b      	subs	r3, r3, r2
 800b8e4:	440b      	add	r3, r1
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff fae3 	bl	800aeb2 <ld_dword>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b8f2:	4323      	orrs	r3, r4
 800b8f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	8992      	ldrh	r2, [r2, #12]
 800b904:	fbb3 f0f2 	udiv	r0, r3, r2
 800b908:	fb00 f202 	mul.w	r2, r0, r2
 800b90c:	1a9b      	subs	r3, r3, r2
 800b90e:	440b      	add	r3, r1
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	4618      	mov	r0, r3
 800b914:	f7ff fb0b 	bl	800af2e <st_dword>
			fs->wflag = 1;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2201      	movs	r2, #1
 800b91c:	70da      	strb	r2, [r3, #3]
			break;
 800b91e:	e006      	b.n	800b92e <put_fat+0x22a>
			if (res != FR_OK) break;
 800b920:	bf00      	nop
 800b922:	e004      	b.n	800b92e <put_fat+0x22a>
			if (res != FR_OK) break;
 800b924:	bf00      	nop
 800b926:	e002      	b.n	800b92e <put_fat+0x22a>
			if (res != FR_OK) break;
 800b928:	bf00      	nop
 800b92a:	e000      	b.n	800b92e <put_fat+0x22a>
			if (res != FR_OK) break;
 800b92c:	bf00      	nop
		}
	}
	return res;
 800b92e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3724      	adds	r7, #36	@ 0x24
 800b934:	46bd      	mov	sp, r7
 800b936:	bd90      	pop	{r4, r7, pc}

0800b938 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b088      	sub	sp, #32
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d904      	bls.n	800b95e <remove_chain+0x26>
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	69db      	ldr	r3, [r3, #28]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d301      	bcc.n	800b962 <remove_chain+0x2a>
 800b95e:	2302      	movs	r3, #2
 800b960:	e04b      	b.n	800b9fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00c      	beq.n	800b982 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b968:	f04f 32ff 	mov.w	r2, #4294967295
 800b96c:	6879      	ldr	r1, [r7, #4]
 800b96e:	69b8      	ldr	r0, [r7, #24]
 800b970:	f7ff fec8 	bl	800b704 <put_fat>
 800b974:	4603      	mov	r3, r0
 800b976:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b978:	7ffb      	ldrb	r3, [r7, #31]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <remove_chain+0x4a>
 800b97e:	7ffb      	ldrb	r3, [r7, #31]
 800b980:	e03b      	b.n	800b9fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f7ff fdea 	bl	800b55e <get_fat>
 800b98a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d031      	beq.n	800b9f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d101      	bne.n	800b99c <remove_chain+0x64>
 800b998:	2302      	movs	r3, #2
 800b99a:	e02e      	b.n	800b9fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d101      	bne.n	800b9a8 <remove_chain+0x70>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e028      	b.n	800b9fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	68b9      	ldr	r1, [r7, #8]
 800b9ac:	69b8      	ldr	r0, [r7, #24]
 800b9ae:	f7ff fea9 	bl	800b704 <put_fat>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b9b6:	7ffb      	ldrb	r3, [r7, #31]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <remove_chain+0x88>
 800b9bc:	7ffb      	ldrb	r3, [r7, #31]
 800b9be:	e01c      	b.n	800b9fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	699a      	ldr	r2, [r3, #24]
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	69db      	ldr	r3, [r3, #28]
 800b9c8:	3b02      	subs	r3, #2
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d20b      	bcs.n	800b9e6 <remove_chain+0xae>
			fs->free_clst++;
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	791b      	ldrb	r3, [r3, #4]
 800b9dc:	f043 0301 	orr.w	r3, r3, #1
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d3c6      	bcc.n	800b982 <remove_chain+0x4a>
 800b9f4:	e000      	b.n	800b9f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b9f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3720      	adds	r7, #32
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b088      	sub	sp, #32
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10d      	bne.n	800ba34 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d004      	beq.n	800ba2e <create_chain+0x2c>
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	69ba      	ldr	r2, [r7, #24]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d31b      	bcc.n	800ba66 <create_chain+0x64>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	61bb      	str	r3, [r7, #24]
 800ba32:	e018      	b.n	800ba66 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff fd91 	bl	800b55e <get_fat>
 800ba3c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d801      	bhi.n	800ba48 <create_chain+0x46>
 800ba44:	2301      	movs	r3, #1
 800ba46:	e070      	b.n	800bb2a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4e:	d101      	bne.n	800ba54 <create_chain+0x52>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	e06a      	b.n	800bb2a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d201      	bcs.n	800ba62 <create_chain+0x60>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	e063      	b.n	800bb2a <create_chain+0x128>
		scl = clst;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	69db      	ldr	r3, [r3, #28]
 800ba74:	69fa      	ldr	r2, [r7, #28]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d307      	bcc.n	800ba8a <create_chain+0x88>
				ncl = 2;
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ba7e:	69fa      	ldr	r2, [r7, #28]
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d901      	bls.n	800ba8a <create_chain+0x88>
 800ba86:	2300      	movs	r3, #0
 800ba88:	e04f      	b.n	800bb2a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ba8a:	69f9      	ldr	r1, [r7, #28]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff fd66 	bl	800b55e <get_fat>
 800ba92:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00e      	beq.n	800bab8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d003      	beq.n	800baa8 <create_chain+0xa6>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa6:	d101      	bne.n	800baac <create_chain+0xaa>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	e03e      	b.n	800bb2a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800baac:	69fa      	ldr	r2, [r7, #28]
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d1da      	bne.n	800ba6a <create_chain+0x68>
 800bab4:	2300      	movs	r3, #0
 800bab6:	e038      	b.n	800bb2a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bab8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800baba:	f04f 32ff 	mov.w	r2, #4294967295
 800babe:	69f9      	ldr	r1, [r7, #28]
 800bac0:	6938      	ldr	r0, [r7, #16]
 800bac2:	f7ff fe1f 	bl	800b704 <put_fat>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d109      	bne.n	800bae4 <create_chain+0xe2>
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d006      	beq.n	800bae4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bad6:	69fa      	ldr	r2, [r7, #28]
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6938      	ldr	r0, [r7, #16]
 800badc:	f7ff fe12 	bl	800b704 <put_fat>
 800bae0:	4603      	mov	r3, r0
 800bae2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d116      	bne.n	800bb18 <create_chain+0x116>
		fs->last_clst = ncl;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	69fa      	ldr	r2, [r7, #28]
 800baee:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	699a      	ldr	r2, [r3, #24]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	69db      	ldr	r3, [r3, #28]
 800baf8:	3b02      	subs	r3, #2
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d804      	bhi.n	800bb08 <create_chain+0x106>
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	1e5a      	subs	r2, r3, #1
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	791b      	ldrb	r3, [r3, #4]
 800bb0c:	f043 0301 	orr.w	r3, r3, #1
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	711a      	strb	r2, [r3, #4]
 800bb16:	e007      	b.n	800bb28 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d102      	bne.n	800bb24 <create_chain+0x122>
 800bb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb22:	e000      	b.n	800bb26 <create_chain+0x124>
 800bb24:	2301      	movs	r3, #1
 800bb26:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bb28:	69fb      	ldr	r3, [r7, #28]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3720      	adds	r7, #32
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b087      	sub	sp, #28
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb46:	3304      	adds	r3, #4
 800bb48:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	899b      	ldrh	r3, [r3, #12]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	8952      	ldrh	r2, [r2, #10]
 800bb5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb5e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	1d1a      	adds	r2, r3, #4
 800bb64:	613a      	str	r2, [r7, #16]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d101      	bne.n	800bb74 <clmt_clust+0x42>
 800bb70:	2300      	movs	r3, #0
 800bb72:	e010      	b.n	800bb96 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bb74:	697a      	ldr	r2, [r7, #20]
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d307      	bcc.n	800bb8c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bb7c:	697a      	ldr	r2, [r7, #20]
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	3304      	adds	r3, #4
 800bb88:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bb8a:	e7e9      	b.n	800bb60 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bb8c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	4413      	add	r3, r2
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b086      	sub	sp, #24
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bbb8:	d204      	bcs.n	800bbc4 <dir_sdi+0x22>
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	f003 031f 	and.w	r3, r3, #31
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	e071      	b.n	800bcac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d106      	bne.n	800bbe8 <dir_sdi+0x46>
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d902      	bls.n	800bbe8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10c      	bne.n	800bc08 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	095b      	lsrs	r3, r3, #5
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	8912      	ldrh	r2, [r2, #8]
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d301      	bcc.n	800bbfe <dir_sdi+0x5c>
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e056      	b.n	800bcac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	61da      	str	r2, [r3, #28]
 800bc06:	e02d      	b.n	800bc64 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	895b      	ldrh	r3, [r3, #10]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	899b      	ldrh	r3, [r3, #12]
 800bc12:	fb02 f303 	mul.w	r3, r2, r3
 800bc16:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bc18:	e019      	b.n	800bc4e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6979      	ldr	r1, [r7, #20]
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff fc9d 	bl	800b55e <get_fat>
 800bc24:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2c:	d101      	bne.n	800bc32 <dir_sdi+0x90>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e03c      	b.n	800bcac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d904      	bls.n	800bc42 <dir_sdi+0xa0>
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d301      	bcc.n	800bc46 <dir_sdi+0xa4>
 800bc42:	2302      	movs	r3, #2
 800bc44:	e032      	b.n	800bcac <dir_sdi+0x10a>
			ofs -= csz;
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d2e1      	bcs.n	800bc1a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bc56:	6979      	ldr	r1, [r7, #20]
 800bc58:	6938      	ldr	r0, [r7, #16]
 800bc5a:	f7ff fc61 	bl	800b520 <clust2sect>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	697a      	ldr	r2, [r7, #20]
 800bc68:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d101      	bne.n	800bc76 <dir_sdi+0xd4>
 800bc72:	2302      	movs	r3, #2
 800bc74:	e01a      	b.n	800bcac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	69da      	ldr	r2, [r3, #28]
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	899b      	ldrh	r3, [r3, #12]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc86:	441a      	add	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	899b      	ldrh	r3, [r3, #12]
 800bc96:	461a      	mov	r2, r3
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc9e:	fb00 f202 	mul.w	r2, r0, r2
 800bca2:	1a9b      	subs	r3, r3, r2
 800bca4:	18ca      	adds	r2, r1, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3718      	adds	r7, #24
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	3320      	adds	r3, #32
 800bcca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d003      	beq.n	800bcdc <dir_next+0x28>
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bcda:	d301      	bcc.n	800bce0 <dir_next+0x2c>
 800bcdc:	2304      	movs	r3, #4
 800bcde:	e0bb      	b.n	800be58 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	899b      	ldrh	r3, [r3, #12]
 800bce4:	461a      	mov	r2, r3
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcec:	fb01 f202 	mul.w	r2, r1, r2
 800bcf0:	1a9b      	subs	r3, r3, r2
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f040 809d 	bne.w	800be32 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	69db      	ldr	r3, [r3, #28]
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	699b      	ldr	r3, [r3, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10b      	bne.n	800bd22 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	095b      	lsrs	r3, r3, #5
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	8912      	ldrh	r2, [r2, #8]
 800bd12:	4293      	cmp	r3, r2
 800bd14:	f0c0 808d 	bcc.w	800be32 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	61da      	str	r2, [r3, #28]
 800bd1e:	2304      	movs	r3, #4
 800bd20:	e09a      	b.n	800be58 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	899b      	ldrh	r3, [r3, #12]
 800bd26:	461a      	mov	r2, r3
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	8952      	ldrh	r2, [r2, #10]
 800bd32:	3a01      	subs	r2, #1
 800bd34:	4013      	ands	r3, r2
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d17b      	bne.n	800be32 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	699b      	ldr	r3, [r3, #24]
 800bd40:	4619      	mov	r1, r3
 800bd42:	4610      	mov	r0, r2
 800bd44:	f7ff fc0b 	bl	800b55e <get_fat>
 800bd48:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d801      	bhi.n	800bd54 <dir_next+0xa0>
 800bd50:	2302      	movs	r3, #2
 800bd52:	e081      	b.n	800be58 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5a:	d101      	bne.n	800bd60 <dir_next+0xac>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e07b      	b.n	800be58 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	69db      	ldr	r3, [r3, #28]
 800bd64:	697a      	ldr	r2, [r7, #20]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d359      	bcc.n	800be1e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d104      	bne.n	800bd7a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	61da      	str	r2, [r3, #28]
 800bd76:	2304      	movs	r3, #4
 800bd78:	e06e      	b.n	800be58 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7ff fe3d 	bl	800ba02 <create_chain>
 800bd88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <dir_next+0xe0>
 800bd90:	2307      	movs	r3, #7
 800bd92:	e061      	b.n	800be58 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d101      	bne.n	800bd9e <dir_next+0xea>
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	e05c      	b.n	800be58 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda4:	d101      	bne.n	800bdaa <dir_next+0xf6>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e056      	b.n	800be58 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f7ff fad6 	bl	800b35c <sync_window>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <dir_next+0x106>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e04e      	b.n	800be58 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	899b      	ldrh	r3, [r3, #12]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	f7ff f8fe 	bl	800afc8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bdcc:	2300      	movs	r3, #0
 800bdce:	613b      	str	r3, [r7, #16]
 800bdd0:	6979      	ldr	r1, [r7, #20]
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f7ff fba4 	bl	800b520 <clust2sect>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	635a      	str	r2, [r3, #52]	@ 0x34
 800bdde:	e012      	b.n	800be06 <dir_next+0x152>
						fs->wflag = 1;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2201      	movs	r2, #1
 800bde4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f7ff fab8 	bl	800b35c <sync_window>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <dir_next+0x142>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e030      	b.n	800be58 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	613b      	str	r3, [r7, #16]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	635a      	str	r2, [r3, #52]	@ 0x34
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	895b      	ldrh	r3, [r3, #10]
 800be0a:	461a      	mov	r2, r3
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	4293      	cmp	r3, r2
 800be10:	d3e6      	bcc.n	800bde0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	1ad2      	subs	r2, r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	697a      	ldr	r2, [r7, #20]
 800be22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800be24:	6979      	ldr	r1, [r7, #20]
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fb7a 	bl	800b520 <clust2sect>
 800be2c:	4602      	mov	r2, r0
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	899b      	ldrh	r3, [r3, #12]
 800be42:	461a      	mov	r2, r3
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	fbb3 f0f2 	udiv	r0, r3, r2
 800be4a:	fb00 f202 	mul.w	r2, r0, r2
 800be4e:	1a9b      	subs	r3, r3, r2
 800be50:	18ca      	adds	r2, r1, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800be70:	2100      	movs	r1, #0
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff fe95 	bl	800bba2 <dir_sdi>
 800be78:	4603      	mov	r3, r0
 800be7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d12b      	bne.n	800beda <dir_alloc+0x7a>
		n = 0;
 800be82:	2300      	movs	r3, #0
 800be84:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	4619      	mov	r1, r3
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f7ff faa9 	bl	800b3e4 <move_window>
 800be92:	4603      	mov	r3, r0
 800be94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d11d      	bne.n	800bed8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a1b      	ldr	r3, [r3, #32]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2be5      	cmp	r3, #229	@ 0xe5
 800bea4:	d004      	beq.n	800beb0 <dir_alloc+0x50>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d107      	bne.n	800bec0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	3301      	adds	r3, #1
 800beb4:	613b      	str	r3, [r7, #16]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d102      	bne.n	800bec4 <dir_alloc+0x64>
 800bebe:	e00c      	b.n	800beda <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bec0:	2300      	movs	r3, #0
 800bec2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bec4:	2101      	movs	r1, #1
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff fef4 	bl	800bcb4 <dir_next>
 800becc:	4603      	mov	r3, r0
 800bece:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0d7      	beq.n	800be86 <dir_alloc+0x26>
 800bed6:	e000      	b.n	800beda <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bed8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	2b04      	cmp	r3, #4
 800bede:	d101      	bne.n	800bee4 <dir_alloc+0x84>
 800bee0:	2307      	movs	r3, #7
 800bee2:	75fb      	strb	r3, [r7, #23]
	return res;
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b084      	sub	sp, #16
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	331a      	adds	r3, #26
 800befc:	4618      	mov	r0, r3
 800befe:	f7fe ffbf 	bl	800ae80 <ld_word>
 800bf02:	4603      	mov	r3, r0
 800bf04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	d109      	bne.n	800bf22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	3314      	adds	r3, #20
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe ffb4 	bl	800ae80 <ld_word>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	041b      	lsls	r3, r3, #16
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bf22:	68fb      	ldr	r3, [r7, #12]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	331a      	adds	r3, #26
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	b292      	uxth	r2, r2
 800bf40:	4611      	mov	r1, r2
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe ffd8 	bl	800aef8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	2b03      	cmp	r3, #3
 800bf4e:	d109      	bne.n	800bf64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	f103 0214 	add.w	r2, r3, #20
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	0c1b      	lsrs	r3, r3, #16
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f7fe ffca 	bl	800aef8 <st_word>
	}
}
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bf6c:	b590      	push	{r4, r7, lr}
 800bf6e:	b087      	sub	sp, #28
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	331a      	adds	r3, #26
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe ff80 	bl	800ae80 <ld_word>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d001      	beq.n	800bf8a <cmp_lfn+0x1e>
 800bf86:	2300      	movs	r3, #0
 800bf88:	e059      	b.n	800c03e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf92:	1e5a      	subs	r2, r3, #1
 800bf94:	4613      	mov	r3, r2
 800bf96:	005b      	lsls	r3, r3, #1
 800bf98:	4413      	add	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4413      	add	r3, r2
 800bf9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	81fb      	strh	r3, [r7, #14]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	613b      	str	r3, [r7, #16]
 800bfa8:	e033      	b.n	800c012 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bfaa:	4a27      	ldr	r2, [pc, #156]	@ (800c048 <cmp_lfn+0xdc>)
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	4413      	add	r3, r2
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fe ff61 	bl	800ae80 <ld_word>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bfc2:	89fb      	ldrh	r3, [r7, #14]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d01a      	beq.n	800bffe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	2bfe      	cmp	r3, #254	@ 0xfe
 800bfcc:	d812      	bhi.n	800bff4 <cmp_lfn+0x88>
 800bfce:	89bb      	ldrh	r3, [r7, #12]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f002 f81f 	bl	800e014 <ff_wtoupper>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	461c      	mov	r4, r3
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	617a      	str	r2, [r7, #20]
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f002 f813 	bl	800e014 <ff_wtoupper>
 800bfee:	4603      	mov	r3, r0
 800bff0:	429c      	cmp	r4, r3
 800bff2:	d001      	beq.n	800bff8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bff4:	2300      	movs	r3, #0
 800bff6:	e022      	b.n	800c03e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bff8:	89bb      	ldrh	r3, [r7, #12]
 800bffa:	81fb      	strh	r3, [r7, #14]
 800bffc:	e006      	b.n	800c00c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bffe:	89bb      	ldrh	r3, [r7, #12]
 800c000:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c004:	4293      	cmp	r3, r2
 800c006:	d001      	beq.n	800c00c <cmp_lfn+0xa0>
 800c008:	2300      	movs	r3, #0
 800c00a:	e018      	b.n	800c03e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	3301      	adds	r3, #1
 800c010:	613b      	str	r3, [r7, #16]
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b0c      	cmp	r3, #12
 800c016:	d9c8      	bls.n	800bfaa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00b      	beq.n	800c03c <cmp_lfn+0xd0>
 800c024:	89fb      	ldrh	r3, [r7, #14]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d008      	beq.n	800c03c <cmp_lfn+0xd0>
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	4413      	add	r3, r2
 800c032:	881b      	ldrh	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <cmp_lfn+0xd0>
 800c038:	2300      	movs	r3, #0
 800c03a:	e000      	b.n	800c03e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c03c:	2301      	movs	r3, #1
}
 800c03e:	4618      	mov	r0, r3
 800c040:	371c      	adds	r7, #28
 800c042:	46bd      	mov	sp, r7
 800c044:	bd90      	pop	{r4, r7, pc}
 800c046:	bf00      	nop
 800c048:	0800fec4 	.word	0x0800fec4

0800c04c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	4611      	mov	r1, r2
 800c058:	461a      	mov	r2, r3
 800c05a:	460b      	mov	r3, r1
 800c05c:	71fb      	strb	r3, [r7, #7]
 800c05e:	4613      	mov	r3, r2
 800c060:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	330d      	adds	r3, #13
 800c066:	79ba      	ldrb	r2, [r7, #6]
 800c068:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	330b      	adds	r3, #11
 800c06e:	220f      	movs	r2, #15
 800c070:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	330c      	adds	r3, #12
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	331a      	adds	r3, #26
 800c07e:	2100      	movs	r1, #0
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe ff39 	bl	800aef8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	1e5a      	subs	r2, r3, #1
 800c08a:	4613      	mov	r3, r2
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	4413      	add	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c096:	2300      	movs	r3, #0
 800c098:	82fb      	strh	r3, [r7, #22]
 800c09a:	2300      	movs	r3, #0
 800c09c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c09e:	8afb      	ldrh	r3, [r7, #22]
 800c0a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d007      	beq.n	800c0b8 <put_lfn+0x6c>
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	61fa      	str	r2, [r7, #28]
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	881b      	ldrh	r3, [r3, #0]
 800c0b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c0b8:	4a17      	ldr	r2, [pc, #92]	@ (800c118 <put_lfn+0xcc>)
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	4413      	add	r3, r2
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	8afa      	ldrh	r2, [r7, #22]
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe ff14 	bl	800aef8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c0d0:	8afb      	ldrh	r3, [r7, #22]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d102      	bne.n	800c0dc <put_lfn+0x90>
 800c0d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c0da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	61bb      	str	r3, [r7, #24]
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	2b0c      	cmp	r3, #12
 800c0e6:	d9da      	bls.n	800c09e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c0e8:	8afb      	ldrh	r3, [r7, #22]
 800c0ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d006      	beq.n	800c100 <put_lfn+0xb4>
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	005b      	lsls	r3, r3, #1
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d103      	bne.n	800c108 <put_lfn+0xbc>
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c106:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	79fa      	ldrb	r2, [r7, #7]
 800c10c:	701a      	strb	r2, [r3, #0]
}
 800c10e:	bf00      	nop
 800c110:	3720      	adds	r7, #32
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	0800fec4 	.word	0x0800fec4

0800c11c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b08c      	sub	sp, #48	@ 0x30
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
 800c128:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c12a:	220b      	movs	r2, #11
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f7fe ff29 	bl	800af86 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2b05      	cmp	r3, #5
 800c138:	d929      	bls.n	800c18e <gen_numname+0x72>
		sr = seq;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c13e:	e020      	b.n	800c182 <gen_numname+0x66>
			wc = *lfn++;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	1c9a      	adds	r2, r3, #2
 800c144:	607a      	str	r2, [r7, #4]
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c14a:	2300      	movs	r3, #0
 800c14c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c14e:	e015      	b.n	800c17c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	005a      	lsls	r2, r3, #1
 800c154:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	4413      	add	r3, r2
 800c15c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c15e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c160:	085b      	lsrs	r3, r3, #1
 800c162:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d003      	beq.n	800c176 <gen_numname+0x5a>
 800c16e:	69fa      	ldr	r2, [r7, #28]
 800c170:	4b30      	ldr	r3, [pc, #192]	@ (800c234 <gen_numname+0x118>)
 800c172:	4053      	eors	r3, r2
 800c174:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c178:	3301      	adds	r3, #1
 800c17a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17e:	2b0f      	cmp	r3, #15
 800c180:	d9e6      	bls.n	800c150 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1da      	bne.n	800c140 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c18e:	2307      	movs	r3, #7
 800c190:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	b2db      	uxtb	r3, r3
 800c196:	f003 030f 	and.w	r3, r3, #15
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	3330      	adds	r3, #48	@ 0x30
 800c19e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c1a6:	2b39      	cmp	r3, #57	@ 0x39
 800c1a8:	d904      	bls.n	800c1b4 <gen_numname+0x98>
 800c1aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c1ae:	3307      	adds	r3, #7
 800c1b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b6:	1e5a      	subs	r2, r3, #1
 800c1b8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c1ba:	3330      	adds	r3, #48	@ 0x30
 800c1bc:	443b      	add	r3, r7
 800c1be:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c1c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	091b      	lsrs	r3, r3, #4
 800c1ca:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1df      	bne.n	800c192 <gen_numname+0x76>
	ns[i] = '~';
 800c1d2:	f107 0214 	add.w	r2, r7, #20
 800c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d8:	4413      	add	r3, r2
 800c1da:	227e      	movs	r2, #126	@ 0x7e
 800c1dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c1de:	2300      	movs	r3, #0
 800c1e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1e2:	e002      	b.n	800c1ea <gen_numname+0xce>
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d205      	bcs.n	800c1fe <gen_numname+0xe2>
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f6:	4413      	add	r3, r2
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	2b20      	cmp	r3, #32
 800c1fc:	d1f2      	bne.n	800c1e4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c200:	2b07      	cmp	r3, #7
 800c202:	d807      	bhi.n	800c214 <gen_numname+0xf8>
 800c204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c206:	1c5a      	adds	r2, r3, #1
 800c208:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c20a:	3330      	adds	r3, #48	@ 0x30
 800c20c:	443b      	add	r3, r7
 800c20e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c212:	e000      	b.n	800c216 <gen_numname+0xfa>
 800c214:	2120      	movs	r1, #32
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	1c5a      	adds	r2, r3, #1
 800c21a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	4413      	add	r3, r2
 800c220:	460a      	mov	r2, r1
 800c222:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c226:	2b07      	cmp	r3, #7
 800c228:	d9e9      	bls.n	800c1fe <gen_numname+0xe2>
}
 800c22a:	bf00      	nop
 800c22c:	bf00      	nop
 800c22e:	3730      	adds	r7, #48	@ 0x30
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	00011021 	.word	0x00011021

0800c238 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c244:	230b      	movs	r3, #11
 800c246:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c248:	7bfb      	ldrb	r3, [r7, #15]
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	0852      	lsrs	r2, r2, #1
 800c24e:	01db      	lsls	r3, r3, #7
 800c250:	4313      	orrs	r3, r2
 800c252:	b2da      	uxtb	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	1c59      	adds	r1, r3, #1
 800c258:	6079      	str	r1, [r7, #4]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	4413      	add	r3, r2
 800c25e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	3b01      	subs	r3, #1
 800c264:	60bb      	str	r3, [r7, #8]
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1ed      	bne.n	800c248 <sum_sfn+0x10>
	return sum;
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b086      	sub	sp, #24
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c288:	2100      	movs	r1, #0
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7ff fc89 	bl	800bba2 <dir_sdi>
 800c290:	4603      	mov	r3, r0
 800c292:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c294:	7dfb      	ldrb	r3, [r7, #23]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d001      	beq.n	800c29e <dir_find+0x24>
 800c29a:	7dfb      	ldrb	r3, [r7, #23]
 800c29c:	e0a9      	b.n	800c3f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c29e:	23ff      	movs	r3, #255	@ 0xff
 800c2a0:	753b      	strb	r3, [r7, #20]
 800c2a2:	7d3b      	ldrb	r3, [r7, #20]
 800c2a4:	757b      	strb	r3, [r7, #21]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ac:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6938      	ldr	r0, [r7, #16]
 800c2b6:	f7ff f895 	bl	800b3e4 <move_window>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f040 8090 	bne.w	800c3e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c2ce:	7dbb      	ldrb	r3, [r7, #22]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d102      	bne.n	800c2da <dir_find+0x60>
 800c2d4:	2304      	movs	r3, #4
 800c2d6:	75fb      	strb	r3, [r7, #23]
 800c2d8:	e08a      	b.n	800c3f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	330b      	adds	r3, #11
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2e6:	73fb      	strb	r3, [r7, #15]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	7bfa      	ldrb	r2, [r7, #15]
 800c2ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c2ee:	7dbb      	ldrb	r3, [r7, #22]
 800c2f0:	2be5      	cmp	r3, #229	@ 0xe5
 800c2f2:	d007      	beq.n	800c304 <dir_find+0x8a>
 800c2f4:	7bfb      	ldrb	r3, [r7, #15]
 800c2f6:	f003 0308 	and.w	r3, r3, #8
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d009      	beq.n	800c312 <dir_find+0x98>
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
 800c300:	2b0f      	cmp	r3, #15
 800c302:	d006      	beq.n	800c312 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c304:	23ff      	movs	r3, #255	@ 0xff
 800c306:	757b      	strb	r3, [r7, #21]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f04f 32ff 	mov.w	r2, #4294967295
 800c30e:	631a      	str	r2, [r3, #48]	@ 0x30
 800c310:	e05e      	b.n	800c3d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c312:	7bfb      	ldrb	r3, [r7, #15]
 800c314:	2b0f      	cmp	r3, #15
 800c316:	d136      	bne.n	800c386 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c31e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c322:	2b00      	cmp	r3, #0
 800c324:	d154      	bne.n	800c3d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c326:	7dbb      	ldrb	r3, [r7, #22]
 800c328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00d      	beq.n	800c34c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a1b      	ldr	r3, [r3, #32]
 800c334:	7b5b      	ldrb	r3, [r3, #13]
 800c336:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c338:	7dbb      	ldrb	r3, [r7, #22]
 800c33a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c33e:	75bb      	strb	r3, [r7, #22]
 800c340:	7dbb      	ldrb	r3, [r7, #22]
 800c342:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	695a      	ldr	r2, [r3, #20]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c34c:	7dba      	ldrb	r2, [r7, #22]
 800c34e:	7d7b      	ldrb	r3, [r7, #21]
 800c350:	429a      	cmp	r2, r3
 800c352:	d115      	bne.n	800c380 <dir_find+0x106>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a1b      	ldr	r3, [r3, #32]
 800c358:	330d      	adds	r3, #13
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	7d3a      	ldrb	r2, [r7, #20]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d10e      	bne.n	800c380 <dir_find+0x106>
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	691a      	ldr	r2, [r3, #16]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	4619      	mov	r1, r3
 800c36c:	4610      	mov	r0, r2
 800c36e:	f7ff fdfd 	bl	800bf6c <cmp_lfn>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d003      	beq.n	800c380 <dir_find+0x106>
 800c378:	7d7b      	ldrb	r3, [r7, #21]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	e000      	b.n	800c382 <dir_find+0x108>
 800c380:	23ff      	movs	r3, #255	@ 0xff
 800c382:	757b      	strb	r3, [r7, #21]
 800c384:	e024      	b.n	800c3d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c386:	7d7b      	ldrb	r3, [r7, #21]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d109      	bne.n	800c3a0 <dir_find+0x126>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a1b      	ldr	r3, [r3, #32]
 800c390:	4618      	mov	r0, r3
 800c392:	f7ff ff51 	bl	800c238 <sum_sfn>
 800c396:	4603      	mov	r3, r0
 800c398:	461a      	mov	r2, r3
 800c39a:	7d3b      	ldrb	r3, [r7, #20]
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d024      	beq.n	800c3ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10a      	bne.n	800c3c4 <dir_find+0x14a>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a18      	ldr	r0, [r3, #32]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	3324      	adds	r3, #36	@ 0x24
 800c3b6:	220b      	movs	r2, #11
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	f7fe fe20 	bl	800affe <mem_cmp>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d014      	beq.n	800c3ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c3c4:	23ff      	movs	r3, #255	@ 0xff
 800c3c6:	757b      	strb	r3, [r7, #21]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ce:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff fc6e 	bl	800bcb4 <dir_next>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c3dc:	7dfb      	ldrb	r3, [r7, #23]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f43f af65 	beq.w	800c2ae <dir_find+0x34>
 800c3e4:	e004      	b.n	800c3f0 <dir_find+0x176>
		if (res != FR_OK) break;
 800c3e6:	bf00      	nop
 800c3e8:	e002      	b.n	800c3f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c3ea:	bf00      	nop
 800c3ec:	e000      	b.n	800c3f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c3ee:	bf00      	nop

	return res;
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08c      	sub	sp, #48	@ 0x30
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c410:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <dir_register+0x20>
 800c418:	2306      	movs	r3, #6
 800c41a:	e0e0      	b.n	800c5de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c41c:	2300      	movs	r3, #0
 800c41e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c420:	e002      	b.n	800c428 <dir_register+0x2c>
 800c422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c424:	3301      	adds	r3, #1
 800c426:	627b      	str	r3, [r7, #36]	@ 0x24
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	691a      	ldr	r2, [r3, #16]
 800c42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42e:	005b      	lsls	r3, r3, #1
 800c430:	4413      	add	r3, r2
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1f4      	bne.n	800c422 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800c43e:	f107 030c 	add.w	r3, r7, #12
 800c442:	220c      	movs	r2, #12
 800c444:	4618      	mov	r0, r3
 800c446:	f7fe fd9e 	bl	800af86 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c44a:	7dfb      	ldrb	r3, [r7, #23]
 800c44c:	f003 0301 	and.w	r3, r3, #1
 800c450:	2b00      	cmp	r3, #0
 800c452:	d032      	beq.n	800c4ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2240      	movs	r2, #64	@ 0x40
 800c458:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800c45c:	2301      	movs	r3, #1
 800c45e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c460:	e016      	b.n	800c490 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	691a      	ldr	r2, [r3, #16]
 800c46c:	f107 010c 	add.w	r1, r7, #12
 800c470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c472:	f7ff fe53 	bl	800c11c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7ff feff 	bl	800c27a <dir_find>
 800c47c:	4603      	mov	r3, r0
 800c47e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800c482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c486:	2b00      	cmp	r3, #0
 800c488:	d106      	bne.n	800c498 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48c:	3301      	adds	r3, #1
 800c48e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c492:	2b63      	cmp	r3, #99	@ 0x63
 800c494:	d9e5      	bls.n	800c462 <dir_register+0x66>
 800c496:	e000      	b.n	800c49a <dir_register+0x9e>
			if (res != FR_OK) break;
 800c498:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49c:	2b64      	cmp	r3, #100	@ 0x64
 800c49e:	d101      	bne.n	800c4a4 <dir_register+0xa8>
 800c4a0:	2307      	movs	r3, #7
 800c4a2:	e09c      	b.n	800c5de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c4a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4a8:	2b04      	cmp	r3, #4
 800c4aa:	d002      	beq.n	800c4b2 <dir_register+0xb6>
 800c4ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4b0:	e095      	b.n	800c5de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c4b2:	7dfa      	ldrb	r2, [r7, #23]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c4ba:	7dfb      	ldrb	r3, [r7, #23]
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d007      	beq.n	800c4d4 <dir_register+0xd8>
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c6:	330c      	adds	r3, #12
 800c4c8:	4a47      	ldr	r2, [pc, #284]	@ (800c5e8 <dir_register+0x1ec>)
 800c4ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c4ce:	089b      	lsrs	r3, r3, #2
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	e000      	b.n	800c4d6 <dir_register+0xda>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c4d8:	6a39      	ldr	r1, [r7, #32]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7ff fcc0 	bl	800be60 <dir_alloc>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c4e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d148      	bne.n	800c580 <dir_register+0x184>
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	3b01      	subs	r3, #1
 800c4f2:	623b      	str	r3, [r7, #32]
 800c4f4:	6a3b      	ldr	r3, [r7, #32]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d042      	beq.n	800c580 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	695a      	ldr	r2, [r3, #20]
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	015b      	lsls	r3, r3, #5
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff fb4b 	bl	800bba2 <dir_sdi>
 800c50c:	4603      	mov	r3, r0
 800c50e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800c512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c516:	2b00      	cmp	r3, #0
 800c518:	d132      	bne.n	800c580 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	3324      	adds	r3, #36	@ 0x24
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff fe8a 	bl	800c238 <sum_sfn>
 800c524:	4603      	mov	r3, r0
 800c526:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	69db      	ldr	r3, [r3, #28]
 800c52c:	4619      	mov	r1, r3
 800c52e:	69f8      	ldr	r0, [r7, #28]
 800c530:	f7fe ff58 	bl	800b3e4 <move_window>
 800c534:	4603      	mov	r3, r0
 800c536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800c53a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d11d      	bne.n	800c57e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	6918      	ldr	r0, [r3, #16]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a19      	ldr	r1, [r3, #32]
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	7efb      	ldrb	r3, [r7, #27]
 800c550:	f7ff fd7c 	bl	800c04c <put_lfn>
				fs->wflag = 1;
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	2201      	movs	r2, #1
 800c558:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c55a:	2100      	movs	r1, #0
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7ff fba9 	bl	800bcb4 <dir_next>
 800c562:	4603      	mov	r3, r0
 800c564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800c568:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d107      	bne.n	800c580 <dir_register+0x184>
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	3b01      	subs	r3, #1
 800c574:	623b      	str	r3, [r7, #32]
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1d5      	bne.n	800c528 <dir_register+0x12c>
 800c57c:	e000      	b.n	800c580 <dir_register+0x184>
				if (res != FR_OK) break;
 800c57e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c580:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c584:	2b00      	cmp	r3, #0
 800c586:	d128      	bne.n	800c5da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	69db      	ldr	r3, [r3, #28]
 800c58c:	4619      	mov	r1, r3
 800c58e:	69f8      	ldr	r0, [r7, #28]
 800c590:	f7fe ff28 	bl	800b3e4 <move_window>
 800c594:	4603      	mov	r3, r0
 800c596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800c59a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d11b      	bne.n	800c5da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a1b      	ldr	r3, [r3, #32]
 800c5a6:	2220      	movs	r2, #32
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fe fd0c 	bl	800afc8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a18      	ldr	r0, [r3, #32]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3324      	adds	r3, #36	@ 0x24
 800c5b8:	220b      	movs	r2, #11
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	f7fe fce3 	bl	800af86 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	330c      	adds	r3, #12
 800c5cc:	f002 0218 	and.w	r2, r2, #24
 800c5d0:	b2d2      	uxtb	r2, r2
 800c5d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c5da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3730      	adds	r7, #48	@ 0x30
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	4ec4ec4f 	.word	0x4ec4ec4f

0800c5ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b08a      	sub	sp, #40	@ 0x28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	613b      	str	r3, [r7, #16]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	60fb      	str	r3, [r7, #12]
 800c604:	2300      	movs	r3, #0
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	1c5a      	adds	r2, r3, #1
 800c610:	61ba      	str	r2, [r7, #24]
 800c612:	693a      	ldr	r2, [r7, #16]
 800c614:	4413      	add	r3, r2
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c61a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c61c:	2b1f      	cmp	r3, #31
 800c61e:	d940      	bls.n	800c6a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c622:	2b2f      	cmp	r3, #47	@ 0x2f
 800c624:	d006      	beq.n	800c634 <create_name+0x48>
 800c626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c628:	2b5c      	cmp	r3, #92	@ 0x5c
 800c62a:	d110      	bne.n	800c64e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c62c:	e002      	b.n	800c634 <create_name+0x48>
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	3301      	adds	r3, #1
 800c632:	61bb      	str	r3, [r7, #24]
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	4413      	add	r3, r2
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c63e:	d0f6      	beq.n	800c62e <create_name+0x42>
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	4413      	add	r3, r2
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2b5c      	cmp	r3, #92	@ 0x5c
 800c64a:	d0f0      	beq.n	800c62e <create_name+0x42>
			break;
 800c64c:	e02a      	b.n	800c6a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	2bfe      	cmp	r3, #254	@ 0xfe
 800c652:	d901      	bls.n	800c658 <create_name+0x6c>
 800c654:	2306      	movs	r3, #6
 800c656:	e17d      	b.n	800c954 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c658:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c65e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c660:	2101      	movs	r1, #1
 800c662:	4618      	mov	r0, r3
 800c664:	f001 fc9a 	bl	800df9c <ff_convert>
 800c668:	4603      	mov	r3, r0
 800c66a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c66c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <create_name+0x8a>
 800c672:	2306      	movs	r3, #6
 800c674:	e16e      	b.n	800c954 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c678:	2b7f      	cmp	r3, #127	@ 0x7f
 800c67a:	d809      	bhi.n	800c690 <create_name+0xa4>
 800c67c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c67e:	4619      	mov	r1, r3
 800c680:	488d      	ldr	r0, [pc, #564]	@ (800c8b8 <create_name+0x2cc>)
 800c682:	f7fe fce3 	bl	800b04c <chk_chr>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <create_name+0xa4>
 800c68c:	2306      	movs	r3, #6
 800c68e:	e161      	b.n	800c954 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	1c5a      	adds	r2, r3, #1
 800c694:	617a      	str	r2, [r7, #20]
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	4413      	add	r3, r2
 800c69c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c69e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c6a0:	e7b4      	b.n	800c60c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c6a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	441a      	add	r2, r3
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c6ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6b0:	2b1f      	cmp	r3, #31
 800c6b2:	d801      	bhi.n	800c6b8 <create_name+0xcc>
 800c6b4:	2304      	movs	r3, #4
 800c6b6:	e000      	b.n	800c6ba <create_name+0xce>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c6be:	e011      	b.n	800c6e4 <create_name+0xf8>
		w = lfn[di - 1];
 800c6c0:	697a      	ldr	r2, [r7, #20]
 800c6c2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c6c6:	4413      	add	r3, r2
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	881b      	ldrh	r3, [r3, #0]
 800c6d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c6d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6d4:	2b20      	cmp	r3, #32
 800c6d6:	d002      	beq.n	800c6de <create_name+0xf2>
 800c6d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6da:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6dc:	d106      	bne.n	800c6ec <create_name+0x100>
		di--;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1ea      	bne.n	800c6c0 <create_name+0xd4>
 800c6ea:	e000      	b.n	800c6ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c6ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	005b      	lsls	r3, r3, #1
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d101      	bne.n	800c704 <create_name+0x118>
 800c700:	2306      	movs	r3, #6
 800c702:	e127      	b.n	800c954 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	3324      	adds	r3, #36	@ 0x24
 800c708:	220b      	movs	r2, #11
 800c70a:	2120      	movs	r1, #32
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7fe fc5b 	bl	800afc8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c712:	2300      	movs	r3, #0
 800c714:	61bb      	str	r3, [r7, #24]
 800c716:	e002      	b.n	800c71e <create_name+0x132>
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	3301      	adds	r3, #1
 800c71c:	61bb      	str	r3, [r7, #24]
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	005b      	lsls	r3, r3, #1
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	4413      	add	r3, r2
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	2b20      	cmp	r3, #32
 800c72a:	d0f5      	beq.n	800c718 <create_name+0x12c>
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	005b      	lsls	r3, r3, #1
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	4413      	add	r3, r2
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	2b2e      	cmp	r3, #46	@ 0x2e
 800c738:	d0ee      	beq.n	800c718 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d009      	beq.n	800c754 <create_name+0x168>
 800c740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c744:	f043 0303 	orr.w	r3, r3, #3
 800c748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c74c:	e002      	b.n	800c754 <create_name+0x168>
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	3b01      	subs	r3, #1
 800c752:	617b      	str	r3, [r7, #20]
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d009      	beq.n	800c76e <create_name+0x182>
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c760:	4413      	add	r3, r2
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	4413      	add	r3, r2
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c76c:	d1ef      	bne.n	800c74e <create_name+0x162>

	i = b = 0; ni = 8;
 800c76e:	2300      	movs	r3, #0
 800c770:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c774:	2300      	movs	r3, #0
 800c776:	623b      	str	r3, [r7, #32]
 800c778:	2308      	movs	r3, #8
 800c77a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	61ba      	str	r2, [r7, #24]
 800c782:	005b      	lsls	r3, r3, #1
 800c784:	68fa      	ldr	r2, [r7, #12]
 800c786:	4413      	add	r3, r2
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c78c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 8090 	beq.w	800c8b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c794:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c796:	2b20      	cmp	r3, #32
 800c798:	d006      	beq.n	800c7a8 <create_name+0x1bc>
 800c79a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c79c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c79e:	d10a      	bne.n	800c7b6 <create_name+0x1ca>
 800c7a0:	69ba      	ldr	r2, [r7, #24]
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d006      	beq.n	800c7b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7ac:	f043 0303 	orr.w	r3, r3, #3
 800c7b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7b4:	e07d      	b.n	800c8b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c7b6:	6a3a      	ldr	r2, [r7, #32]
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d203      	bcs.n	800c7c6 <create_name+0x1da>
 800c7be:	69ba      	ldr	r2, [r7, #24]
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d123      	bne.n	800c80e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	2b0b      	cmp	r3, #11
 800c7ca:	d106      	bne.n	800c7da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7d0:	f043 0303 	orr.w	r3, r3, #3
 800c7d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7d8:	e075      	b.n	800c8c6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c7da:	69ba      	ldr	r2, [r7, #24]
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d005      	beq.n	800c7ee <create_name+0x202>
 800c7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7e6:	f043 0303 	orr.w	r3, r3, #3
 800c7ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800c7ee:	69ba      	ldr	r2, [r7, #24]
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d866      	bhi.n	800c8c4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	61bb      	str	r3, [r7, #24]
 800c7fa:	2308      	movs	r3, #8
 800c7fc:	623b      	str	r3, [r7, #32]
 800c7fe:	230b      	movs	r3, #11
 800c800:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c802:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c80c:	e051      	b.n	800c8b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c80e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c810:	2b7f      	cmp	r3, #127	@ 0x7f
 800c812:	d914      	bls.n	800c83e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c814:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c816:	2100      	movs	r1, #0
 800c818:	4618      	mov	r0, r3
 800c81a:	f001 fbbf 	bl	800df9c <ff_convert>
 800c81e:	4603      	mov	r3, r0
 800c820:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c824:	2b00      	cmp	r3, #0
 800c826:	d004      	beq.n	800c832 <create_name+0x246>
 800c828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c82a:	3b80      	subs	r3, #128	@ 0x80
 800c82c:	4a23      	ldr	r2, [pc, #140]	@ (800c8bc <create_name+0x2d0>)
 800c82e:	5cd3      	ldrb	r3, [r2, r3]
 800c830:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c832:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c836:	f043 0302 	orr.w	r3, r3, #2
 800c83a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c83e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c840:	2b00      	cmp	r3, #0
 800c842:	d007      	beq.n	800c854 <create_name+0x268>
 800c844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c846:	4619      	mov	r1, r3
 800c848:	481d      	ldr	r0, [pc, #116]	@ (800c8c0 <create_name+0x2d4>)
 800c84a:	f7fe fbff 	bl	800b04c <chk_chr>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d008      	beq.n	800c866 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c854:	235f      	movs	r3, #95	@ 0x5f
 800c856:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c85c:	f043 0303 	orr.w	r3, r3, #3
 800c860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c864:	e01b      	b.n	800c89e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c868:	2b40      	cmp	r3, #64	@ 0x40
 800c86a:	d909      	bls.n	800c880 <create_name+0x294>
 800c86c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c86e:	2b5a      	cmp	r3, #90	@ 0x5a
 800c870:	d806      	bhi.n	800c880 <create_name+0x294>
					b |= 2;
 800c872:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c876:	f043 0302 	orr.w	r3, r3, #2
 800c87a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c87e:	e00e      	b.n	800c89e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c880:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c882:	2b60      	cmp	r3, #96	@ 0x60
 800c884:	d90b      	bls.n	800c89e <create_name+0x2b2>
 800c886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c888:	2b7a      	cmp	r3, #122	@ 0x7a
 800c88a:	d808      	bhi.n	800c89e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c88c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c890:	f043 0301 	orr.w	r3, r3, #1
 800c894:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c89a:	3b20      	subs	r3, #32
 800c89c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	623a      	str	r2, [r7, #32]
 800c8a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c8a6:	b2d1      	uxtb	r1, r2
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	460a      	mov	r2, r1
 800c8ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c8b2:	e763      	b.n	800c77c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c8b4:	bf00      	nop
 800c8b6:	e006      	b.n	800c8c6 <create_name+0x2da>
 800c8b8:	0800f910 	.word	0x0800f910
 800c8bc:	0800fe44 	.word	0x0800fe44
 800c8c0:	0800f91c 	.word	0x0800f91c
			if (si > di) break;			/* No extension */
 800c8c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c8cc:	2be5      	cmp	r3, #229	@ 0xe5
 800c8ce:	d103      	bne.n	800c8d8 <create_name+0x2ec>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2205      	movs	r2, #5
 800c8d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	2b08      	cmp	r3, #8
 800c8dc:	d104      	bne.n	800c8e8 <create_name+0x2fc>
 800c8de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c8e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8ec:	f003 030c 	and.w	r3, r3, #12
 800c8f0:	2b0c      	cmp	r3, #12
 800c8f2:	d005      	beq.n	800c900 <create_name+0x314>
 800c8f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8f8:	f003 0303 	and.w	r3, r3, #3
 800c8fc:	2b03      	cmp	r3, #3
 800c8fe:	d105      	bne.n	800c90c <create_name+0x320>
 800c900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c904:	f043 0302 	orr.w	r3, r3, #2
 800c908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c90c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c910:	f003 0302 	and.w	r3, r3, #2
 800c914:	2b00      	cmp	r3, #0
 800c916:	d117      	bne.n	800c948 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c918:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c91c:	f003 0303 	and.w	r3, r3, #3
 800c920:	2b01      	cmp	r3, #1
 800c922:	d105      	bne.n	800c930 <create_name+0x344>
 800c924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c928:	f043 0310 	orr.w	r3, r3, #16
 800c92c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c934:	f003 030c 	and.w	r3, r3, #12
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d105      	bne.n	800c948 <create_name+0x35c>
 800c93c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c940:	f043 0308 	orr.w	r3, r3, #8
 800c944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c94e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800c952:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c954:	4618      	mov	r0, r3
 800c956:	3728      	adds	r7, #40	@ 0x28
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c970:	e002      	b.n	800c978 <follow_path+0x1c>
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	3301      	adds	r3, #1
 800c976:	603b      	str	r3, [r7, #0]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c97e:	d0f8      	beq.n	800c972 <follow_path+0x16>
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b5c      	cmp	r3, #92	@ 0x5c
 800c986:	d0f4      	beq.n	800c972 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2200      	movs	r2, #0
 800c98c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	2b1f      	cmp	r3, #31
 800c994:	d80a      	bhi.n	800c9ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2280      	movs	r2, #128	@ 0x80
 800c99a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c99e:	2100      	movs	r1, #0
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7ff f8fe 	bl	800bba2 <dir_sdi>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	75fb      	strb	r3, [r7, #23]
 800c9aa:	e048      	b.n	800ca3e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c9ac:	463b      	mov	r3, r7
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff fe1b 	bl	800c5ec <create_name>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c9ba:	7dfb      	ldrb	r3, [r7, #23]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d139      	bne.n	800ca34 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff fc5a 	bl	800c27a <dir_find>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c9d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00a      	beq.n	800c9ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c9d8:	7dfb      	ldrb	r3, [r7, #23]
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	d12c      	bne.n	800ca38 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c9de:	7afb      	ldrb	r3, [r7, #11]
 800c9e0:	f003 0304 	and.w	r3, r3, #4
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d127      	bne.n	800ca38 <follow_path+0xdc>
 800c9e8:	2305      	movs	r3, #5
 800c9ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c9ec:	e024      	b.n	800ca38 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9ee:	7afb      	ldrb	r3, [r7, #11]
 800c9f0:	f003 0304 	and.w	r3, r3, #4
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d121      	bne.n	800ca3c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	799b      	ldrb	r3, [r3, #6]
 800c9fc:	f003 0310 	and.w	r3, r3, #16
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d102      	bne.n	800ca0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ca04:	2305      	movs	r3, #5
 800ca06:	75fb      	strb	r3, [r7, #23]
 800ca08:	e019      	b.n	800ca3e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	8992      	ldrh	r2, [r2, #12]
 800ca18:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca1c:	fb00 f202 	mul.w	r2, r0, r2
 800ca20:	1a9b      	subs	r3, r3, r2
 800ca22:	440b      	add	r3, r1
 800ca24:	4619      	mov	r1, r3
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f7ff fa61 	bl	800beee <ld_clust>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca32:	e7bb      	b.n	800c9ac <follow_path+0x50>
			if (res != FR_OK) break;
 800ca34:	bf00      	nop
 800ca36:	e002      	b.n	800ca3e <follow_path+0xe2>
				break;
 800ca38:	bf00      	nop
 800ca3a:	e000      	b.n	800ca3e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ca3c:	bf00      	nop
			}
		}
	}

	return res;
 800ca3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3718      	adds	r7, #24
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b087      	sub	sp, #28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ca50:	f04f 33ff 	mov.w	r3, #4294967295
 800ca54:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d031      	beq.n	800cac2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	617b      	str	r3, [r7, #20]
 800ca64:	e002      	b.n	800ca6c <get_ldnumber+0x24>
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	617b      	str	r3, [r7, #20]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	2b1f      	cmp	r3, #31
 800ca72:	d903      	bls.n	800ca7c <get_ldnumber+0x34>
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b3a      	cmp	r3, #58	@ 0x3a
 800ca7a:	d1f4      	bne.n	800ca66 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b3a      	cmp	r3, #58	@ 0x3a
 800ca82:	d11c      	bne.n	800cabe <get_ldnumber+0x76>
			tp = *path;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	1c5a      	adds	r2, r3, #1
 800ca8e:	60fa      	str	r2, [r7, #12]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	3b30      	subs	r3, #48	@ 0x30
 800ca94:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	2b09      	cmp	r3, #9
 800ca9a:	d80e      	bhi.n	800caba <get_ldnumber+0x72>
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d10a      	bne.n	800caba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d107      	bne.n	800caba <get_ldnumber+0x72>
					vol = (int)i;
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	3301      	adds	r3, #1
 800cab2:	617b      	str	r3, [r7, #20]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	e002      	b.n	800cac4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cabe:	2300      	movs	r3, #0
 800cac0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cac2:	693b      	ldr	r3, [r7, #16]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	371c      	adds	r7, #28
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	70da      	strb	r2, [r3, #3]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f04f 32ff 	mov.w	r2, #4294967295
 800cae6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7fe fc7a 	bl	800b3e4 <move_window>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d001      	beq.n	800cafa <check_fs+0x2a>
 800caf6:	2304      	movs	r3, #4
 800caf8:	e038      	b.n	800cb6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	3338      	adds	r3, #56	@ 0x38
 800cafe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe f9bc 	bl	800ae80 <ld_word>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d001      	beq.n	800cb18 <check_fs+0x48>
 800cb14:	2303      	movs	r3, #3
 800cb16:	e029      	b.n	800cb6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cb1e:	2be9      	cmp	r3, #233	@ 0xe9
 800cb20:	d009      	beq.n	800cb36 <check_fs+0x66>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cb28:	2beb      	cmp	r3, #235	@ 0xeb
 800cb2a:	d11e      	bne.n	800cb6a <check_fs+0x9a>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800cb32:	2b90      	cmp	r3, #144	@ 0x90
 800cb34:	d119      	bne.n	800cb6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3338      	adds	r3, #56	@ 0x38
 800cb3a:	3336      	adds	r3, #54	@ 0x36
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7fe f9b8 	bl	800aeb2 <ld_dword>
 800cb42:	4603      	mov	r3, r0
 800cb44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb48:	4a0a      	ldr	r2, [pc, #40]	@ (800cb74 <check_fs+0xa4>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d101      	bne.n	800cb52 <check_fs+0x82>
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e00c      	b.n	800cb6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	3338      	adds	r3, #56	@ 0x38
 800cb56:	3352      	adds	r3, #82	@ 0x52
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fe f9aa 	bl	800aeb2 <ld_dword>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	4a05      	ldr	r2, [pc, #20]	@ (800cb78 <check_fs+0xa8>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d101      	bne.n	800cb6a <check_fs+0x9a>
 800cb66:	2300      	movs	r3, #0
 800cb68:	e000      	b.n	800cb6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cb6a:	2302      	movs	r3, #2
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	00544146 	.word	0x00544146
 800cb78:	33544146 	.word	0x33544146

0800cb7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b096      	sub	sp, #88	@ 0x58
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	4613      	mov	r3, r2
 800cb88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f7ff ff59 	bl	800ca48 <get_ldnumber>
 800cb96:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	da01      	bge.n	800cba2 <find_volume+0x26>
 800cb9e:	230b      	movs	r3, #11
 800cba0:	e262      	b.n	800d068 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cba2:	4a9f      	ldr	r2, [pc, #636]	@ (800ce20 <find_volume+0x2a4>)
 800cba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbaa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <find_volume+0x3a>
 800cbb2:	230c      	movs	r3, #12
 800cbb4:	e258      	b.n	800d068 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cbbc:	79fb      	ldrb	r3, [r7, #7]
 800cbbe:	f023 0301 	bic.w	r3, r3, #1
 800cbc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01a      	beq.n	800cc02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fe f8b5 	bl	800ad40 <disk_status>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cbdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10c      	bne.n	800cc02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cbe8:	79fb      	ldrb	r3, [r7, #7]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d007      	beq.n	800cbfe <find_volume+0x82>
 800cbee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cbf2:	f003 0304 	and.w	r3, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cbfa:	230a      	movs	r3, #10
 800cbfc:	e234      	b.n	800d068 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800cbfe:	2300      	movs	r3, #0
 800cc00:	e232      	b.n	800d068 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc04:	2200      	movs	r2, #0
 800cc06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cc08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc12:	785b      	ldrb	r3, [r3, #1]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fe f8ad 	bl	800ad74 <disk_initialize>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cc20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cc24:	f003 0301 	and.w	r3, r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	e21b      	b.n	800d068 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d007      	beq.n	800cc46 <find_volume+0xca>
 800cc36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cc3a:	f003 0304 	and.w	r3, r3, #4
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cc42:	230a      	movs	r3, #10
 800cc44:	e210      	b.n	800d068 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc48:	7858      	ldrb	r0, [r3, #1]
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4c:	330c      	adds	r3, #12
 800cc4e:	461a      	mov	r2, r3
 800cc50:	2102      	movs	r1, #2
 800cc52:	f7fe f8f7 	bl	800ae44 <disk_ioctl>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d001      	beq.n	800cc60 <find_volume+0xe4>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e203      	b.n	800d068 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc62:	899b      	ldrh	r3, [r3, #12]
 800cc64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc68:	d80d      	bhi.n	800cc86 <find_volume+0x10a>
 800cc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6c:	899b      	ldrh	r3, [r3, #12]
 800cc6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc72:	d308      	bcc.n	800cc86 <find_volume+0x10a>
 800cc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc76:	899b      	ldrh	r3, [r3, #12]
 800cc78:	461a      	mov	r2, r3
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7c:	899b      	ldrh	r3, [r3, #12]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	4013      	ands	r3, r2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <find_volume+0x10e>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e1ee      	b.n	800d068 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cc8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cc92:	f7ff ff1d 	bl	800cad0 <check_fs>
 800cc96:	4603      	mov	r3, r0
 800cc98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cc9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d149      	bne.n	800cd38 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cca4:	2300      	movs	r3, #0
 800cca6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cca8:	e01e      	b.n	800cce8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ccb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccb2:	011b      	lsls	r3, r3, #4
 800ccb4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ccb8:	4413      	add	r3, r2
 800ccba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccbe:	3304      	adds	r3, #4
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d006      	beq.n	800ccd4 <find_volume+0x158>
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc8:	3308      	adds	r3, #8
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fe f8f1 	bl	800aeb2 <ld_dword>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	e000      	b.n	800ccd6 <find_volume+0x15a>
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	3358      	adds	r3, #88	@ 0x58
 800ccdc:	443b      	add	r3, r7
 800ccde:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cce4:	3301      	adds	r3, #1
 800cce6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccea:	2b03      	cmp	r3, #3
 800ccec:	d9dd      	bls.n	800ccaa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ccee:	2300      	movs	r3, #0
 800ccf0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ccf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d002      	beq.n	800ccfe <find_volume+0x182>
 800ccf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ccfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	3358      	adds	r3, #88	@ 0x58
 800cd04:	443b      	add	r3, r7
 800cd06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cd0a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cd0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d005      	beq.n	800cd1e <find_volume+0x1a2>
 800cd12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cd14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd16:	f7ff fedb 	bl	800cad0 <check_fs>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	e000      	b.n	800cd20 <find_volume+0x1a4>
 800cd1e:	2303      	movs	r3, #3
 800cd20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cd24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d905      	bls.n	800cd38 <find_volume+0x1bc>
 800cd2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd2e:	3301      	adds	r3, #1
 800cd30:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd34:	2b03      	cmp	r3, #3
 800cd36:	d9e2      	bls.n	800ccfe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cd38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd3c:	2b04      	cmp	r3, #4
 800cd3e:	d101      	bne.n	800cd44 <find_volume+0x1c8>
 800cd40:	2301      	movs	r3, #1
 800cd42:	e191      	b.n	800d068 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cd44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d901      	bls.n	800cd50 <find_volume+0x1d4>
 800cd4c:	230d      	movs	r3, #13
 800cd4e:	e18b      	b.n	800d068 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd52:	3338      	adds	r3, #56	@ 0x38
 800cd54:	330b      	adds	r3, #11
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe f892 	bl	800ae80 <ld_word>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	461a      	mov	r2, r3
 800cd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd62:	899b      	ldrh	r3, [r3, #12]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d001      	beq.n	800cd6c <find_volume+0x1f0>
 800cd68:	230d      	movs	r3, #13
 800cd6a:	e17d      	b.n	800d068 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6e:	3338      	adds	r3, #56	@ 0x38
 800cd70:	3316      	adds	r3, #22
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fe f884 	bl	800ae80 <ld_word>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cd7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d106      	bne.n	800cd90 <find_volume+0x214>
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	3338      	adds	r3, #56	@ 0x38
 800cd86:	3324      	adds	r3, #36	@ 0x24
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fe f892 	bl	800aeb2 <ld_dword>
 800cd8e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd94:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd98:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda2:	789b      	ldrb	r3, [r3, #2]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d005      	beq.n	800cdb4 <find_volume+0x238>
 800cda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdaa:	789b      	ldrb	r3, [r3, #2]
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d001      	beq.n	800cdb4 <find_volume+0x238>
 800cdb0:	230d      	movs	r3, #13
 800cdb2:	e159      	b.n	800d068 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb6:	789b      	ldrb	r3, [r3, #2]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdbc:	fb02 f303 	mul.w	r3, r2, r3
 800cdc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cdc8:	461a      	mov	r2, r3
 800cdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdcc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd0:	895b      	ldrh	r3, [r3, #10]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d008      	beq.n	800cde8 <find_volume+0x26c>
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd8:	895b      	ldrh	r3, [r3, #10]
 800cdda:	461a      	mov	r2, r3
 800cddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdde:	895b      	ldrh	r3, [r3, #10]
 800cde0:	3b01      	subs	r3, #1
 800cde2:	4013      	ands	r3, r2
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <find_volume+0x270>
 800cde8:	230d      	movs	r3, #13
 800cdea:	e13d      	b.n	800d068 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdee:	3338      	adds	r3, #56	@ 0x38
 800cdf0:	3311      	adds	r3, #17
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fe f844 	bl	800ae80 <ld_word>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ce00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce02:	891b      	ldrh	r3, [r3, #8]
 800ce04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce06:	8992      	ldrh	r2, [r2, #12]
 800ce08:	0952      	lsrs	r2, r2, #5
 800ce0a:	b292      	uxth	r2, r2
 800ce0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce10:	fb01 f202 	mul.w	r2, r1, r2
 800ce14:	1a9b      	subs	r3, r3, r2
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d003      	beq.n	800ce24 <find_volume+0x2a8>
 800ce1c:	230d      	movs	r3, #13
 800ce1e:	e123      	b.n	800d068 <find_volume+0x4ec>
 800ce20:	24028dd4 	.word	0x24028dd4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ce24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce26:	3338      	adds	r3, #56	@ 0x38
 800ce28:	3313      	adds	r3, #19
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fe f828 	bl	800ae80 <ld_word>
 800ce30:	4603      	mov	r3, r0
 800ce32:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ce34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <find_volume+0x2cc>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3c:	3338      	adds	r3, #56	@ 0x38
 800ce3e:	3320      	adds	r3, #32
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fe f836 	bl	800aeb2 <ld_dword>
 800ce46:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ce48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4a:	3338      	adds	r3, #56	@ 0x38
 800ce4c:	330e      	adds	r3, #14
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe f816 	bl	800ae80 <ld_word>
 800ce54:	4603      	mov	r3, r0
 800ce56:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ce58:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <find_volume+0x2e6>
 800ce5e:	230d      	movs	r3, #13
 800ce60:	e102      	b.n	800d068 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ce62:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ce64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce66:	4413      	add	r3, r2
 800ce68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce6a:	8911      	ldrh	r1, [r2, #8]
 800ce6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce6e:	8992      	ldrh	r2, [r2, #12]
 800ce70:	0952      	lsrs	r2, r2, #5
 800ce72:	b292      	uxth	r2, r2
 800ce74:	fbb1 f2f2 	udiv	r2, r1, r2
 800ce78:	b292      	uxth	r2, r2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d201      	bcs.n	800ce8a <find_volume+0x30e>
 800ce86:	230d      	movs	r3, #13
 800ce88:	e0ee      	b.n	800d068 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce92:	8952      	ldrh	r2, [r2, #10]
 800ce94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce98:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d101      	bne.n	800cea4 <find_volume+0x328>
 800cea0:	230d      	movs	r3, #13
 800cea2:	e0e1      	b.n	800d068 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800cea4:	2303      	movs	r3, #3
 800cea6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ceaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceac:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d802      	bhi.n	800ceba <find_volume+0x33e>
 800ceb4:	2302      	movs	r3, #2
 800ceb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ceba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d802      	bhi.n	800ceca <find_volume+0x34e>
 800cec4:	2301      	movs	r3, #1
 800cec6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ceca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cecc:	1c9a      	adds	r2, r3, #2
 800cece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ced2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ced6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ced8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ceda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cedc:	441a      	add	r2, r3
 800cede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cee2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee6:	441a      	add	r2, r3
 800cee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceea:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800ceec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	d11e      	bne.n	800cf32 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef6:	3338      	adds	r3, #56	@ 0x38
 800cef8:	332a      	adds	r3, #42	@ 0x2a
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fd ffc0 	bl	800ae80 <ld_word>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <find_volume+0x38e>
 800cf06:	230d      	movs	r3, #13
 800cf08:	e0ae      	b.n	800d068 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0c:	891b      	ldrh	r3, [r3, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <find_volume+0x39a>
 800cf12:	230d      	movs	r3, #13
 800cf14:	e0a8      	b.n	800d068 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cf16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf18:	3338      	adds	r3, #56	@ 0x38
 800cf1a:	332c      	adds	r3, #44	@ 0x2c
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fd ffc8 	bl	800aeb2 <ld_dword>
 800cf22:	4602      	mov	r2, r0
 800cf24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf26:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2a:	69db      	ldr	r3, [r3, #28]
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf30:	e01f      	b.n	800cf72 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf34:	891b      	ldrh	r3, [r3, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <find_volume+0x3c2>
 800cf3a:	230d      	movs	r3, #13
 800cf3c:	e094      	b.n	800d068 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf44:	441a      	add	r2, r3
 800cf46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf48:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d103      	bne.n	800cf5a <find_volume+0x3de>
 800cf52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf54:	69db      	ldr	r3, [r3, #28]
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	e00a      	b.n	800cf70 <find_volume+0x3f4>
 800cf5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf5c:	69da      	ldr	r2, [r3, #28]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	4413      	add	r3, r2
 800cf64:	085a      	lsrs	r2, r3, #1
 800cf66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cf70:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf74:	6a1a      	ldr	r2, [r3, #32]
 800cf76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf78:	899b      	ldrh	r3, [r3, #12]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf7e:	440b      	add	r3, r1
 800cf80:	3b01      	subs	r3, #1
 800cf82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cf84:	8989      	ldrh	r1, [r1, #12]
 800cf86:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d201      	bcs.n	800cf92 <find_volume+0x416>
 800cf8e:	230d      	movs	r3, #13
 800cf90:	e06a      	b.n	800d068 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf94:	f04f 32ff 	mov.w	r2, #4294967295
 800cf98:	619a      	str	r2, [r3, #24]
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9c:	699a      	ldr	r2, [r3, #24]
 800cf9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa4:	2280      	movs	r2, #128	@ 0x80
 800cfa6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cfa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cfac:	2b03      	cmp	r3, #3
 800cfae:	d149      	bne.n	800d044 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb2:	3338      	adds	r3, #56	@ 0x38
 800cfb4:	3330      	adds	r3, #48	@ 0x30
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fd ff62 	bl	800ae80 <ld_word>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d140      	bne.n	800d044 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cfc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cfca:	f7fe fa0b 	bl	800b3e4 <move_window>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d137      	bne.n	800d044 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfdc:	3338      	adds	r3, #56	@ 0x38
 800cfde:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fd ff4c 	bl	800ae80 <ld_word>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	461a      	mov	r2, r3
 800cfec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d127      	bne.n	800d044 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff6:	3338      	adds	r3, #56	@ 0x38
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fd ff5a 	bl	800aeb2 <ld_dword>
 800cffe:	4603      	mov	r3, r0
 800d000:	4a1b      	ldr	r2, [pc, #108]	@ (800d070 <find_volume+0x4f4>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d11e      	bne.n	800d044 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d008:	3338      	adds	r3, #56	@ 0x38
 800d00a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fd ff4f 	bl	800aeb2 <ld_dword>
 800d014:	4603      	mov	r3, r0
 800d016:	4a17      	ldr	r2, [pc, #92]	@ (800d074 <find_volume+0x4f8>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d113      	bne.n	800d044 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d01e:	3338      	adds	r3, #56	@ 0x38
 800d020:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d024:	4618      	mov	r0, r3
 800d026:	f7fd ff44 	bl	800aeb2 <ld_dword>
 800d02a:	4602      	mov	r2, r0
 800d02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d032:	3338      	adds	r3, #56	@ 0x38
 800d034:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fd ff3a 	bl	800aeb2 <ld_dword>
 800d03e:	4602      	mov	r2, r0
 800d040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d042:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d046:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d04a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d04c:	4b0a      	ldr	r3, [pc, #40]	@ (800d078 <find_volume+0x4fc>)
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	3301      	adds	r3, #1
 800d052:	b29a      	uxth	r2, r3
 800d054:	4b08      	ldr	r3, [pc, #32]	@ (800d078 <find_volume+0x4fc>)
 800d056:	801a      	strh	r2, [r3, #0]
 800d058:	4b07      	ldr	r3, [pc, #28]	@ (800d078 <find_volume+0x4fc>)
 800d05a:	881a      	ldrh	r2, [r3, #0]
 800d05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d060:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d062:	f7fe f957 	bl	800b314 <clear_lock>
#endif
	return FR_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3758      	adds	r7, #88	@ 0x58
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	41615252 	.word	0x41615252
 800d074:	61417272 	.word	0x61417272
 800d078:	24028dd8 	.word	0x24028dd8

0800d07c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d086:	2309      	movs	r3, #9
 800d088:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01c      	beq.n	800d0ca <validate+0x4e>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d018      	beq.n	800d0ca <validate+0x4e>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d013      	beq.n	800d0ca <validate+0x4e>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	889a      	ldrh	r2, [r3, #4]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	88db      	ldrh	r3, [r3, #6]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d10c      	bne.n	800d0ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	785b      	ldrb	r3, [r3, #1]
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7fd fe42 	bl	800ad40 <disk_status>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	f003 0301 	and.w	r3, r3, #1
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d101      	bne.n	800d0ca <validate+0x4e>
			res = FR_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d102      	bne.n	800d0d6 <validate+0x5a>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	e000      	b.n	800d0d8 <validate+0x5c>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	683a      	ldr	r2, [r7, #0]
 800d0da:	6013      	str	r3, [r2, #0]
	return res;
 800d0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
	...

0800d0e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b088      	sub	sp, #32
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d0fa:	f107 0310 	add.w	r3, r7, #16
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff fca2 	bl	800ca48 <get_ldnumber>
 800d104:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	da01      	bge.n	800d110 <f_mount+0x28>
 800d10c:	230b      	movs	r3, #11
 800d10e:	e02b      	b.n	800d168 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d110:	4a17      	ldr	r2, [pc, #92]	@ (800d170 <f_mount+0x88>)
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d118:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d005      	beq.n	800d12c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d120:	69b8      	ldr	r0, [r7, #24]
 800d122:	f7fe f8f7 	bl	800b314 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	2200      	movs	r2, #0
 800d12a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	490d      	ldr	r1, [pc, #52]	@ (800d170 <f_mount+0x88>)
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d002      	beq.n	800d14e <f_mount+0x66>
 800d148:	79fb      	ldrb	r3, [r7, #7]
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d001      	beq.n	800d152 <f_mount+0x6a>
 800d14e:	2300      	movs	r3, #0
 800d150:	e00a      	b.n	800d168 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d152:	f107 010c 	add.w	r1, r7, #12
 800d156:	f107 0308 	add.w	r3, r7, #8
 800d15a:	2200      	movs	r2, #0
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7ff fd0d 	bl	800cb7c <find_volume>
 800d162:	4603      	mov	r3, r0
 800d164:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d166:	7dfb      	ldrb	r3, [r7, #23]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3720      	adds	r7, #32
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	24028dd4 	.word	0x24028dd4

0800d174 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b09a      	sub	sp, #104	@ 0x68
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4613      	mov	r3, r2
 800d180:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d101      	bne.n	800d18c <f_open+0x18>
 800d188:	2309      	movs	r3, #9
 800d18a:	e1c7      	b.n	800d51c <f_open+0x3a8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d18c:	79fb      	ldrb	r3, [r7, #7]
 800d18e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d192:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d194:	79fa      	ldrb	r2, [r7, #7]
 800d196:	f107 0110 	add.w	r1, r7, #16
 800d19a:	f107 0308 	add.w	r3, r7, #8
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7ff fcec 	bl	800cb7c <find_volume>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800d1aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f040 81ab 	bne.w	800d50a <f_open+0x396>
		dj.obj.fs = fs;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800d1b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d1bc:	f000 ffb4 	bl	800e128 <ff_memalloc>
 800d1c0:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d1c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d101      	bne.n	800d1cc <f_open+0x58>
 800d1c8:	2311      	movs	r3, #17
 800d1ca:	e1a7      	b.n	800d51c <f_open+0x3a8>
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1d0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	f107 0314 	add.w	r3, r7, #20
 800d1d8:	4611      	mov	r1, r2
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7ff fbbe 	bl	800c95c <follow_path>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d1e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d118      	bne.n	800d220 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d1ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d1f2:	b25b      	sxtb	r3, r3
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	da03      	bge.n	800d200 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800d1f8:	2306      	movs	r3, #6
 800d1fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d1fe:	e00f      	b.n	800d220 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d200:	79fb      	ldrb	r3, [r7, #7]
 800d202:	2b01      	cmp	r3, #1
 800d204:	bf8c      	ite	hi
 800d206:	2301      	movhi	r3, #1
 800d208:	2300      	movls	r3, #0
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	461a      	mov	r2, r3
 800d20e:	f107 0314 	add.w	r3, r7, #20
 800d212:	4611      	mov	r1, r2
 800d214:	4618      	mov	r0, r3
 800d216:	f7fd ff35 	bl	800b084 <chk_lock>
 800d21a:	4603      	mov	r3, r0
 800d21c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d220:	79fb      	ldrb	r3, [r7, #7]
 800d222:	f003 031c 	and.w	r3, r3, #28
 800d226:	2b00      	cmp	r3, #0
 800d228:	d07f      	beq.n	800d32a <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800d22a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d017      	beq.n	800d262 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d232:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d236:	2b04      	cmp	r3, #4
 800d238:	d10e      	bne.n	800d258 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d23a:	f7fd ff7f 	bl	800b13c <enq_lock>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d006      	beq.n	800d252 <f_open+0xde>
 800d244:	f107 0314 	add.w	r3, r7, #20
 800d248:	4618      	mov	r0, r3
 800d24a:	f7ff f8d7 	bl	800c3fc <dir_register>
 800d24e:	4603      	mov	r3, r0
 800d250:	e000      	b.n	800d254 <f_open+0xe0>
 800d252:	2312      	movs	r3, #18
 800d254:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	f043 0308 	orr.w	r3, r3, #8
 800d25e:	71fb      	strb	r3, [r7, #7]
 800d260:	e010      	b.n	800d284 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d262:	7ebb      	ldrb	r3, [r7, #26]
 800d264:	f003 0311 	and.w	r3, r3, #17
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <f_open+0x100>
					res = FR_DENIED;
 800d26c:	2307      	movs	r3, #7
 800d26e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d272:	e007      	b.n	800d284 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d274:	79fb      	ldrb	r3, [r7, #7]
 800d276:	f003 0304 	and.w	r3, r3, #4
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d002      	beq.n	800d284 <f_open+0x110>
 800d27e:	2308      	movs	r3, #8
 800d280:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d284:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d168      	bne.n	800d35e <f_open+0x1ea>
 800d28c:	79fb      	ldrb	r3, [r7, #7]
 800d28e:	f003 0308 	and.w	r3, r3, #8
 800d292:	2b00      	cmp	r3, #0
 800d294:	d063      	beq.n	800d35e <f_open+0x1ea>
				dw = GET_FATTIME();
 800d296:	f7fd fd44 	bl	800ad22 <get_fattime>
 800d29a:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d29c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d29e:	330e      	adds	r3, #14
 800d2a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fd fe43 	bl	800af2e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2aa:	3316      	adds	r3, #22
 800d2ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fd fe3d 	bl	800af2e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b6:	330b      	adds	r3, #11
 800d2b8:	2220      	movs	r2, #32
 800d2ba:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fe fe13 	bl	800beee <ld_clust>
 800d2c8:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fe fe2b 	bl	800bf2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2d8:	331c      	adds	r3, #28
 800d2da:	2100      	movs	r1, #0
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fd fe26 	bl	800af2e <st_dword>
					fs->wflag = 1;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d2e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d037      	beq.n	800d35e <f_open+0x1ea>
						dw = fs->winsect;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2f2:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800d2f4:	f107 0314 	add.w	r3, r7, #20
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe fb1b 	bl	800b938 <remove_chain>
 800d302:	4603      	mov	r3, r0
 800d304:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800d308:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d126      	bne.n	800d35e <f_open+0x1ea>
							res = move_window(fs, dw);
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d314:	4618      	mov	r0, r3
 800d316:	f7fe f865 	bl	800b3e4 <move_window>
 800d31a:	4603      	mov	r3, r0
 800d31c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d324:	3a01      	subs	r2, #1
 800d326:	615a      	str	r2, [r3, #20]
 800d328:	e019      	b.n	800d35e <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d32a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d115      	bne.n	800d35e <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d332:	7ebb      	ldrb	r3, [r7, #26]
 800d334:	f003 0310 	and.w	r3, r3, #16
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d003      	beq.n	800d344 <f_open+0x1d0>
					res = FR_NO_FILE;
 800d33c:	2304      	movs	r3, #4
 800d33e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d342:	e00c      	b.n	800d35e <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d344:	79fb      	ldrb	r3, [r7, #7]
 800d346:	f003 0302 	and.w	r3, r3, #2
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d007      	beq.n	800d35e <f_open+0x1ea>
 800d34e:	7ebb      	ldrb	r3, [r7, #26]
 800d350:	f003 0301 	and.w	r3, r3, #1
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <f_open+0x1ea>
						res = FR_DENIED;
 800d358:	2307      	movs	r3, #7
 800d35a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d35e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d362:	2b00      	cmp	r3, #0
 800d364:	d126      	bne.n	800d3b4 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	f003 0308 	and.w	r3, r3, #8
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d003      	beq.n	800d378 <f_open+0x204>
				mode |= FA_MODIFIED;
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d376:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d386:	79fb      	ldrb	r3, [r7, #7]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	bf8c      	ite	hi
 800d38c:	2301      	movhi	r3, #1
 800d38e:	2300      	movls	r3, #0
 800d390:	b2db      	uxtb	r3, r3
 800d392:	461a      	mov	r2, r3
 800d394:	f107 0314 	add.w	r3, r7, #20
 800d398:	4611      	mov	r1, r2
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7fd fef0 	bl	800b180 <inc_lock>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d102      	bne.n	800d3b4 <f_open+0x240>
 800d3ae:	2302      	movs	r3, #2
 800d3b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d3b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f040 80a3 	bne.w	800d504 <f_open+0x390>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fe fd92 	bl	800beee <ld_clust>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3d2:	331c      	adds	r3, #28
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fd fd6c 	bl	800aeb2 <ld_dword>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d3e6:	693a      	ldr	r2, [r7, #16]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	88da      	ldrh	r2, [r3, #6]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	79fa      	ldrb	r2, [r7, #7]
 800d3f8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2200      	movs	r2, #0
 800d404:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	3330      	adds	r3, #48	@ 0x30
 800d410:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d414:	2100      	movs	r1, #0
 800d416:	4618      	mov	r0, r3
 800d418:	f7fd fdd6 	bl	800afc8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d41c:	79fb      	ldrb	r3, [r7, #7]
 800d41e:	f003 0320 	and.w	r3, r3, #32
 800d422:	2b00      	cmp	r3, #0
 800d424:	d06e      	beq.n	800d504 <f_open+0x390>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d06a      	beq.n	800d504 <f_open+0x390>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	68da      	ldr	r2, [r3, #12]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	895b      	ldrh	r3, [r3, #10]
 800d43a:	461a      	mov	r2, r3
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	899b      	ldrh	r3, [r3, #12]
 800d440:	fb02 f303 	mul.w	r3, r2, r3
 800d444:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d452:	e016      	b.n	800d482 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fe f880 	bl	800b55e <get_fat>
 800d45e:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d460:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d462:	2b01      	cmp	r3, #1
 800d464:	d802      	bhi.n	800d46c <f_open+0x2f8>
 800d466:	2302      	movs	r3, #2
 800d468:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d46c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d472:	d102      	bne.n	800d47a <f_open+0x306>
 800d474:	2301      	movs	r3, #1
 800d476:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d47a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d47c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d482:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d486:	2b00      	cmp	r3, #0
 800d488:	d103      	bne.n	800d492 <f_open+0x31e>
 800d48a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d48c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d48e:	429a      	cmp	r2, r3
 800d490:	d8e0      	bhi.n	800d454 <f_open+0x2e0>
				}
				fp->clust = clst;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d496:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d498:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d131      	bne.n	800d504 <f_open+0x390>
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	899b      	ldrh	r3, [r3, #12]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4ac:	fb01 f202 	mul.w	r2, r1, r2
 800d4b0:	1a9b      	subs	r3, r3, r2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d026      	beq.n	800d504 <f_open+0x390>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fe f830 	bl	800b520 <clust2sect>
 800d4c0:	64b8      	str	r0, [r7, #72]	@ 0x48
 800d4c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d103      	bne.n	800d4d0 <f_open+0x35c>
						res = FR_INT_ERR;
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d4ce:	e019      	b.n	800d504 <f_open+0x390>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	899b      	ldrh	r3, [r3, #12]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4d8:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4de:	441a      	add	r2, r3
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	7858      	ldrb	r0, [r3, #1]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6a1a      	ldr	r2, [r3, #32]
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	f7fd fc66 	bl	800adc4 <disk_read>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d002      	beq.n	800d504 <f_open+0x390>
 800d4fe:	2301      	movs	r3, #1
 800d500:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d504:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d506:	f000 fe1b 	bl	800e140 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d50a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d002      	beq.n	800d518 <f_open+0x3a4>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2200      	movs	r2, #0
 800d516:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d518:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3768      	adds	r7, #104	@ 0x68
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b08e      	sub	sp, #56	@ 0x38
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
 800d530:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f107 0214 	add.w	r2, r7, #20
 800d542:	4611      	mov	r1, r2
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff fd99 	bl	800d07c <validate>
 800d54a:	4603      	mov	r3, r0
 800d54c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d550:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d554:	2b00      	cmp	r3, #0
 800d556:	d107      	bne.n	800d568 <f_read+0x44>
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	7d5b      	ldrb	r3, [r3, #21]
 800d55c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d560:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <f_read+0x4a>
 800d568:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d56c:	e135      	b.n	800d7da <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	7d1b      	ldrb	r3, [r3, #20]
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	2b00      	cmp	r3, #0
 800d578:	d101      	bne.n	800d57e <f_read+0x5a>
 800d57a:	2307      	movs	r3, #7
 800d57c:	e12d      	b.n	800d7da <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	68da      	ldr	r2, [r3, #12]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	429a      	cmp	r2, r3
 800d590:	f240 811e 	bls.w	800d7d0 <f_read+0x2ac>
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d598:	e11a      	b.n	800d7d0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	699b      	ldr	r3, [r3, #24]
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	8992      	ldrh	r2, [r2, #12]
 800d5a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5a6:	fb01 f202 	mul.w	r2, r1, r2
 800d5aa:	1a9b      	subs	r3, r3, r2
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f040 80d5 	bne.w	800d75c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	8992      	ldrh	r2, [r2, #12]
 800d5ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5be:	697a      	ldr	r2, [r7, #20]
 800d5c0:	8952      	ldrh	r2, [r2, #10]
 800d5c2:	3a01      	subs	r2, #1
 800d5c4:	4013      	ands	r3, r2
 800d5c6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d12f      	bne.n	800d62e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	699b      	ldr	r3, [r3, #24]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d103      	bne.n	800d5de <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5dc:	e013      	b.n	800d606 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d007      	beq.n	800d5f6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	699b      	ldr	r3, [r3, #24]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f7fe faa0 	bl	800bb32 <clmt_clust>
 800d5f2:	6338      	str	r0, [r7, #48]	@ 0x30
 800d5f4:	e007      	b.n	800d606 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	69db      	ldr	r3, [r3, #28]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4610      	mov	r0, r2
 800d600:	f7fd ffad 	bl	800b55e <get_fat>
 800d604:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d804      	bhi.n	800d616 <f_read+0xf2>
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2202      	movs	r2, #2
 800d610:	755a      	strb	r2, [r3, #21]
 800d612:	2302      	movs	r3, #2
 800d614:	e0e1      	b.n	800d7da <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61c:	d104      	bne.n	800d628 <f_read+0x104>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2201      	movs	r2, #1
 800d622:	755a      	strb	r2, [r3, #21]
 800d624:	2301      	movs	r3, #1
 800d626:	e0d8      	b.n	800d7da <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d62c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	69db      	ldr	r3, [r3, #28]
 800d634:	4619      	mov	r1, r3
 800d636:	4610      	mov	r0, r2
 800d638:	f7fd ff72 	bl	800b520 <clust2sect>
 800d63c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d104      	bne.n	800d64e <f_read+0x12a>
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2202      	movs	r2, #2
 800d648:	755a      	strb	r2, [r3, #21]
 800d64a:	2302      	movs	r3, #2
 800d64c:	e0c5      	b.n	800d7da <f_read+0x2b6>
			sect += csect;
 800d64e:	69ba      	ldr	r2, [r7, #24]
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	4413      	add	r3, r2
 800d654:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	899b      	ldrh	r3, [r3, #12]
 800d65a:	461a      	mov	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d662:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d666:	2b00      	cmp	r3, #0
 800d668:	d041      	beq.n	800d6ee <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d66a:	69fa      	ldr	r2, [r7, #28]
 800d66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d66e:	4413      	add	r3, r2
 800d670:	697a      	ldr	r2, [r7, #20]
 800d672:	8952      	ldrh	r2, [r2, #10]
 800d674:	4293      	cmp	r3, r2
 800d676:	d905      	bls.n	800d684 <f_read+0x160>
					cc = fs->csize - csect;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	895b      	ldrh	r3, [r3, #10]
 800d67c:	461a      	mov	r2, r3
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	7858      	ldrb	r0, [r3, #1]
 800d688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d68a:	69ba      	ldr	r2, [r7, #24]
 800d68c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d68e:	f7fd fb99 	bl	800adc4 <disk_read>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d004      	beq.n	800d6a2 <f_read+0x17e>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2201      	movs	r2, #1
 800d69c:	755a      	strb	r2, [r3, #21]
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e09b      	b.n	800d7da <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	7d1b      	ldrb	r3, [r3, #20]
 800d6a6:	b25b      	sxtb	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	da18      	bge.n	800d6de <f_read+0x1ba>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6a1a      	ldr	r2, [r3, #32]
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d911      	bls.n	800d6de <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6a1a      	ldr	r2, [r3, #32]
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	1ad3      	subs	r3, r2, r3
 800d6c2:	697a      	ldr	r2, [r7, #20]
 800d6c4:	8992      	ldrh	r2, [r2, #12]
 800d6c6:	fb02 f303 	mul.w	r3, r2, r3
 800d6ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6cc:	18d0      	adds	r0, r2, r3
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	899b      	ldrh	r3, [r3, #12]
 800d6d8:	461a      	mov	r2, r3
 800d6da:	f7fd fc54 	bl	800af86 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	899b      	ldrh	r3, [r3, #12]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e6:	fb02 f303 	mul.w	r3, r2, r3
 800d6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d6ec:	e05c      	b.n	800d7a8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6a1b      	ldr	r3, [r3, #32]
 800d6f2:	69ba      	ldr	r2, [r7, #24]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d02e      	beq.n	800d756 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	7d1b      	ldrb	r3, [r3, #20]
 800d6fc:	b25b      	sxtb	r3, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	da18      	bge.n	800d734 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	7858      	ldrb	r0, [r3, #1]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6a1a      	ldr	r2, [r3, #32]
 800d710:	2301      	movs	r3, #1
 800d712:	f7fd fb77 	bl	800ae04 <disk_write>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d004      	beq.n	800d726 <f_read+0x202>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2201      	movs	r2, #1
 800d720:	755a      	strb	r2, [r3, #21]
 800d722:	2301      	movs	r3, #1
 800d724:	e059      	b.n	800d7da <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	7d1b      	ldrb	r3, [r3, #20]
 800d72a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	7858      	ldrb	r0, [r3, #1]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d73e:	2301      	movs	r3, #1
 800d740:	69ba      	ldr	r2, [r7, #24]
 800d742:	f7fd fb3f 	bl	800adc4 <disk_read>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d004      	beq.n	800d756 <f_read+0x232>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2201      	movs	r2, #1
 800d750:	755a      	strb	r2, [r3, #21]
 800d752:	2301      	movs	r3, #1
 800d754:	e041      	b.n	800d7da <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	69ba      	ldr	r2, [r7, #24]
 800d75a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	899b      	ldrh	r3, [r3, #12]
 800d760:	4618      	mov	r0, r3
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	699b      	ldr	r3, [r3, #24]
 800d766:	697a      	ldr	r2, [r7, #20]
 800d768:	8992      	ldrh	r2, [r2, #12]
 800d76a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d76e:	fb01 f202 	mul.w	r2, r1, r2
 800d772:	1a9b      	subs	r3, r3, r2
 800d774:	1ac3      	subs	r3, r0, r3
 800d776:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d901      	bls.n	800d784 <f_read+0x260>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	697a      	ldr	r2, [r7, #20]
 800d790:	8992      	ldrh	r2, [r2, #12]
 800d792:	fbb3 f0f2 	udiv	r0, r3, r2
 800d796:	fb00 f202 	mul.w	r2, r0, r2
 800d79a:	1a9b      	subs	r3, r3, r2
 800d79c:	440b      	add	r3, r1
 800d79e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7a4:	f7fd fbef 	bl	800af86 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d7a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ac:	4413      	add	r3, r2
 800d7ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	699a      	ldr	r2, [r3, #24]
 800d7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b6:	441a      	add	r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	619a      	str	r2, [r3, #24]
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c2:	441a      	add	r2, r3
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	601a      	str	r2, [r3, #0]
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f47f aee1 	bne.w	800d59a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3738      	adds	r7, #56	@ 0x38
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}

0800d7e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b086      	sub	sp, #24
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f107 0208 	add.w	r2, r7, #8
 800d7f0:	4611      	mov	r1, r2
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff fc42 	bl	800d07c <validate>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7fc:	7dfb      	ldrb	r3, [r7, #23]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d168      	bne.n	800d8d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	7d1b      	ldrb	r3, [r3, #20]
 800d806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d062      	beq.n	800d8d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	7d1b      	ldrb	r3, [r3, #20]
 800d812:	b25b      	sxtb	r3, r3
 800d814:	2b00      	cmp	r3, #0
 800d816:	da15      	bge.n	800d844 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	7858      	ldrb	r0, [r3, #1]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6a1a      	ldr	r2, [r3, #32]
 800d826:	2301      	movs	r3, #1
 800d828:	f7fd faec 	bl	800ae04 <disk_write>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <f_sync+0x54>
 800d832:	2301      	movs	r3, #1
 800d834:	e04f      	b.n	800d8d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	7d1b      	ldrb	r3, [r3, #20]
 800d83a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d844:	f7fd fa6d 	bl	800ad22 <get_fattime>
 800d848:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d84a:	68ba      	ldr	r2, [r7, #8]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d850:	4619      	mov	r1, r3
 800d852:	4610      	mov	r0, r2
 800d854:	f7fd fdc6 	bl	800b3e4 <move_window>
 800d858:	4603      	mov	r3, r0
 800d85a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d85c:	7dfb      	ldrb	r3, [r7, #23]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d138      	bne.n	800d8d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d866:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	330b      	adds	r3, #11
 800d86c:	781a      	ldrb	r2, [r3, #0]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	330b      	adds	r3, #11
 800d872:	f042 0220 	orr.w	r2, r2, #32
 800d876:	b2d2      	uxtb	r2, r2
 800d878:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6818      	ldr	r0, [r3, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	461a      	mov	r2, r3
 800d884:	68f9      	ldr	r1, [r7, #12]
 800d886:	f7fe fb51 	bl	800bf2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f103 021c 	add.w	r2, r3, #28
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	4619      	mov	r1, r3
 800d896:	4610      	mov	r0, r2
 800d898:	f7fd fb49 	bl	800af2e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	3316      	adds	r3, #22
 800d8a0:	6939      	ldr	r1, [r7, #16]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fd fb43 	bl	800af2e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	3312      	adds	r3, #18
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fd fb22 	bl	800aef8 <st_word>
					fs->wflag = 1;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fd fdbf 	bl	800b440 <sync_fs>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	7d1b      	ldrb	r3, [r3, #20]
 800d8ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b084      	sub	sp, #16
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff ff7b 	bl	800d7e2 <f_sync>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d8f0:	7bfb      	ldrb	r3, [r7, #15]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d118      	bne.n	800d928 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f107 0208 	add.w	r2, r7, #8
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7ff fbbc 	bl	800d07c <validate>
 800d904:	4603      	mov	r3, r0
 800d906:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d908:	7bfb      	ldrb	r3, [r7, #15]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d10c      	bne.n	800d928 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	4618      	mov	r0, r3
 800d914:	f7fd fcc2 	bl	800b29c <dec_lock>
 800d918:	4603      	mov	r3, r0
 800d91a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d91c:	7bfb      	ldrb	r3, [r7, #15]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d102      	bne.n	800d928 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d928:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b090      	sub	sp, #64	@ 0x40
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f107 0208 	add.w	r2, r7, #8
 800d942:	4611      	mov	r1, r2
 800d944:	4618      	mov	r0, r3
 800d946:	f7ff fb99 	bl	800d07c <validate>
 800d94a:	4603      	mov	r3, r0
 800d94c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d950:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d954:	2b00      	cmp	r3, #0
 800d956:	d103      	bne.n	800d960 <f_lseek+0x2e>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	7d5b      	ldrb	r3, [r3, #21]
 800d95c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d960:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <f_lseek+0x3c>
 800d968:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d96c:	e201      	b.n	800dd72 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d972:	2b00      	cmp	r3, #0
 800d974:	f000 80d9 	beq.w	800db2a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d97e:	d15a      	bne.n	800da36 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d984:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d988:	1d1a      	adds	r2, r3, #4
 800d98a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	617b      	str	r3, [r7, #20]
 800d990:	2302      	movs	r3, #2
 800d992:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d03a      	beq.n	800da16 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a2:	613b      	str	r3, [r7, #16]
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9aa:	3302      	adds	r3, #2
 800d9ac:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b0:	60fb      	str	r3, [r7, #12]
 800d9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fd fdce 	bl	800b55e <get_fat>
 800d9c2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d804      	bhi.n	800d9d4 <f_lseek+0xa2>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2202      	movs	r2, #2
 800d9ce:	755a      	strb	r2, [r3, #21]
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	e1ce      	b.n	800dd72 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9da:	d104      	bne.n	800d9e6 <f_lseek+0xb4>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	755a      	strb	r2, [r3, #21]
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e1c5      	b.n	800dd72 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d0de      	beq.n	800d9ae <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d9f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d809      	bhi.n	800da0c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9fa:	1d1a      	adds	r2, r3, #4
 800d9fc:	627a      	str	r2, [r7, #36]	@ 0x24
 800d9fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da04:	1d1a      	adds	r2, r3, #4
 800da06:	627a      	str	r2, [r7, #36]	@ 0x24
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	69db      	ldr	r3, [r3, #28]
 800da10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da12:	429a      	cmp	r2, r3
 800da14:	d3c4      	bcc.n	800d9a0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da1c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800da1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	429a      	cmp	r2, r3
 800da24:	d803      	bhi.n	800da2e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800da26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da28:	2200      	movs	r2, #0
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	e19f      	b.n	800dd6e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800da2e:	2311      	movs	r3, #17
 800da30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800da34:	e19b      	b.n	800dd6e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d902      	bls.n	800da46 <f_lseek+0x114>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	683a      	ldr	r2, [r7, #0]
 800da4a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f000 818d 	beq.w	800dd6e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	3b01      	subs	r3, #1
 800da58:	4619      	mov	r1, r3
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f7fe f869 	bl	800bb32 <clmt_clust>
 800da60:	4602      	mov	r2, r0
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800da66:	68ba      	ldr	r2, [r7, #8]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	69db      	ldr	r3, [r3, #28]
 800da6c:	4619      	mov	r1, r3
 800da6e:	4610      	mov	r0, r2
 800da70:	f7fd fd56 	bl	800b520 <clust2sect>
 800da74:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d104      	bne.n	800da86 <f_lseek+0x154>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2202      	movs	r2, #2
 800da80:	755a      	strb	r2, [r3, #21]
 800da82:	2302      	movs	r3, #2
 800da84:	e175      	b.n	800dd72 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	3b01      	subs	r3, #1
 800da8a:	68ba      	ldr	r2, [r7, #8]
 800da8c:	8992      	ldrh	r2, [r2, #12]
 800da8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	8952      	ldrh	r2, [r2, #10]
 800da96:	3a01      	subs	r2, #1
 800da98:	4013      	ands	r3, r2
 800da9a:	69ba      	ldr	r2, [r7, #24]
 800da9c:	4413      	add	r3, r2
 800da9e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	8992      	ldrh	r2, [r2, #12]
 800daa8:	fbb3 f1f2 	udiv	r1, r3, r2
 800daac:	fb01 f202 	mul.w	r2, r1, r2
 800dab0:	1a9b      	subs	r3, r3, r2
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f000 815b 	beq.w	800dd6e <f_lseek+0x43c>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6a1b      	ldr	r3, [r3, #32]
 800dabc:	69ba      	ldr	r2, [r7, #24]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	f000 8155 	beq.w	800dd6e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	7d1b      	ldrb	r3, [r3, #20]
 800dac8:	b25b      	sxtb	r3, r3
 800daca:	2b00      	cmp	r3, #0
 800dacc:	da18      	bge.n	800db00 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	7858      	ldrb	r0, [r3, #1]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6a1a      	ldr	r2, [r3, #32]
 800dadc:	2301      	movs	r3, #1
 800dade:	f7fd f991 	bl	800ae04 <disk_write>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d004      	beq.n	800daf2 <f_lseek+0x1c0>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	755a      	strb	r2, [r3, #21]
 800daee:	2301      	movs	r3, #1
 800daf0:	e13f      	b.n	800dd72 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	7d1b      	ldrb	r3, [r3, #20]
 800daf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	7858      	ldrb	r0, [r3, #1]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db0a:	2301      	movs	r3, #1
 800db0c:	69ba      	ldr	r2, [r7, #24]
 800db0e:	f7fd f959 	bl	800adc4 <disk_read>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d004      	beq.n	800db22 <f_lseek+0x1f0>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	755a      	strb	r2, [r3, #21]
 800db1e:	2301      	movs	r3, #1
 800db20:	e127      	b.n	800dd72 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	69ba      	ldr	r2, [r7, #24]
 800db26:	621a      	str	r2, [r3, #32]
 800db28:	e121      	b.n	800dd6e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	429a      	cmp	r2, r3
 800db32:	d908      	bls.n	800db46 <f_lseek+0x214>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	7d1b      	ldrb	r3, [r3, #20]
 800db38:	f003 0302 	and.w	r3, r3, #2
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d102      	bne.n	800db46 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	699b      	ldr	r3, [r3, #24]
 800db4a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db54:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f000 80b5 	beq.w	800dcc8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	895b      	ldrh	r3, [r3, #10]
 800db62:	461a      	mov	r2, r3
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	899b      	ldrh	r3, [r3, #12]
 800db68:	fb02 f303 	mul.w	r3, r2, r3
 800db6c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800db6e:	6a3b      	ldr	r3, [r7, #32]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d01b      	beq.n	800dbac <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	1e5a      	subs	r2, r3, #1
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	fbb2 f2f3 	udiv	r2, r2, r3
 800db7e:	6a3b      	ldr	r3, [r7, #32]
 800db80:	1e59      	subs	r1, r3, #1
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800db88:	429a      	cmp	r2, r3
 800db8a:	d30f      	bcc.n	800dbac <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800db8c:	6a3b      	ldr	r3, [r7, #32]
 800db8e:	1e5a      	subs	r2, r3, #1
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	425b      	negs	r3, r3
 800db94:	401a      	ands	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	699b      	ldr	r3, [r3, #24]
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	69db      	ldr	r3, [r3, #28]
 800dba8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dbaa:	e022      	b.n	800dbf2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d119      	bne.n	800dbec <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2100      	movs	r1, #0
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7fd ff20 	bl	800ba02 <create_chain>
 800dbc2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d104      	bne.n	800dbd4 <f_lseek+0x2a2>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2202      	movs	r2, #2
 800dbce:	755a      	strb	r2, [r3, #21]
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e0ce      	b.n	800dd72 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbda:	d104      	bne.n	800dbe6 <f_lseek+0x2b4>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2201      	movs	r2, #1
 800dbe0:	755a      	strb	r2, [r3, #21]
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e0c5      	b.n	800dd72 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbea:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbf0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d067      	beq.n	800dcc8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800dbf8:	e03a      	b.n	800dc70 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800dbfa:	683a      	ldr	r2, [r7, #0]
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	603b      	str	r3, [r7, #0]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	699a      	ldr	r2, [r3, #24]
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	441a      	add	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	7d1b      	ldrb	r3, [r3, #20]
 800dc12:	f003 0302 	and.w	r3, r3, #2
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00b      	beq.n	800dc32 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fd feef 	bl	800ba02 <create_chain>
 800dc24:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d108      	bne.n	800dc3e <f_lseek+0x30c>
							ofs = 0; break;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	603b      	str	r3, [r7, #0]
 800dc30:	e022      	b.n	800dc78 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fd fc91 	bl	800b55e <get_fat>
 800dc3c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc44:	d104      	bne.n	800dc50 <f_lseek+0x31e>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	755a      	strb	r2, [r3, #21]
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e090      	b.n	800dd72 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d904      	bls.n	800dc60 <f_lseek+0x32e>
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	69db      	ldr	r3, [r3, #28]
 800dc5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d304      	bcc.n	800dc6a <f_lseek+0x338>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2202      	movs	r2, #2
 800dc64:	755a      	strb	r2, [r3, #21]
 800dc66:	2302      	movs	r3, #2
 800dc68:	e083      	b.n	800dd72 <f_lseek+0x440>
					fp->clust = clst;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc6e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d8c0      	bhi.n	800dbfa <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	699a      	ldr	r2, [r3, #24]
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	441a      	add	r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	899b      	ldrh	r3, [r3, #12]
 800dc88:	461a      	mov	r2, r3
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc90:	fb01 f202 	mul.w	r2, r1, r2
 800dc94:	1a9b      	subs	r3, r3, r2
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d016      	beq.n	800dcc8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fd fc3e 	bl	800b520 <clust2sect>
 800dca4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d104      	bne.n	800dcb6 <f_lseek+0x384>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2202      	movs	r2, #2
 800dcb0:	755a      	strb	r2, [r3, #21]
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	e05d      	b.n	800dd72 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	899b      	ldrh	r3, [r3, #12]
 800dcba:	461a      	mov	r2, r3
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcc4:	4413      	add	r3, r2
 800dcc6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	699a      	ldr	r2, [r3, #24]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d90a      	bls.n	800dcea <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	699a      	ldr	r2, [r3, #24]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	7d1b      	ldrb	r3, [r3, #20]
 800dce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	699b      	ldr	r3, [r3, #24]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	8992      	ldrh	r2, [r2, #12]
 800dcf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcf6:	fb01 f202 	mul.w	r2, r1, r2
 800dcfa:	1a9b      	subs	r3, r3, r2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d036      	beq.n	800dd6e <f_lseek+0x43c>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d031      	beq.n	800dd6e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	7d1b      	ldrb	r3, [r3, #20]
 800dd0e:	b25b      	sxtb	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	da18      	bge.n	800dd46 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	7858      	ldrb	r0, [r3, #1]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6a1a      	ldr	r2, [r3, #32]
 800dd22:	2301      	movs	r3, #1
 800dd24:	f7fd f86e 	bl	800ae04 <disk_write>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d004      	beq.n	800dd38 <f_lseek+0x406>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2201      	movs	r2, #1
 800dd32:	755a      	strb	r2, [r3, #21]
 800dd34:	2301      	movs	r3, #1
 800dd36:	e01c      	b.n	800dd72 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	7d1b      	ldrb	r3, [r3, #20]
 800dd3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	7858      	ldrb	r0, [r3, #1]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd50:	2301      	movs	r3, #1
 800dd52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd54:	f7fd f836 	bl	800adc4 <disk_read>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d004      	beq.n	800dd68 <f_lseek+0x436>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2201      	movs	r2, #1
 800dd62:	755a      	strb	r2, [r3, #21]
 800dd64:	2301      	movs	r3, #1
 800dd66:	e004      	b.n	800dd72 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd6c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dd6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3740      	adds	r7, #64	@ 0x40
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b092      	sub	sp, #72	@ 0x48
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	60f8      	str	r0, [r7, #12]
 800dd82:	60b9      	str	r1, [r7, #8]
 800dd84:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800dd86:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800dd8a:	f107 030c 	add.w	r3, r7, #12
 800dd8e:	2200      	movs	r2, #0
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7fe fef3 	bl	800cb7c <find_volume>
 800dd96:	4603      	mov	r3, r0
 800dd98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800dd9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f040 8099 	bne.w	800ded8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800dda6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ddac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddae:	699a      	ldr	r2, [r3, #24]
 800ddb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb2:	69db      	ldr	r3, [r3, #28]
 800ddb4:	3b02      	subs	r3, #2
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d804      	bhi.n	800ddc4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ddba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddbc:	699a      	ldr	r2, [r3, #24]
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	601a      	str	r2, [r3, #0]
 800ddc2:	e089      	b.n	800ded8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ddc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d128      	bne.n	800de22 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ddd0:	2302      	movs	r3, #2
 800ddd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ddd8:	f107 0314 	add.w	r3, r7, #20
 800dddc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fd fbbd 	bl	800b55e <get_fat>
 800dde4:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800dde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddec:	d103      	bne.n	800ddf6 <f_getfree+0x7c>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ddf4:	e063      	b.n	800debe <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ddf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d103      	bne.n	800de04 <f_getfree+0x8a>
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800de02:	e05c      	b.n	800debe <f_getfree+0x144>
					if (stat == 0) nfree++;
 800de04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de06:	2b00      	cmp	r3, #0
 800de08:	d102      	bne.n	800de10 <f_getfree+0x96>
 800de0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de0c:	3301      	adds	r3, #1
 800de0e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800de10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de12:	3301      	adds	r3, #1
 800de14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d3db      	bcc.n	800ddd8 <f_getfree+0x5e>
 800de20:	e04d      	b.n	800debe <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800de22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de24:	69db      	ldr	r3, [r3, #28]
 800de26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de2c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	637b      	str	r3, [r7, #52]	@ 0x34
 800de32:	2300      	movs	r3, #0
 800de34:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800de36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d113      	bne.n	800de64 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800de3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de40:	1c5a      	adds	r2, r3, #1
 800de42:	63ba      	str	r2, [r7, #56]	@ 0x38
 800de44:	4619      	mov	r1, r3
 800de46:	f7fd facd 	bl	800b3e4 <move_window>
 800de4a:	4603      	mov	r3, r0
 800de4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800de50:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800de54:	2b00      	cmp	r3, #0
 800de56:	d131      	bne.n	800debc <f_getfree+0x142>
							p = fs->win;
 800de58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de5a:	3338      	adds	r3, #56	@ 0x38
 800de5c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800de5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de60:	899b      	ldrh	r3, [r3, #12]
 800de62:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800de64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	2b02      	cmp	r3, #2
 800de6a:	d10f      	bne.n	800de8c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800de6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de6e:	f7fd f807 	bl	800ae80 <ld_word>
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	d102      	bne.n	800de7e <f_getfree+0x104>
 800de78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de7a:	3301      	adds	r3, #1
 800de7c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800de7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de80:	3302      	adds	r3, #2
 800de82:	633b      	str	r3, [r7, #48]	@ 0x30
 800de84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de86:	3b02      	subs	r3, #2
 800de88:	637b      	str	r3, [r7, #52]	@ 0x34
 800de8a:	e010      	b.n	800deae <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800de8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de8e:	f7fd f810 	bl	800aeb2 <ld_dword>
 800de92:	4603      	mov	r3, r0
 800de94:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d102      	bne.n	800dea2 <f_getfree+0x128>
 800de9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de9e:	3301      	adds	r3, #1
 800dea0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800dea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea4:	3304      	adds	r3, #4
 800dea6:	633b      	str	r3, [r7, #48]	@ 0x30
 800dea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deaa:	3b04      	subs	r3, #4
 800deac:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800deae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deb0:	3b01      	subs	r3, #1
 800deb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800deb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1bd      	bne.n	800de36 <f_getfree+0xbc>
 800deba:	e000      	b.n	800debe <f_getfree+0x144>
							if (res != FR_OK) break;
 800debc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dec2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800dec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dec6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dec8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800deca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800decc:	791a      	ldrb	r2, [r3, #4]
 800dece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded0:	f042 0201 	orr.w	r2, r2, #1
 800ded4:	b2d2      	uxtb	r2, r2
 800ded6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ded8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3748      	adds	r7, #72	@ 0x48
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b087      	sub	sp, #28
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	4613      	mov	r3, r2
 800def0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800def2:	2301      	movs	r3, #1
 800def4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800defa:	4b1f      	ldr	r3, [pc, #124]	@ (800df78 <FATFS_LinkDriverEx+0x94>)
 800defc:	7a5b      	ldrb	r3, [r3, #9]
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d131      	bne.n	800df68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df04:	4b1c      	ldr	r3, [pc, #112]	@ (800df78 <FATFS_LinkDriverEx+0x94>)
 800df06:	7a5b      	ldrb	r3, [r3, #9]
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	461a      	mov	r2, r3
 800df0c:	4b1a      	ldr	r3, [pc, #104]	@ (800df78 <FATFS_LinkDriverEx+0x94>)
 800df0e:	2100      	movs	r1, #0
 800df10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df12:	4b19      	ldr	r3, [pc, #100]	@ (800df78 <FATFS_LinkDriverEx+0x94>)
 800df14:	7a5b      	ldrb	r3, [r3, #9]
 800df16:	b2db      	uxtb	r3, r3
 800df18:	4a17      	ldr	r2, [pc, #92]	@ (800df78 <FATFS_LinkDriverEx+0x94>)
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	4413      	add	r3, r2
 800df1e:	68fa      	ldr	r2, [r7, #12]
 800df20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df22:	4b15      	ldr	r3, [pc, #84]	@ (800df78 <FATFS_LinkDriverEx+0x94>)
 800df24:	7a5b      	ldrb	r3, [r3, #9]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	461a      	mov	r2, r3
 800df2a:	4b13      	ldr	r3, [pc, #76]	@ (800df78 <FATFS_LinkDriverEx+0x94>)
 800df2c:	4413      	add	r3, r2
 800df2e:	79fa      	ldrb	r2, [r7, #7]
 800df30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df32:	4b11      	ldr	r3, [pc, #68]	@ (800df78 <FATFS_LinkDriverEx+0x94>)
 800df34:	7a5b      	ldrb	r3, [r3, #9]
 800df36:	b2db      	uxtb	r3, r3
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	b2d1      	uxtb	r1, r2
 800df3c:	4a0e      	ldr	r2, [pc, #56]	@ (800df78 <FATFS_LinkDriverEx+0x94>)
 800df3e:	7251      	strb	r1, [r2, #9]
 800df40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df42:	7dbb      	ldrb	r3, [r7, #22]
 800df44:	3330      	adds	r3, #48	@ 0x30
 800df46:	b2da      	uxtb	r2, r3
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	3301      	adds	r3, #1
 800df50:	223a      	movs	r2, #58	@ 0x3a
 800df52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	3302      	adds	r3, #2
 800df58:	222f      	movs	r2, #47	@ 0x2f
 800df5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	3303      	adds	r3, #3
 800df60:	2200      	movs	r2, #0
 800df62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df64:	2300      	movs	r3, #0
 800df66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df68:	7dfb      	ldrb	r3, [r7, #23]
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	371c      	adds	r7, #28
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	24028dfc 	.word	0x24028dfc

0800df7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800df86:	2200      	movs	r2, #0
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7ff ffaa 	bl	800dee4 <FATFS_LinkDriverEx>
 800df90:	4603      	mov	r3, r0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
	...

0800df9c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b085      	sub	sp, #20
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	6039      	str	r1, [r7, #0]
 800dfa6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dfa8:	88fb      	ldrh	r3, [r7, #6]
 800dfaa:	2b7f      	cmp	r3, #127	@ 0x7f
 800dfac:	d802      	bhi.n	800dfb4 <ff_convert+0x18>
		c = chr;
 800dfae:	88fb      	ldrh	r3, [r7, #6]
 800dfb0:	81fb      	strh	r3, [r7, #14]
 800dfb2:	e025      	b.n	800e000 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00b      	beq.n	800dfd2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dfba:	88fb      	ldrh	r3, [r7, #6]
 800dfbc:	2bff      	cmp	r3, #255	@ 0xff
 800dfbe:	d805      	bhi.n	800dfcc <ff_convert+0x30>
 800dfc0:	88fb      	ldrh	r3, [r7, #6]
 800dfc2:	3b80      	subs	r3, #128	@ 0x80
 800dfc4:	4a12      	ldr	r2, [pc, #72]	@ (800e010 <ff_convert+0x74>)
 800dfc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfca:	e000      	b.n	800dfce <ff_convert+0x32>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	81fb      	strh	r3, [r7, #14]
 800dfd0:	e016      	b.n	800e000 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	81fb      	strh	r3, [r7, #14]
 800dfd6:	e009      	b.n	800dfec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dfd8:	89fb      	ldrh	r3, [r7, #14]
 800dfda:	4a0d      	ldr	r2, [pc, #52]	@ (800e010 <ff_convert+0x74>)
 800dfdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfe0:	88fa      	ldrh	r2, [r7, #6]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d006      	beq.n	800dff4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dfe6:	89fb      	ldrh	r3, [r7, #14]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	81fb      	strh	r3, [r7, #14]
 800dfec:	89fb      	ldrh	r3, [r7, #14]
 800dfee:	2b7f      	cmp	r3, #127	@ 0x7f
 800dff0:	d9f2      	bls.n	800dfd8 <ff_convert+0x3c>
 800dff2:	e000      	b.n	800dff6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dff4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800dff6:	89fb      	ldrh	r3, [r7, #14]
 800dff8:	3380      	adds	r3, #128	@ 0x80
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e000:	89fb      	ldrh	r3, [r7, #14]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3714      	adds	r7, #20
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	0800fed4 	.word	0x0800fed4

0800e014 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e014:	b480      	push	{r7}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	4603      	mov	r3, r0
 800e01c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e01e:	88fb      	ldrh	r3, [r7, #6]
 800e020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e024:	d201      	bcs.n	800e02a <ff_wtoupper+0x16>
 800e026:	4b3e      	ldr	r3, [pc, #248]	@ (800e120 <ff_wtoupper+0x10c>)
 800e028:	e000      	b.n	800e02c <ff_wtoupper+0x18>
 800e02a:	4b3e      	ldr	r3, [pc, #248]	@ (800e124 <ff_wtoupper+0x110>)
 800e02c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	1c9a      	adds	r2, r3, #2
 800e032:	617a      	str	r2, [r7, #20]
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e038:	8a7b      	ldrh	r3, [r7, #18]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d068      	beq.n	800e110 <ff_wtoupper+0xfc>
 800e03e:	88fa      	ldrh	r2, [r7, #6]
 800e040:	8a7b      	ldrh	r3, [r7, #18]
 800e042:	429a      	cmp	r2, r3
 800e044:	d364      	bcc.n	800e110 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	1c9a      	adds	r2, r3, #2
 800e04a:	617a      	str	r2, [r7, #20]
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	823b      	strh	r3, [r7, #16]
 800e050:	8a3b      	ldrh	r3, [r7, #16]
 800e052:	0a1b      	lsrs	r3, r3, #8
 800e054:	81fb      	strh	r3, [r7, #14]
 800e056:	8a3b      	ldrh	r3, [r7, #16]
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e05c:	88fa      	ldrh	r2, [r7, #6]
 800e05e:	8a79      	ldrh	r1, [r7, #18]
 800e060:	8a3b      	ldrh	r3, [r7, #16]
 800e062:	440b      	add	r3, r1
 800e064:	429a      	cmp	r2, r3
 800e066:	da49      	bge.n	800e0fc <ff_wtoupper+0xe8>
			switch (cmd) {
 800e068:	89fb      	ldrh	r3, [r7, #14]
 800e06a:	2b08      	cmp	r3, #8
 800e06c:	d84f      	bhi.n	800e10e <ff_wtoupper+0xfa>
 800e06e:	a201      	add	r2, pc, #4	@ (adr r2, 800e074 <ff_wtoupper+0x60>)
 800e070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e074:	0800e099 	.word	0x0800e099
 800e078:	0800e0ab 	.word	0x0800e0ab
 800e07c:	0800e0c1 	.word	0x0800e0c1
 800e080:	0800e0c9 	.word	0x0800e0c9
 800e084:	0800e0d1 	.word	0x0800e0d1
 800e088:	0800e0d9 	.word	0x0800e0d9
 800e08c:	0800e0e1 	.word	0x0800e0e1
 800e090:	0800e0e9 	.word	0x0800e0e9
 800e094:	0800e0f1 	.word	0x0800e0f1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e098:	88fa      	ldrh	r2, [r7, #6]
 800e09a:	8a7b      	ldrh	r3, [r7, #18]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	80fb      	strh	r3, [r7, #6]
 800e0a8:	e027      	b.n	800e0fa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e0aa:	88fa      	ldrh	r2, [r7, #6]
 800e0ac:	8a7b      	ldrh	r3, [r7, #18]
 800e0ae:	1ad3      	subs	r3, r2, r3
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	f003 0301 	and.w	r3, r3, #1
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	88fa      	ldrh	r2, [r7, #6]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	80fb      	strh	r3, [r7, #6]
 800e0be:	e01c      	b.n	800e0fa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e0c0:	88fb      	ldrh	r3, [r7, #6]
 800e0c2:	3b10      	subs	r3, #16
 800e0c4:	80fb      	strh	r3, [r7, #6]
 800e0c6:	e018      	b.n	800e0fa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e0c8:	88fb      	ldrh	r3, [r7, #6]
 800e0ca:	3b20      	subs	r3, #32
 800e0cc:	80fb      	strh	r3, [r7, #6]
 800e0ce:	e014      	b.n	800e0fa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e0d0:	88fb      	ldrh	r3, [r7, #6]
 800e0d2:	3b30      	subs	r3, #48	@ 0x30
 800e0d4:	80fb      	strh	r3, [r7, #6]
 800e0d6:	e010      	b.n	800e0fa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e0d8:	88fb      	ldrh	r3, [r7, #6]
 800e0da:	3b1a      	subs	r3, #26
 800e0dc:	80fb      	strh	r3, [r7, #6]
 800e0de:	e00c      	b.n	800e0fa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e0e0:	88fb      	ldrh	r3, [r7, #6]
 800e0e2:	3308      	adds	r3, #8
 800e0e4:	80fb      	strh	r3, [r7, #6]
 800e0e6:	e008      	b.n	800e0fa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e0e8:	88fb      	ldrh	r3, [r7, #6]
 800e0ea:	3b50      	subs	r3, #80	@ 0x50
 800e0ec:	80fb      	strh	r3, [r7, #6]
 800e0ee:	e004      	b.n	800e0fa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e0f0:	88fb      	ldrh	r3, [r7, #6]
 800e0f2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800e0f6:	80fb      	strh	r3, [r7, #6]
 800e0f8:	bf00      	nop
			}
			break;
 800e0fa:	e008      	b.n	800e10e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e0fc:	89fb      	ldrh	r3, [r7, #14]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d195      	bne.n	800e02e <ff_wtoupper+0x1a>
 800e102:	8a3b      	ldrh	r3, [r7, #16]
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	4413      	add	r3, r2
 800e10a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e10c:	e78f      	b.n	800e02e <ff_wtoupper+0x1a>
			break;
 800e10e:	bf00      	nop
	}

	return chr;
 800e110:	88fb      	ldrh	r3, [r7, #6]
}
 800e112:	4618      	mov	r0, r3
 800e114:	371c      	adds	r7, #28
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	0800ffd4 	.word	0x0800ffd4
 800e124:	080101c8 	.word	0x080101c8

0800e128 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 f811 	bl	800e158 <malloc>
 800e136:	4603      	mov	r3, r0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f80d 	bl	800e168 <free>
}
 800e14e:	bf00      	nop
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
	...

0800e158 <malloc>:
 800e158:	4b02      	ldr	r3, [pc, #8]	@ (800e164 <malloc+0xc>)
 800e15a:	4601      	mov	r1, r0
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	f000 b82d 	b.w	800e1bc <_malloc_r>
 800e162:	bf00      	nop
 800e164:	24000020 	.word	0x24000020

0800e168 <free>:
 800e168:	4b02      	ldr	r3, [pc, #8]	@ (800e174 <free+0xc>)
 800e16a:	4601      	mov	r1, r0
 800e16c:	6818      	ldr	r0, [r3, #0]
 800e16e:	f000 bb77 	b.w	800e860 <_free_r>
 800e172:	bf00      	nop
 800e174:	24000020 	.word	0x24000020

0800e178 <sbrk_aligned>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4e0f      	ldr	r6, [pc, #60]	@ (800e1b8 <sbrk_aligned+0x40>)
 800e17c:	460c      	mov	r4, r1
 800e17e:	6831      	ldr	r1, [r6, #0]
 800e180:	4605      	mov	r5, r0
 800e182:	b911      	cbnz	r1, 800e18a <sbrk_aligned+0x12>
 800e184:	f000 fb0e 	bl	800e7a4 <_sbrk_r>
 800e188:	6030      	str	r0, [r6, #0]
 800e18a:	4621      	mov	r1, r4
 800e18c:	4628      	mov	r0, r5
 800e18e:	f000 fb09 	bl	800e7a4 <_sbrk_r>
 800e192:	1c43      	adds	r3, r0, #1
 800e194:	d103      	bne.n	800e19e <sbrk_aligned+0x26>
 800e196:	f04f 34ff 	mov.w	r4, #4294967295
 800e19a:	4620      	mov	r0, r4
 800e19c:	bd70      	pop	{r4, r5, r6, pc}
 800e19e:	1cc4      	adds	r4, r0, #3
 800e1a0:	f024 0403 	bic.w	r4, r4, #3
 800e1a4:	42a0      	cmp	r0, r4
 800e1a6:	d0f8      	beq.n	800e19a <sbrk_aligned+0x22>
 800e1a8:	1a21      	subs	r1, r4, r0
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	f000 fafa 	bl	800e7a4 <_sbrk_r>
 800e1b0:	3001      	adds	r0, #1
 800e1b2:	d1f2      	bne.n	800e19a <sbrk_aligned+0x22>
 800e1b4:	e7ef      	b.n	800e196 <sbrk_aligned+0x1e>
 800e1b6:	bf00      	nop
 800e1b8:	24028e08 	.word	0x24028e08

0800e1bc <_malloc_r>:
 800e1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c0:	1ccd      	adds	r5, r1, #3
 800e1c2:	f025 0503 	bic.w	r5, r5, #3
 800e1c6:	3508      	adds	r5, #8
 800e1c8:	2d0c      	cmp	r5, #12
 800e1ca:	bf38      	it	cc
 800e1cc:	250c      	movcc	r5, #12
 800e1ce:	2d00      	cmp	r5, #0
 800e1d0:	4606      	mov	r6, r0
 800e1d2:	db01      	blt.n	800e1d8 <_malloc_r+0x1c>
 800e1d4:	42a9      	cmp	r1, r5
 800e1d6:	d904      	bls.n	800e1e2 <_malloc_r+0x26>
 800e1d8:	230c      	movs	r3, #12
 800e1da:	6033      	str	r3, [r6, #0]
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2b8 <_malloc_r+0xfc>
 800e1e6:	f000 f869 	bl	800e2bc <__malloc_lock>
 800e1ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e1ee:	461c      	mov	r4, r3
 800e1f0:	bb44      	cbnz	r4, 800e244 <_malloc_r+0x88>
 800e1f2:	4629      	mov	r1, r5
 800e1f4:	4630      	mov	r0, r6
 800e1f6:	f7ff ffbf 	bl	800e178 <sbrk_aligned>
 800e1fa:	1c43      	adds	r3, r0, #1
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	d158      	bne.n	800e2b2 <_malloc_r+0xf6>
 800e200:	f8d8 4000 	ldr.w	r4, [r8]
 800e204:	4627      	mov	r7, r4
 800e206:	2f00      	cmp	r7, #0
 800e208:	d143      	bne.n	800e292 <_malloc_r+0xd6>
 800e20a:	2c00      	cmp	r4, #0
 800e20c:	d04b      	beq.n	800e2a6 <_malloc_r+0xea>
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	4639      	mov	r1, r7
 800e212:	4630      	mov	r0, r6
 800e214:	eb04 0903 	add.w	r9, r4, r3
 800e218:	f000 fac4 	bl	800e7a4 <_sbrk_r>
 800e21c:	4581      	cmp	r9, r0
 800e21e:	d142      	bne.n	800e2a6 <_malloc_r+0xea>
 800e220:	6821      	ldr	r1, [r4, #0]
 800e222:	1a6d      	subs	r5, r5, r1
 800e224:	4629      	mov	r1, r5
 800e226:	4630      	mov	r0, r6
 800e228:	f7ff ffa6 	bl	800e178 <sbrk_aligned>
 800e22c:	3001      	adds	r0, #1
 800e22e:	d03a      	beq.n	800e2a6 <_malloc_r+0xea>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	442b      	add	r3, r5
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	f8d8 3000 	ldr.w	r3, [r8]
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	bb62      	cbnz	r2, 800e298 <_malloc_r+0xdc>
 800e23e:	f8c8 7000 	str.w	r7, [r8]
 800e242:	e00f      	b.n	800e264 <_malloc_r+0xa8>
 800e244:	6822      	ldr	r2, [r4, #0]
 800e246:	1b52      	subs	r2, r2, r5
 800e248:	d420      	bmi.n	800e28c <_malloc_r+0xd0>
 800e24a:	2a0b      	cmp	r2, #11
 800e24c:	d917      	bls.n	800e27e <_malloc_r+0xc2>
 800e24e:	1961      	adds	r1, r4, r5
 800e250:	42a3      	cmp	r3, r4
 800e252:	6025      	str	r5, [r4, #0]
 800e254:	bf18      	it	ne
 800e256:	6059      	strne	r1, [r3, #4]
 800e258:	6863      	ldr	r3, [r4, #4]
 800e25a:	bf08      	it	eq
 800e25c:	f8c8 1000 	streq.w	r1, [r8]
 800e260:	5162      	str	r2, [r4, r5]
 800e262:	604b      	str	r3, [r1, #4]
 800e264:	4630      	mov	r0, r6
 800e266:	f000 f82f 	bl	800e2c8 <__malloc_unlock>
 800e26a:	f104 000b 	add.w	r0, r4, #11
 800e26e:	1d23      	adds	r3, r4, #4
 800e270:	f020 0007 	bic.w	r0, r0, #7
 800e274:	1ac2      	subs	r2, r0, r3
 800e276:	bf1c      	itt	ne
 800e278:	1a1b      	subne	r3, r3, r0
 800e27a:	50a3      	strne	r3, [r4, r2]
 800e27c:	e7af      	b.n	800e1de <_malloc_r+0x22>
 800e27e:	6862      	ldr	r2, [r4, #4]
 800e280:	42a3      	cmp	r3, r4
 800e282:	bf0c      	ite	eq
 800e284:	f8c8 2000 	streq.w	r2, [r8]
 800e288:	605a      	strne	r2, [r3, #4]
 800e28a:	e7eb      	b.n	800e264 <_malloc_r+0xa8>
 800e28c:	4623      	mov	r3, r4
 800e28e:	6864      	ldr	r4, [r4, #4]
 800e290:	e7ae      	b.n	800e1f0 <_malloc_r+0x34>
 800e292:	463c      	mov	r4, r7
 800e294:	687f      	ldr	r7, [r7, #4]
 800e296:	e7b6      	b.n	800e206 <_malloc_r+0x4a>
 800e298:	461a      	mov	r2, r3
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	42a3      	cmp	r3, r4
 800e29e:	d1fb      	bne.n	800e298 <_malloc_r+0xdc>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	6053      	str	r3, [r2, #4]
 800e2a4:	e7de      	b.n	800e264 <_malloc_r+0xa8>
 800e2a6:	230c      	movs	r3, #12
 800e2a8:	6033      	str	r3, [r6, #0]
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f000 f80c 	bl	800e2c8 <__malloc_unlock>
 800e2b0:	e794      	b.n	800e1dc <_malloc_r+0x20>
 800e2b2:	6005      	str	r5, [r0, #0]
 800e2b4:	e7d6      	b.n	800e264 <_malloc_r+0xa8>
 800e2b6:	bf00      	nop
 800e2b8:	24028e0c 	.word	0x24028e0c

0800e2bc <__malloc_lock>:
 800e2bc:	4801      	ldr	r0, [pc, #4]	@ (800e2c4 <__malloc_lock+0x8>)
 800e2be:	f000 babe 	b.w	800e83e <__retarget_lock_acquire_recursive>
 800e2c2:	bf00      	nop
 800e2c4:	24028f50 	.word	0x24028f50

0800e2c8 <__malloc_unlock>:
 800e2c8:	4801      	ldr	r0, [pc, #4]	@ (800e2d0 <__malloc_unlock+0x8>)
 800e2ca:	f000 bab9 	b.w	800e840 <__retarget_lock_release_recursive>
 800e2ce:	bf00      	nop
 800e2d0:	24028f50 	.word	0x24028f50

0800e2d4 <std>:
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	b510      	push	{r4, lr}
 800e2d8:	4604      	mov	r4, r0
 800e2da:	e9c0 3300 	strd	r3, r3, [r0]
 800e2de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2e2:	6083      	str	r3, [r0, #8]
 800e2e4:	8181      	strh	r1, [r0, #12]
 800e2e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e2e8:	81c2      	strh	r2, [r0, #14]
 800e2ea:	6183      	str	r3, [r0, #24]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	2208      	movs	r2, #8
 800e2f0:	305c      	adds	r0, #92	@ 0x5c
 800e2f2:	f000 fa1b 	bl	800e72c <memset>
 800e2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e32c <std+0x58>)
 800e2f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e330 <std+0x5c>)
 800e2fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e334 <std+0x60>)
 800e300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e302:	4b0d      	ldr	r3, [pc, #52]	@ (800e338 <std+0x64>)
 800e304:	6323      	str	r3, [r4, #48]	@ 0x30
 800e306:	4b0d      	ldr	r3, [pc, #52]	@ (800e33c <std+0x68>)
 800e308:	6224      	str	r4, [r4, #32]
 800e30a:	429c      	cmp	r4, r3
 800e30c:	d006      	beq.n	800e31c <std+0x48>
 800e30e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e312:	4294      	cmp	r4, r2
 800e314:	d002      	beq.n	800e31c <std+0x48>
 800e316:	33d0      	adds	r3, #208	@ 0xd0
 800e318:	429c      	cmp	r4, r3
 800e31a:	d105      	bne.n	800e328 <std+0x54>
 800e31c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e324:	f000 ba8a 	b.w	800e83c <__retarget_lock_init_recursive>
 800e328:	bd10      	pop	{r4, pc}
 800e32a:	bf00      	nop
 800e32c:	0800e57d 	.word	0x0800e57d
 800e330:	0800e59f 	.word	0x0800e59f
 800e334:	0800e5d7 	.word	0x0800e5d7
 800e338:	0800e5fb 	.word	0x0800e5fb
 800e33c:	24028e10 	.word	0x24028e10

0800e340 <stdio_exit_handler>:
 800e340:	4a02      	ldr	r2, [pc, #8]	@ (800e34c <stdio_exit_handler+0xc>)
 800e342:	4903      	ldr	r1, [pc, #12]	@ (800e350 <stdio_exit_handler+0x10>)
 800e344:	4803      	ldr	r0, [pc, #12]	@ (800e354 <stdio_exit_handler+0x14>)
 800e346:	f000 b869 	b.w	800e41c <_fwalk_sglue>
 800e34a:	bf00      	nop
 800e34c:	24000014 	.word	0x24000014
 800e350:	0800f249 	.word	0x0800f249
 800e354:	24000024 	.word	0x24000024

0800e358 <cleanup_stdio>:
 800e358:	6841      	ldr	r1, [r0, #4]
 800e35a:	4b0c      	ldr	r3, [pc, #48]	@ (800e38c <cleanup_stdio+0x34>)
 800e35c:	4299      	cmp	r1, r3
 800e35e:	b510      	push	{r4, lr}
 800e360:	4604      	mov	r4, r0
 800e362:	d001      	beq.n	800e368 <cleanup_stdio+0x10>
 800e364:	f000 ff70 	bl	800f248 <_fflush_r>
 800e368:	68a1      	ldr	r1, [r4, #8]
 800e36a:	4b09      	ldr	r3, [pc, #36]	@ (800e390 <cleanup_stdio+0x38>)
 800e36c:	4299      	cmp	r1, r3
 800e36e:	d002      	beq.n	800e376 <cleanup_stdio+0x1e>
 800e370:	4620      	mov	r0, r4
 800e372:	f000 ff69 	bl	800f248 <_fflush_r>
 800e376:	68e1      	ldr	r1, [r4, #12]
 800e378:	4b06      	ldr	r3, [pc, #24]	@ (800e394 <cleanup_stdio+0x3c>)
 800e37a:	4299      	cmp	r1, r3
 800e37c:	d004      	beq.n	800e388 <cleanup_stdio+0x30>
 800e37e:	4620      	mov	r0, r4
 800e380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e384:	f000 bf60 	b.w	800f248 <_fflush_r>
 800e388:	bd10      	pop	{r4, pc}
 800e38a:	bf00      	nop
 800e38c:	24028e10 	.word	0x24028e10
 800e390:	24028e78 	.word	0x24028e78
 800e394:	24028ee0 	.word	0x24028ee0

0800e398 <global_stdio_init.part.0>:
 800e398:	b510      	push	{r4, lr}
 800e39a:	4b0b      	ldr	r3, [pc, #44]	@ (800e3c8 <global_stdio_init.part.0+0x30>)
 800e39c:	4c0b      	ldr	r4, [pc, #44]	@ (800e3cc <global_stdio_init.part.0+0x34>)
 800e39e:	4a0c      	ldr	r2, [pc, #48]	@ (800e3d0 <global_stdio_init.part.0+0x38>)
 800e3a0:	601a      	str	r2, [r3, #0]
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	2104      	movs	r1, #4
 800e3a8:	f7ff ff94 	bl	800e2d4 <std>
 800e3ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	2109      	movs	r1, #9
 800e3b4:	f7ff ff8e 	bl	800e2d4 <std>
 800e3b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e3bc:	2202      	movs	r2, #2
 800e3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3c2:	2112      	movs	r1, #18
 800e3c4:	f7ff bf86 	b.w	800e2d4 <std>
 800e3c8:	24028f48 	.word	0x24028f48
 800e3cc:	24028e10 	.word	0x24028e10
 800e3d0:	0800e341 	.word	0x0800e341

0800e3d4 <__sfp_lock_acquire>:
 800e3d4:	4801      	ldr	r0, [pc, #4]	@ (800e3dc <__sfp_lock_acquire+0x8>)
 800e3d6:	f000 ba32 	b.w	800e83e <__retarget_lock_acquire_recursive>
 800e3da:	bf00      	nop
 800e3dc:	24028f51 	.word	0x24028f51

0800e3e0 <__sfp_lock_release>:
 800e3e0:	4801      	ldr	r0, [pc, #4]	@ (800e3e8 <__sfp_lock_release+0x8>)
 800e3e2:	f000 ba2d 	b.w	800e840 <__retarget_lock_release_recursive>
 800e3e6:	bf00      	nop
 800e3e8:	24028f51 	.word	0x24028f51

0800e3ec <__sinit>:
 800e3ec:	b510      	push	{r4, lr}
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	f7ff fff0 	bl	800e3d4 <__sfp_lock_acquire>
 800e3f4:	6a23      	ldr	r3, [r4, #32]
 800e3f6:	b11b      	cbz	r3, 800e400 <__sinit+0x14>
 800e3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3fc:	f7ff bff0 	b.w	800e3e0 <__sfp_lock_release>
 800e400:	4b04      	ldr	r3, [pc, #16]	@ (800e414 <__sinit+0x28>)
 800e402:	6223      	str	r3, [r4, #32]
 800e404:	4b04      	ldr	r3, [pc, #16]	@ (800e418 <__sinit+0x2c>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d1f5      	bne.n	800e3f8 <__sinit+0xc>
 800e40c:	f7ff ffc4 	bl	800e398 <global_stdio_init.part.0>
 800e410:	e7f2      	b.n	800e3f8 <__sinit+0xc>
 800e412:	bf00      	nop
 800e414:	0800e359 	.word	0x0800e359
 800e418:	24028f48 	.word	0x24028f48

0800e41c <_fwalk_sglue>:
 800e41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e420:	4607      	mov	r7, r0
 800e422:	4688      	mov	r8, r1
 800e424:	4614      	mov	r4, r2
 800e426:	2600      	movs	r6, #0
 800e428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e42c:	f1b9 0901 	subs.w	r9, r9, #1
 800e430:	d505      	bpl.n	800e43e <_fwalk_sglue+0x22>
 800e432:	6824      	ldr	r4, [r4, #0]
 800e434:	2c00      	cmp	r4, #0
 800e436:	d1f7      	bne.n	800e428 <_fwalk_sglue+0xc>
 800e438:	4630      	mov	r0, r6
 800e43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e43e:	89ab      	ldrh	r3, [r5, #12]
 800e440:	2b01      	cmp	r3, #1
 800e442:	d907      	bls.n	800e454 <_fwalk_sglue+0x38>
 800e444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e448:	3301      	adds	r3, #1
 800e44a:	d003      	beq.n	800e454 <_fwalk_sglue+0x38>
 800e44c:	4629      	mov	r1, r5
 800e44e:	4638      	mov	r0, r7
 800e450:	47c0      	blx	r8
 800e452:	4306      	orrs	r6, r0
 800e454:	3568      	adds	r5, #104	@ 0x68
 800e456:	e7e9      	b.n	800e42c <_fwalk_sglue+0x10>

0800e458 <iprintf>:
 800e458:	b40f      	push	{r0, r1, r2, r3}
 800e45a:	b507      	push	{r0, r1, r2, lr}
 800e45c:	4906      	ldr	r1, [pc, #24]	@ (800e478 <iprintf+0x20>)
 800e45e:	ab04      	add	r3, sp, #16
 800e460:	6808      	ldr	r0, [r1, #0]
 800e462:	f853 2b04 	ldr.w	r2, [r3], #4
 800e466:	6881      	ldr	r1, [r0, #8]
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	f000 fbc5 	bl	800ebf8 <_vfiprintf_r>
 800e46e:	b003      	add	sp, #12
 800e470:	f85d eb04 	ldr.w	lr, [sp], #4
 800e474:	b004      	add	sp, #16
 800e476:	4770      	bx	lr
 800e478:	24000020 	.word	0x24000020

0800e47c <_puts_r>:
 800e47c:	6a03      	ldr	r3, [r0, #32]
 800e47e:	b570      	push	{r4, r5, r6, lr}
 800e480:	6884      	ldr	r4, [r0, #8]
 800e482:	4605      	mov	r5, r0
 800e484:	460e      	mov	r6, r1
 800e486:	b90b      	cbnz	r3, 800e48c <_puts_r+0x10>
 800e488:	f7ff ffb0 	bl	800e3ec <__sinit>
 800e48c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e48e:	07db      	lsls	r3, r3, #31
 800e490:	d405      	bmi.n	800e49e <_puts_r+0x22>
 800e492:	89a3      	ldrh	r3, [r4, #12]
 800e494:	0598      	lsls	r0, r3, #22
 800e496:	d402      	bmi.n	800e49e <_puts_r+0x22>
 800e498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e49a:	f000 f9d0 	bl	800e83e <__retarget_lock_acquire_recursive>
 800e49e:	89a3      	ldrh	r3, [r4, #12]
 800e4a0:	0719      	lsls	r1, r3, #28
 800e4a2:	d502      	bpl.n	800e4aa <_puts_r+0x2e>
 800e4a4:	6923      	ldr	r3, [r4, #16]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d135      	bne.n	800e516 <_puts_r+0x9a>
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f000 f8e7 	bl	800e680 <__swsetup_r>
 800e4b2:	b380      	cbz	r0, 800e516 <_puts_r+0x9a>
 800e4b4:	f04f 35ff 	mov.w	r5, #4294967295
 800e4b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4ba:	07da      	lsls	r2, r3, #31
 800e4bc:	d405      	bmi.n	800e4ca <_puts_r+0x4e>
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	059b      	lsls	r3, r3, #22
 800e4c2:	d402      	bmi.n	800e4ca <_puts_r+0x4e>
 800e4c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4c6:	f000 f9bb 	bl	800e840 <__retarget_lock_release_recursive>
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	bd70      	pop	{r4, r5, r6, pc}
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	da04      	bge.n	800e4dc <_puts_r+0x60>
 800e4d2:	69a2      	ldr	r2, [r4, #24]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	dc17      	bgt.n	800e508 <_puts_r+0x8c>
 800e4d8:	290a      	cmp	r1, #10
 800e4da:	d015      	beq.n	800e508 <_puts_r+0x8c>
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	1c5a      	adds	r2, r3, #1
 800e4e0:	6022      	str	r2, [r4, #0]
 800e4e2:	7019      	strb	r1, [r3, #0]
 800e4e4:	68a3      	ldr	r3, [r4, #8]
 800e4e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	60a3      	str	r3, [r4, #8]
 800e4ee:	2900      	cmp	r1, #0
 800e4f0:	d1ed      	bne.n	800e4ce <_puts_r+0x52>
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	da11      	bge.n	800e51a <_puts_r+0x9e>
 800e4f6:	4622      	mov	r2, r4
 800e4f8:	210a      	movs	r1, #10
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	f000 f881 	bl	800e602 <__swbuf_r>
 800e500:	3001      	adds	r0, #1
 800e502:	d0d7      	beq.n	800e4b4 <_puts_r+0x38>
 800e504:	250a      	movs	r5, #10
 800e506:	e7d7      	b.n	800e4b8 <_puts_r+0x3c>
 800e508:	4622      	mov	r2, r4
 800e50a:	4628      	mov	r0, r5
 800e50c:	f000 f879 	bl	800e602 <__swbuf_r>
 800e510:	3001      	adds	r0, #1
 800e512:	d1e7      	bne.n	800e4e4 <_puts_r+0x68>
 800e514:	e7ce      	b.n	800e4b4 <_puts_r+0x38>
 800e516:	3e01      	subs	r6, #1
 800e518:	e7e4      	b.n	800e4e4 <_puts_r+0x68>
 800e51a:	6823      	ldr	r3, [r4, #0]
 800e51c:	1c5a      	adds	r2, r3, #1
 800e51e:	6022      	str	r2, [r4, #0]
 800e520:	220a      	movs	r2, #10
 800e522:	701a      	strb	r2, [r3, #0]
 800e524:	e7ee      	b.n	800e504 <_puts_r+0x88>
	...

0800e528 <puts>:
 800e528:	4b02      	ldr	r3, [pc, #8]	@ (800e534 <puts+0xc>)
 800e52a:	4601      	mov	r1, r0
 800e52c:	6818      	ldr	r0, [r3, #0]
 800e52e:	f7ff bfa5 	b.w	800e47c <_puts_r>
 800e532:	bf00      	nop
 800e534:	24000020 	.word	0x24000020

0800e538 <siprintf>:
 800e538:	b40e      	push	{r1, r2, r3}
 800e53a:	b510      	push	{r4, lr}
 800e53c:	b09d      	sub	sp, #116	@ 0x74
 800e53e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e540:	9002      	str	r0, [sp, #8]
 800e542:	9006      	str	r0, [sp, #24]
 800e544:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e548:	480a      	ldr	r0, [pc, #40]	@ (800e574 <siprintf+0x3c>)
 800e54a:	9107      	str	r1, [sp, #28]
 800e54c:	9104      	str	r1, [sp, #16]
 800e54e:	490a      	ldr	r1, [pc, #40]	@ (800e578 <siprintf+0x40>)
 800e550:	f853 2b04 	ldr.w	r2, [r3], #4
 800e554:	9105      	str	r1, [sp, #20]
 800e556:	2400      	movs	r4, #0
 800e558:	a902      	add	r1, sp, #8
 800e55a:	6800      	ldr	r0, [r0, #0]
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e560:	f000 fa24 	bl	800e9ac <_svfiprintf_r>
 800e564:	9b02      	ldr	r3, [sp, #8]
 800e566:	701c      	strb	r4, [r3, #0]
 800e568:	b01d      	add	sp, #116	@ 0x74
 800e56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e56e:	b003      	add	sp, #12
 800e570:	4770      	bx	lr
 800e572:	bf00      	nop
 800e574:	24000020 	.word	0x24000020
 800e578:	ffff0208 	.word	0xffff0208

0800e57c <__sread>:
 800e57c:	b510      	push	{r4, lr}
 800e57e:	460c      	mov	r4, r1
 800e580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e584:	f000 f8fc 	bl	800e780 <_read_r>
 800e588:	2800      	cmp	r0, #0
 800e58a:	bfab      	itete	ge
 800e58c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e58e:	89a3      	ldrhlt	r3, [r4, #12]
 800e590:	181b      	addge	r3, r3, r0
 800e592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e596:	bfac      	ite	ge
 800e598:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e59a:	81a3      	strhlt	r3, [r4, #12]
 800e59c:	bd10      	pop	{r4, pc}

0800e59e <__swrite>:
 800e59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a2:	461f      	mov	r7, r3
 800e5a4:	898b      	ldrh	r3, [r1, #12]
 800e5a6:	05db      	lsls	r3, r3, #23
 800e5a8:	4605      	mov	r5, r0
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	4616      	mov	r6, r2
 800e5ae:	d505      	bpl.n	800e5bc <__swrite+0x1e>
 800e5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b4:	2302      	movs	r3, #2
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f000 f8d0 	bl	800e75c <_lseek_r>
 800e5bc:	89a3      	ldrh	r3, [r4, #12]
 800e5be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e5c6:	81a3      	strh	r3, [r4, #12]
 800e5c8:	4632      	mov	r2, r6
 800e5ca:	463b      	mov	r3, r7
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d2:	f000 b8f7 	b.w	800e7c4 <_write_r>

0800e5d6 <__sseek>:
 800e5d6:	b510      	push	{r4, lr}
 800e5d8:	460c      	mov	r4, r1
 800e5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5de:	f000 f8bd 	bl	800e75c <_lseek_r>
 800e5e2:	1c43      	adds	r3, r0, #1
 800e5e4:	89a3      	ldrh	r3, [r4, #12]
 800e5e6:	bf15      	itete	ne
 800e5e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e5ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e5ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e5f2:	81a3      	strheq	r3, [r4, #12]
 800e5f4:	bf18      	it	ne
 800e5f6:	81a3      	strhne	r3, [r4, #12]
 800e5f8:	bd10      	pop	{r4, pc}

0800e5fa <__sclose>:
 800e5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5fe:	f000 b89d 	b.w	800e73c <_close_r>

0800e602 <__swbuf_r>:
 800e602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e604:	460e      	mov	r6, r1
 800e606:	4614      	mov	r4, r2
 800e608:	4605      	mov	r5, r0
 800e60a:	b118      	cbz	r0, 800e614 <__swbuf_r+0x12>
 800e60c:	6a03      	ldr	r3, [r0, #32]
 800e60e:	b90b      	cbnz	r3, 800e614 <__swbuf_r+0x12>
 800e610:	f7ff feec 	bl	800e3ec <__sinit>
 800e614:	69a3      	ldr	r3, [r4, #24]
 800e616:	60a3      	str	r3, [r4, #8]
 800e618:	89a3      	ldrh	r3, [r4, #12]
 800e61a:	071a      	lsls	r2, r3, #28
 800e61c:	d501      	bpl.n	800e622 <__swbuf_r+0x20>
 800e61e:	6923      	ldr	r3, [r4, #16]
 800e620:	b943      	cbnz	r3, 800e634 <__swbuf_r+0x32>
 800e622:	4621      	mov	r1, r4
 800e624:	4628      	mov	r0, r5
 800e626:	f000 f82b 	bl	800e680 <__swsetup_r>
 800e62a:	b118      	cbz	r0, 800e634 <__swbuf_r+0x32>
 800e62c:	f04f 37ff 	mov.w	r7, #4294967295
 800e630:	4638      	mov	r0, r7
 800e632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e634:	6823      	ldr	r3, [r4, #0]
 800e636:	6922      	ldr	r2, [r4, #16]
 800e638:	1a98      	subs	r0, r3, r2
 800e63a:	6963      	ldr	r3, [r4, #20]
 800e63c:	b2f6      	uxtb	r6, r6
 800e63e:	4283      	cmp	r3, r0
 800e640:	4637      	mov	r7, r6
 800e642:	dc05      	bgt.n	800e650 <__swbuf_r+0x4e>
 800e644:	4621      	mov	r1, r4
 800e646:	4628      	mov	r0, r5
 800e648:	f000 fdfe 	bl	800f248 <_fflush_r>
 800e64c:	2800      	cmp	r0, #0
 800e64e:	d1ed      	bne.n	800e62c <__swbuf_r+0x2a>
 800e650:	68a3      	ldr	r3, [r4, #8]
 800e652:	3b01      	subs	r3, #1
 800e654:	60a3      	str	r3, [r4, #8]
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	1c5a      	adds	r2, r3, #1
 800e65a:	6022      	str	r2, [r4, #0]
 800e65c:	701e      	strb	r6, [r3, #0]
 800e65e:	6962      	ldr	r2, [r4, #20]
 800e660:	1c43      	adds	r3, r0, #1
 800e662:	429a      	cmp	r2, r3
 800e664:	d004      	beq.n	800e670 <__swbuf_r+0x6e>
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	07db      	lsls	r3, r3, #31
 800e66a:	d5e1      	bpl.n	800e630 <__swbuf_r+0x2e>
 800e66c:	2e0a      	cmp	r6, #10
 800e66e:	d1df      	bne.n	800e630 <__swbuf_r+0x2e>
 800e670:	4621      	mov	r1, r4
 800e672:	4628      	mov	r0, r5
 800e674:	f000 fde8 	bl	800f248 <_fflush_r>
 800e678:	2800      	cmp	r0, #0
 800e67a:	d0d9      	beq.n	800e630 <__swbuf_r+0x2e>
 800e67c:	e7d6      	b.n	800e62c <__swbuf_r+0x2a>
	...

0800e680 <__swsetup_r>:
 800e680:	b538      	push	{r3, r4, r5, lr}
 800e682:	4b29      	ldr	r3, [pc, #164]	@ (800e728 <__swsetup_r+0xa8>)
 800e684:	4605      	mov	r5, r0
 800e686:	6818      	ldr	r0, [r3, #0]
 800e688:	460c      	mov	r4, r1
 800e68a:	b118      	cbz	r0, 800e694 <__swsetup_r+0x14>
 800e68c:	6a03      	ldr	r3, [r0, #32]
 800e68e:	b90b      	cbnz	r3, 800e694 <__swsetup_r+0x14>
 800e690:	f7ff feac 	bl	800e3ec <__sinit>
 800e694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e698:	0719      	lsls	r1, r3, #28
 800e69a:	d422      	bmi.n	800e6e2 <__swsetup_r+0x62>
 800e69c:	06da      	lsls	r2, r3, #27
 800e69e:	d407      	bmi.n	800e6b0 <__swsetup_r+0x30>
 800e6a0:	2209      	movs	r2, #9
 800e6a2:	602a      	str	r2, [r5, #0]
 800e6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6a8:	81a3      	strh	r3, [r4, #12]
 800e6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ae:	e033      	b.n	800e718 <__swsetup_r+0x98>
 800e6b0:	0758      	lsls	r0, r3, #29
 800e6b2:	d512      	bpl.n	800e6da <__swsetup_r+0x5a>
 800e6b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6b6:	b141      	cbz	r1, 800e6ca <__swsetup_r+0x4a>
 800e6b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6bc:	4299      	cmp	r1, r3
 800e6be:	d002      	beq.n	800e6c6 <__swsetup_r+0x46>
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	f000 f8cd 	bl	800e860 <_free_r>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	6063      	str	r3, [r4, #4]
 800e6d6:	6923      	ldr	r3, [r4, #16]
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	89a3      	ldrh	r3, [r4, #12]
 800e6dc:	f043 0308 	orr.w	r3, r3, #8
 800e6e0:	81a3      	strh	r3, [r4, #12]
 800e6e2:	6923      	ldr	r3, [r4, #16]
 800e6e4:	b94b      	cbnz	r3, 800e6fa <__swsetup_r+0x7a>
 800e6e6:	89a3      	ldrh	r3, [r4, #12]
 800e6e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6f0:	d003      	beq.n	800e6fa <__swsetup_r+0x7a>
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	f000 fdf5 	bl	800f2e4 <__smakebuf_r>
 800e6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6fe:	f013 0201 	ands.w	r2, r3, #1
 800e702:	d00a      	beq.n	800e71a <__swsetup_r+0x9a>
 800e704:	2200      	movs	r2, #0
 800e706:	60a2      	str	r2, [r4, #8]
 800e708:	6962      	ldr	r2, [r4, #20]
 800e70a:	4252      	negs	r2, r2
 800e70c:	61a2      	str	r2, [r4, #24]
 800e70e:	6922      	ldr	r2, [r4, #16]
 800e710:	b942      	cbnz	r2, 800e724 <__swsetup_r+0xa4>
 800e712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e716:	d1c5      	bne.n	800e6a4 <__swsetup_r+0x24>
 800e718:	bd38      	pop	{r3, r4, r5, pc}
 800e71a:	0799      	lsls	r1, r3, #30
 800e71c:	bf58      	it	pl
 800e71e:	6962      	ldrpl	r2, [r4, #20]
 800e720:	60a2      	str	r2, [r4, #8]
 800e722:	e7f4      	b.n	800e70e <__swsetup_r+0x8e>
 800e724:	2000      	movs	r0, #0
 800e726:	e7f7      	b.n	800e718 <__swsetup_r+0x98>
 800e728:	24000020 	.word	0x24000020

0800e72c <memset>:
 800e72c:	4402      	add	r2, r0
 800e72e:	4603      	mov	r3, r0
 800e730:	4293      	cmp	r3, r2
 800e732:	d100      	bne.n	800e736 <memset+0xa>
 800e734:	4770      	bx	lr
 800e736:	f803 1b01 	strb.w	r1, [r3], #1
 800e73a:	e7f9      	b.n	800e730 <memset+0x4>

0800e73c <_close_r>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	4d06      	ldr	r5, [pc, #24]	@ (800e758 <_close_r+0x1c>)
 800e740:	2300      	movs	r3, #0
 800e742:	4604      	mov	r4, r0
 800e744:	4608      	mov	r0, r1
 800e746:	602b      	str	r3, [r5, #0]
 800e748:	f7f3 fc0d 	bl	8001f66 <_close>
 800e74c:	1c43      	adds	r3, r0, #1
 800e74e:	d102      	bne.n	800e756 <_close_r+0x1a>
 800e750:	682b      	ldr	r3, [r5, #0]
 800e752:	b103      	cbz	r3, 800e756 <_close_r+0x1a>
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	bd38      	pop	{r3, r4, r5, pc}
 800e758:	24028f4c 	.word	0x24028f4c

0800e75c <_lseek_r>:
 800e75c:	b538      	push	{r3, r4, r5, lr}
 800e75e:	4d07      	ldr	r5, [pc, #28]	@ (800e77c <_lseek_r+0x20>)
 800e760:	4604      	mov	r4, r0
 800e762:	4608      	mov	r0, r1
 800e764:	4611      	mov	r1, r2
 800e766:	2200      	movs	r2, #0
 800e768:	602a      	str	r2, [r5, #0]
 800e76a:	461a      	mov	r2, r3
 800e76c:	f7f3 fc22 	bl	8001fb4 <_lseek>
 800e770:	1c43      	adds	r3, r0, #1
 800e772:	d102      	bne.n	800e77a <_lseek_r+0x1e>
 800e774:	682b      	ldr	r3, [r5, #0]
 800e776:	b103      	cbz	r3, 800e77a <_lseek_r+0x1e>
 800e778:	6023      	str	r3, [r4, #0]
 800e77a:	bd38      	pop	{r3, r4, r5, pc}
 800e77c:	24028f4c 	.word	0x24028f4c

0800e780 <_read_r>:
 800e780:	b538      	push	{r3, r4, r5, lr}
 800e782:	4d07      	ldr	r5, [pc, #28]	@ (800e7a0 <_read_r+0x20>)
 800e784:	4604      	mov	r4, r0
 800e786:	4608      	mov	r0, r1
 800e788:	4611      	mov	r1, r2
 800e78a:	2200      	movs	r2, #0
 800e78c:	602a      	str	r2, [r5, #0]
 800e78e:	461a      	mov	r2, r3
 800e790:	f7f3 fbb0 	bl	8001ef4 <_read>
 800e794:	1c43      	adds	r3, r0, #1
 800e796:	d102      	bne.n	800e79e <_read_r+0x1e>
 800e798:	682b      	ldr	r3, [r5, #0]
 800e79a:	b103      	cbz	r3, 800e79e <_read_r+0x1e>
 800e79c:	6023      	str	r3, [r4, #0]
 800e79e:	bd38      	pop	{r3, r4, r5, pc}
 800e7a0:	24028f4c 	.word	0x24028f4c

0800e7a4 <_sbrk_r>:
 800e7a4:	b538      	push	{r3, r4, r5, lr}
 800e7a6:	4d06      	ldr	r5, [pc, #24]	@ (800e7c0 <_sbrk_r+0x1c>)
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	4604      	mov	r4, r0
 800e7ac:	4608      	mov	r0, r1
 800e7ae:	602b      	str	r3, [r5, #0]
 800e7b0:	f7f3 fc0e 	bl	8001fd0 <_sbrk>
 800e7b4:	1c43      	adds	r3, r0, #1
 800e7b6:	d102      	bne.n	800e7be <_sbrk_r+0x1a>
 800e7b8:	682b      	ldr	r3, [r5, #0]
 800e7ba:	b103      	cbz	r3, 800e7be <_sbrk_r+0x1a>
 800e7bc:	6023      	str	r3, [r4, #0]
 800e7be:	bd38      	pop	{r3, r4, r5, pc}
 800e7c0:	24028f4c 	.word	0x24028f4c

0800e7c4 <_write_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	4d07      	ldr	r5, [pc, #28]	@ (800e7e4 <_write_r+0x20>)
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	4608      	mov	r0, r1
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	602a      	str	r2, [r5, #0]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	f7f3 fbab 	bl	8001f2e <_write>
 800e7d8:	1c43      	adds	r3, r0, #1
 800e7da:	d102      	bne.n	800e7e2 <_write_r+0x1e>
 800e7dc:	682b      	ldr	r3, [r5, #0]
 800e7de:	b103      	cbz	r3, 800e7e2 <_write_r+0x1e>
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	bd38      	pop	{r3, r4, r5, pc}
 800e7e4:	24028f4c 	.word	0x24028f4c

0800e7e8 <__errno>:
 800e7e8:	4b01      	ldr	r3, [pc, #4]	@ (800e7f0 <__errno+0x8>)
 800e7ea:	6818      	ldr	r0, [r3, #0]
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	24000020 	.word	0x24000020

0800e7f4 <__libc_init_array>:
 800e7f4:	b570      	push	{r4, r5, r6, lr}
 800e7f6:	4d0d      	ldr	r5, [pc, #52]	@ (800e82c <__libc_init_array+0x38>)
 800e7f8:	4c0d      	ldr	r4, [pc, #52]	@ (800e830 <__libc_init_array+0x3c>)
 800e7fa:	1b64      	subs	r4, r4, r5
 800e7fc:	10a4      	asrs	r4, r4, #2
 800e7fe:	2600      	movs	r6, #0
 800e800:	42a6      	cmp	r6, r4
 800e802:	d109      	bne.n	800e818 <__libc_init_array+0x24>
 800e804:	4d0b      	ldr	r5, [pc, #44]	@ (800e834 <__libc_init_array+0x40>)
 800e806:	4c0c      	ldr	r4, [pc, #48]	@ (800e838 <__libc_init_array+0x44>)
 800e808:	f000 fe1a 	bl	800f440 <_init>
 800e80c:	1b64      	subs	r4, r4, r5
 800e80e:	10a4      	asrs	r4, r4, #2
 800e810:	2600      	movs	r6, #0
 800e812:	42a6      	cmp	r6, r4
 800e814:	d105      	bne.n	800e822 <__libc_init_array+0x2e>
 800e816:	bd70      	pop	{r4, r5, r6, pc}
 800e818:	f855 3b04 	ldr.w	r3, [r5], #4
 800e81c:	4798      	blx	r3
 800e81e:	3601      	adds	r6, #1
 800e820:	e7ee      	b.n	800e800 <__libc_init_array+0xc>
 800e822:	f855 3b04 	ldr.w	r3, [r5], #4
 800e826:	4798      	blx	r3
 800e828:	3601      	adds	r6, #1
 800e82a:	e7f2      	b.n	800e812 <__libc_init_array+0x1e>
 800e82c:	080102c0 	.word	0x080102c0
 800e830:	080102c0 	.word	0x080102c0
 800e834:	080102c0 	.word	0x080102c0
 800e838:	080102c4 	.word	0x080102c4

0800e83c <__retarget_lock_init_recursive>:
 800e83c:	4770      	bx	lr

0800e83e <__retarget_lock_acquire_recursive>:
 800e83e:	4770      	bx	lr

0800e840 <__retarget_lock_release_recursive>:
 800e840:	4770      	bx	lr

0800e842 <memcpy>:
 800e842:	440a      	add	r2, r1
 800e844:	4291      	cmp	r1, r2
 800e846:	f100 33ff 	add.w	r3, r0, #4294967295
 800e84a:	d100      	bne.n	800e84e <memcpy+0xc>
 800e84c:	4770      	bx	lr
 800e84e:	b510      	push	{r4, lr}
 800e850:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e854:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e858:	4291      	cmp	r1, r2
 800e85a:	d1f9      	bne.n	800e850 <memcpy+0xe>
 800e85c:	bd10      	pop	{r4, pc}
	...

0800e860 <_free_r>:
 800e860:	b538      	push	{r3, r4, r5, lr}
 800e862:	4605      	mov	r5, r0
 800e864:	2900      	cmp	r1, #0
 800e866:	d041      	beq.n	800e8ec <_free_r+0x8c>
 800e868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e86c:	1f0c      	subs	r4, r1, #4
 800e86e:	2b00      	cmp	r3, #0
 800e870:	bfb8      	it	lt
 800e872:	18e4      	addlt	r4, r4, r3
 800e874:	f7ff fd22 	bl	800e2bc <__malloc_lock>
 800e878:	4a1d      	ldr	r2, [pc, #116]	@ (800e8f0 <_free_r+0x90>)
 800e87a:	6813      	ldr	r3, [r2, #0]
 800e87c:	b933      	cbnz	r3, 800e88c <_free_r+0x2c>
 800e87e:	6063      	str	r3, [r4, #4]
 800e880:	6014      	str	r4, [r2, #0]
 800e882:	4628      	mov	r0, r5
 800e884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e888:	f7ff bd1e 	b.w	800e2c8 <__malloc_unlock>
 800e88c:	42a3      	cmp	r3, r4
 800e88e:	d908      	bls.n	800e8a2 <_free_r+0x42>
 800e890:	6820      	ldr	r0, [r4, #0]
 800e892:	1821      	adds	r1, r4, r0
 800e894:	428b      	cmp	r3, r1
 800e896:	bf01      	itttt	eq
 800e898:	6819      	ldreq	r1, [r3, #0]
 800e89a:	685b      	ldreq	r3, [r3, #4]
 800e89c:	1809      	addeq	r1, r1, r0
 800e89e:	6021      	streq	r1, [r4, #0]
 800e8a0:	e7ed      	b.n	800e87e <_free_r+0x1e>
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	b10b      	cbz	r3, 800e8ac <_free_r+0x4c>
 800e8a8:	42a3      	cmp	r3, r4
 800e8aa:	d9fa      	bls.n	800e8a2 <_free_r+0x42>
 800e8ac:	6811      	ldr	r1, [r2, #0]
 800e8ae:	1850      	adds	r0, r2, r1
 800e8b0:	42a0      	cmp	r0, r4
 800e8b2:	d10b      	bne.n	800e8cc <_free_r+0x6c>
 800e8b4:	6820      	ldr	r0, [r4, #0]
 800e8b6:	4401      	add	r1, r0
 800e8b8:	1850      	adds	r0, r2, r1
 800e8ba:	4283      	cmp	r3, r0
 800e8bc:	6011      	str	r1, [r2, #0]
 800e8be:	d1e0      	bne.n	800e882 <_free_r+0x22>
 800e8c0:	6818      	ldr	r0, [r3, #0]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	6053      	str	r3, [r2, #4]
 800e8c6:	4408      	add	r0, r1
 800e8c8:	6010      	str	r0, [r2, #0]
 800e8ca:	e7da      	b.n	800e882 <_free_r+0x22>
 800e8cc:	d902      	bls.n	800e8d4 <_free_r+0x74>
 800e8ce:	230c      	movs	r3, #12
 800e8d0:	602b      	str	r3, [r5, #0]
 800e8d2:	e7d6      	b.n	800e882 <_free_r+0x22>
 800e8d4:	6820      	ldr	r0, [r4, #0]
 800e8d6:	1821      	adds	r1, r4, r0
 800e8d8:	428b      	cmp	r3, r1
 800e8da:	bf04      	itt	eq
 800e8dc:	6819      	ldreq	r1, [r3, #0]
 800e8de:	685b      	ldreq	r3, [r3, #4]
 800e8e0:	6063      	str	r3, [r4, #4]
 800e8e2:	bf04      	itt	eq
 800e8e4:	1809      	addeq	r1, r1, r0
 800e8e6:	6021      	streq	r1, [r4, #0]
 800e8e8:	6054      	str	r4, [r2, #4]
 800e8ea:	e7ca      	b.n	800e882 <_free_r+0x22>
 800e8ec:	bd38      	pop	{r3, r4, r5, pc}
 800e8ee:	bf00      	nop
 800e8f0:	24028e0c 	.word	0x24028e0c

0800e8f4 <__ssputs_r>:
 800e8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f8:	688e      	ldr	r6, [r1, #8]
 800e8fa:	461f      	mov	r7, r3
 800e8fc:	42be      	cmp	r6, r7
 800e8fe:	680b      	ldr	r3, [r1, #0]
 800e900:	4682      	mov	sl, r0
 800e902:	460c      	mov	r4, r1
 800e904:	4690      	mov	r8, r2
 800e906:	d82d      	bhi.n	800e964 <__ssputs_r+0x70>
 800e908:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e90c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e910:	d026      	beq.n	800e960 <__ssputs_r+0x6c>
 800e912:	6965      	ldr	r5, [r4, #20]
 800e914:	6909      	ldr	r1, [r1, #16]
 800e916:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e91a:	eba3 0901 	sub.w	r9, r3, r1
 800e91e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e922:	1c7b      	adds	r3, r7, #1
 800e924:	444b      	add	r3, r9
 800e926:	106d      	asrs	r5, r5, #1
 800e928:	429d      	cmp	r5, r3
 800e92a:	bf38      	it	cc
 800e92c:	461d      	movcc	r5, r3
 800e92e:	0553      	lsls	r3, r2, #21
 800e930:	d527      	bpl.n	800e982 <__ssputs_r+0x8e>
 800e932:	4629      	mov	r1, r5
 800e934:	f7ff fc42 	bl	800e1bc <_malloc_r>
 800e938:	4606      	mov	r6, r0
 800e93a:	b360      	cbz	r0, 800e996 <__ssputs_r+0xa2>
 800e93c:	6921      	ldr	r1, [r4, #16]
 800e93e:	464a      	mov	r2, r9
 800e940:	f7ff ff7f 	bl	800e842 <memcpy>
 800e944:	89a3      	ldrh	r3, [r4, #12]
 800e946:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e94a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e94e:	81a3      	strh	r3, [r4, #12]
 800e950:	6126      	str	r6, [r4, #16]
 800e952:	6165      	str	r5, [r4, #20]
 800e954:	444e      	add	r6, r9
 800e956:	eba5 0509 	sub.w	r5, r5, r9
 800e95a:	6026      	str	r6, [r4, #0]
 800e95c:	60a5      	str	r5, [r4, #8]
 800e95e:	463e      	mov	r6, r7
 800e960:	42be      	cmp	r6, r7
 800e962:	d900      	bls.n	800e966 <__ssputs_r+0x72>
 800e964:	463e      	mov	r6, r7
 800e966:	6820      	ldr	r0, [r4, #0]
 800e968:	4632      	mov	r2, r6
 800e96a:	4641      	mov	r1, r8
 800e96c:	f000 fcf6 	bl	800f35c <memmove>
 800e970:	68a3      	ldr	r3, [r4, #8]
 800e972:	1b9b      	subs	r3, r3, r6
 800e974:	60a3      	str	r3, [r4, #8]
 800e976:	6823      	ldr	r3, [r4, #0]
 800e978:	4433      	add	r3, r6
 800e97a:	6023      	str	r3, [r4, #0]
 800e97c:	2000      	movs	r0, #0
 800e97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e982:	462a      	mov	r2, r5
 800e984:	f000 fd26 	bl	800f3d4 <_realloc_r>
 800e988:	4606      	mov	r6, r0
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d1e0      	bne.n	800e950 <__ssputs_r+0x5c>
 800e98e:	6921      	ldr	r1, [r4, #16]
 800e990:	4650      	mov	r0, sl
 800e992:	f7ff ff65 	bl	800e860 <_free_r>
 800e996:	230c      	movs	r3, #12
 800e998:	f8ca 3000 	str.w	r3, [sl]
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9a2:	81a3      	strh	r3, [r4, #12]
 800e9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a8:	e7e9      	b.n	800e97e <__ssputs_r+0x8a>
	...

0800e9ac <_svfiprintf_r>:
 800e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b0:	4698      	mov	r8, r3
 800e9b2:	898b      	ldrh	r3, [r1, #12]
 800e9b4:	061b      	lsls	r3, r3, #24
 800e9b6:	b09d      	sub	sp, #116	@ 0x74
 800e9b8:	4607      	mov	r7, r0
 800e9ba:	460d      	mov	r5, r1
 800e9bc:	4614      	mov	r4, r2
 800e9be:	d510      	bpl.n	800e9e2 <_svfiprintf_r+0x36>
 800e9c0:	690b      	ldr	r3, [r1, #16]
 800e9c2:	b973      	cbnz	r3, 800e9e2 <_svfiprintf_r+0x36>
 800e9c4:	2140      	movs	r1, #64	@ 0x40
 800e9c6:	f7ff fbf9 	bl	800e1bc <_malloc_r>
 800e9ca:	6028      	str	r0, [r5, #0]
 800e9cc:	6128      	str	r0, [r5, #16]
 800e9ce:	b930      	cbnz	r0, 800e9de <_svfiprintf_r+0x32>
 800e9d0:	230c      	movs	r3, #12
 800e9d2:	603b      	str	r3, [r7, #0]
 800e9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d8:	b01d      	add	sp, #116	@ 0x74
 800e9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9de:	2340      	movs	r3, #64	@ 0x40
 800e9e0:	616b      	str	r3, [r5, #20]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9e6:	2320      	movs	r3, #32
 800e9e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9f0:	2330      	movs	r3, #48	@ 0x30
 800e9f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eb90 <_svfiprintf_r+0x1e4>
 800e9f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e9fa:	f04f 0901 	mov.w	r9, #1
 800e9fe:	4623      	mov	r3, r4
 800ea00:	469a      	mov	sl, r3
 800ea02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea06:	b10a      	cbz	r2, 800ea0c <_svfiprintf_r+0x60>
 800ea08:	2a25      	cmp	r2, #37	@ 0x25
 800ea0a:	d1f9      	bne.n	800ea00 <_svfiprintf_r+0x54>
 800ea0c:	ebba 0b04 	subs.w	fp, sl, r4
 800ea10:	d00b      	beq.n	800ea2a <_svfiprintf_r+0x7e>
 800ea12:	465b      	mov	r3, fp
 800ea14:	4622      	mov	r2, r4
 800ea16:	4629      	mov	r1, r5
 800ea18:	4638      	mov	r0, r7
 800ea1a:	f7ff ff6b 	bl	800e8f4 <__ssputs_r>
 800ea1e:	3001      	adds	r0, #1
 800ea20:	f000 80a7 	beq.w	800eb72 <_svfiprintf_r+0x1c6>
 800ea24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea26:	445a      	add	r2, fp
 800ea28:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f000 809f 	beq.w	800eb72 <_svfiprintf_r+0x1c6>
 800ea34:	2300      	movs	r3, #0
 800ea36:	f04f 32ff 	mov.w	r2, #4294967295
 800ea3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea3e:	f10a 0a01 	add.w	sl, sl, #1
 800ea42:	9304      	str	r3, [sp, #16]
 800ea44:	9307      	str	r3, [sp, #28]
 800ea46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea4a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea4c:	4654      	mov	r4, sl
 800ea4e:	2205      	movs	r2, #5
 800ea50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea54:	484e      	ldr	r0, [pc, #312]	@ (800eb90 <_svfiprintf_r+0x1e4>)
 800ea56:	f7f1 fc5b 	bl	8000310 <memchr>
 800ea5a:	9a04      	ldr	r2, [sp, #16]
 800ea5c:	b9d8      	cbnz	r0, 800ea96 <_svfiprintf_r+0xea>
 800ea5e:	06d0      	lsls	r0, r2, #27
 800ea60:	bf44      	itt	mi
 800ea62:	2320      	movmi	r3, #32
 800ea64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea68:	0711      	lsls	r1, r2, #28
 800ea6a:	bf44      	itt	mi
 800ea6c:	232b      	movmi	r3, #43	@ 0x2b
 800ea6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea72:	f89a 3000 	ldrb.w	r3, [sl]
 800ea76:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea78:	d015      	beq.n	800eaa6 <_svfiprintf_r+0xfa>
 800ea7a:	9a07      	ldr	r2, [sp, #28]
 800ea7c:	4654      	mov	r4, sl
 800ea7e:	2000      	movs	r0, #0
 800ea80:	f04f 0c0a 	mov.w	ip, #10
 800ea84:	4621      	mov	r1, r4
 800ea86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea8a:	3b30      	subs	r3, #48	@ 0x30
 800ea8c:	2b09      	cmp	r3, #9
 800ea8e:	d94b      	bls.n	800eb28 <_svfiprintf_r+0x17c>
 800ea90:	b1b0      	cbz	r0, 800eac0 <_svfiprintf_r+0x114>
 800ea92:	9207      	str	r2, [sp, #28]
 800ea94:	e014      	b.n	800eac0 <_svfiprintf_r+0x114>
 800ea96:	eba0 0308 	sub.w	r3, r0, r8
 800ea9a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	9304      	str	r3, [sp, #16]
 800eaa2:	46a2      	mov	sl, r4
 800eaa4:	e7d2      	b.n	800ea4c <_svfiprintf_r+0xa0>
 800eaa6:	9b03      	ldr	r3, [sp, #12]
 800eaa8:	1d19      	adds	r1, r3, #4
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	9103      	str	r1, [sp, #12]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	bfbb      	ittet	lt
 800eab2:	425b      	neglt	r3, r3
 800eab4:	f042 0202 	orrlt.w	r2, r2, #2
 800eab8:	9307      	strge	r3, [sp, #28]
 800eaba:	9307      	strlt	r3, [sp, #28]
 800eabc:	bfb8      	it	lt
 800eabe:	9204      	strlt	r2, [sp, #16]
 800eac0:	7823      	ldrb	r3, [r4, #0]
 800eac2:	2b2e      	cmp	r3, #46	@ 0x2e
 800eac4:	d10a      	bne.n	800eadc <_svfiprintf_r+0x130>
 800eac6:	7863      	ldrb	r3, [r4, #1]
 800eac8:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaca:	d132      	bne.n	800eb32 <_svfiprintf_r+0x186>
 800eacc:	9b03      	ldr	r3, [sp, #12]
 800eace:	1d1a      	adds	r2, r3, #4
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	9203      	str	r2, [sp, #12]
 800ead4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ead8:	3402      	adds	r4, #2
 800eada:	9305      	str	r3, [sp, #20]
 800eadc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eba0 <_svfiprintf_r+0x1f4>
 800eae0:	7821      	ldrb	r1, [r4, #0]
 800eae2:	2203      	movs	r2, #3
 800eae4:	4650      	mov	r0, sl
 800eae6:	f7f1 fc13 	bl	8000310 <memchr>
 800eaea:	b138      	cbz	r0, 800eafc <_svfiprintf_r+0x150>
 800eaec:	9b04      	ldr	r3, [sp, #16]
 800eaee:	eba0 000a 	sub.w	r0, r0, sl
 800eaf2:	2240      	movs	r2, #64	@ 0x40
 800eaf4:	4082      	lsls	r2, r0
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	3401      	adds	r4, #1
 800eafa:	9304      	str	r3, [sp, #16]
 800eafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb00:	4824      	ldr	r0, [pc, #144]	@ (800eb94 <_svfiprintf_r+0x1e8>)
 800eb02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb06:	2206      	movs	r2, #6
 800eb08:	f7f1 fc02 	bl	8000310 <memchr>
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d036      	beq.n	800eb7e <_svfiprintf_r+0x1d2>
 800eb10:	4b21      	ldr	r3, [pc, #132]	@ (800eb98 <_svfiprintf_r+0x1ec>)
 800eb12:	bb1b      	cbnz	r3, 800eb5c <_svfiprintf_r+0x1b0>
 800eb14:	9b03      	ldr	r3, [sp, #12]
 800eb16:	3307      	adds	r3, #7
 800eb18:	f023 0307 	bic.w	r3, r3, #7
 800eb1c:	3308      	adds	r3, #8
 800eb1e:	9303      	str	r3, [sp, #12]
 800eb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb22:	4433      	add	r3, r6
 800eb24:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb26:	e76a      	b.n	800e9fe <_svfiprintf_r+0x52>
 800eb28:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb2c:	460c      	mov	r4, r1
 800eb2e:	2001      	movs	r0, #1
 800eb30:	e7a8      	b.n	800ea84 <_svfiprintf_r+0xd8>
 800eb32:	2300      	movs	r3, #0
 800eb34:	3401      	adds	r4, #1
 800eb36:	9305      	str	r3, [sp, #20]
 800eb38:	4619      	mov	r1, r3
 800eb3a:	f04f 0c0a 	mov.w	ip, #10
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb44:	3a30      	subs	r2, #48	@ 0x30
 800eb46:	2a09      	cmp	r2, #9
 800eb48:	d903      	bls.n	800eb52 <_svfiprintf_r+0x1a6>
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d0c6      	beq.n	800eadc <_svfiprintf_r+0x130>
 800eb4e:	9105      	str	r1, [sp, #20]
 800eb50:	e7c4      	b.n	800eadc <_svfiprintf_r+0x130>
 800eb52:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb56:	4604      	mov	r4, r0
 800eb58:	2301      	movs	r3, #1
 800eb5a:	e7f0      	b.n	800eb3e <_svfiprintf_r+0x192>
 800eb5c:	ab03      	add	r3, sp, #12
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	462a      	mov	r2, r5
 800eb62:	4b0e      	ldr	r3, [pc, #56]	@ (800eb9c <_svfiprintf_r+0x1f0>)
 800eb64:	a904      	add	r1, sp, #16
 800eb66:	4638      	mov	r0, r7
 800eb68:	f3af 8000 	nop.w
 800eb6c:	1c42      	adds	r2, r0, #1
 800eb6e:	4606      	mov	r6, r0
 800eb70:	d1d6      	bne.n	800eb20 <_svfiprintf_r+0x174>
 800eb72:	89ab      	ldrh	r3, [r5, #12]
 800eb74:	065b      	lsls	r3, r3, #25
 800eb76:	f53f af2d 	bmi.w	800e9d4 <_svfiprintf_r+0x28>
 800eb7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb7c:	e72c      	b.n	800e9d8 <_svfiprintf_r+0x2c>
 800eb7e:	ab03      	add	r3, sp, #12
 800eb80:	9300      	str	r3, [sp, #0]
 800eb82:	462a      	mov	r2, r5
 800eb84:	4b05      	ldr	r3, [pc, #20]	@ (800eb9c <_svfiprintf_r+0x1f0>)
 800eb86:	a904      	add	r1, sp, #16
 800eb88:	4638      	mov	r0, r7
 800eb8a:	f000 f9bb 	bl	800ef04 <_printf_i>
 800eb8e:	e7ed      	b.n	800eb6c <_svfiprintf_r+0x1c0>
 800eb90:	08010284 	.word	0x08010284
 800eb94:	0801028e 	.word	0x0801028e
 800eb98:	00000000 	.word	0x00000000
 800eb9c:	0800e8f5 	.word	0x0800e8f5
 800eba0:	0801028a 	.word	0x0801028a

0800eba4 <__sfputc_r>:
 800eba4:	6893      	ldr	r3, [r2, #8]
 800eba6:	3b01      	subs	r3, #1
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	b410      	push	{r4}
 800ebac:	6093      	str	r3, [r2, #8]
 800ebae:	da08      	bge.n	800ebc2 <__sfputc_r+0x1e>
 800ebb0:	6994      	ldr	r4, [r2, #24]
 800ebb2:	42a3      	cmp	r3, r4
 800ebb4:	db01      	blt.n	800ebba <__sfputc_r+0x16>
 800ebb6:	290a      	cmp	r1, #10
 800ebb8:	d103      	bne.n	800ebc2 <__sfputc_r+0x1e>
 800ebba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebbe:	f7ff bd20 	b.w	800e602 <__swbuf_r>
 800ebc2:	6813      	ldr	r3, [r2, #0]
 800ebc4:	1c58      	adds	r0, r3, #1
 800ebc6:	6010      	str	r0, [r2, #0]
 800ebc8:	7019      	strb	r1, [r3, #0]
 800ebca:	4608      	mov	r0, r1
 800ebcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebd0:	4770      	bx	lr

0800ebd2 <__sfputs_r>:
 800ebd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd4:	4606      	mov	r6, r0
 800ebd6:	460f      	mov	r7, r1
 800ebd8:	4614      	mov	r4, r2
 800ebda:	18d5      	adds	r5, r2, r3
 800ebdc:	42ac      	cmp	r4, r5
 800ebde:	d101      	bne.n	800ebe4 <__sfputs_r+0x12>
 800ebe0:	2000      	movs	r0, #0
 800ebe2:	e007      	b.n	800ebf4 <__sfputs_r+0x22>
 800ebe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebe8:	463a      	mov	r2, r7
 800ebea:	4630      	mov	r0, r6
 800ebec:	f7ff ffda 	bl	800eba4 <__sfputc_r>
 800ebf0:	1c43      	adds	r3, r0, #1
 800ebf2:	d1f3      	bne.n	800ebdc <__sfputs_r+0xa>
 800ebf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebf8 <_vfiprintf_r>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	460d      	mov	r5, r1
 800ebfe:	b09d      	sub	sp, #116	@ 0x74
 800ec00:	4614      	mov	r4, r2
 800ec02:	4698      	mov	r8, r3
 800ec04:	4606      	mov	r6, r0
 800ec06:	b118      	cbz	r0, 800ec10 <_vfiprintf_r+0x18>
 800ec08:	6a03      	ldr	r3, [r0, #32]
 800ec0a:	b90b      	cbnz	r3, 800ec10 <_vfiprintf_r+0x18>
 800ec0c:	f7ff fbee 	bl	800e3ec <__sinit>
 800ec10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec12:	07d9      	lsls	r1, r3, #31
 800ec14:	d405      	bmi.n	800ec22 <_vfiprintf_r+0x2a>
 800ec16:	89ab      	ldrh	r3, [r5, #12]
 800ec18:	059a      	lsls	r2, r3, #22
 800ec1a:	d402      	bmi.n	800ec22 <_vfiprintf_r+0x2a>
 800ec1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec1e:	f7ff fe0e 	bl	800e83e <__retarget_lock_acquire_recursive>
 800ec22:	89ab      	ldrh	r3, [r5, #12]
 800ec24:	071b      	lsls	r3, r3, #28
 800ec26:	d501      	bpl.n	800ec2c <_vfiprintf_r+0x34>
 800ec28:	692b      	ldr	r3, [r5, #16]
 800ec2a:	b99b      	cbnz	r3, 800ec54 <_vfiprintf_r+0x5c>
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f7ff fd26 	bl	800e680 <__swsetup_r>
 800ec34:	b170      	cbz	r0, 800ec54 <_vfiprintf_r+0x5c>
 800ec36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec38:	07dc      	lsls	r4, r3, #31
 800ec3a:	d504      	bpl.n	800ec46 <_vfiprintf_r+0x4e>
 800ec3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec40:	b01d      	add	sp, #116	@ 0x74
 800ec42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec46:	89ab      	ldrh	r3, [r5, #12]
 800ec48:	0598      	lsls	r0, r3, #22
 800ec4a:	d4f7      	bmi.n	800ec3c <_vfiprintf_r+0x44>
 800ec4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec4e:	f7ff fdf7 	bl	800e840 <__retarget_lock_release_recursive>
 800ec52:	e7f3      	b.n	800ec3c <_vfiprintf_r+0x44>
 800ec54:	2300      	movs	r3, #0
 800ec56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec58:	2320      	movs	r3, #32
 800ec5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec62:	2330      	movs	r3, #48	@ 0x30
 800ec64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee14 <_vfiprintf_r+0x21c>
 800ec68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec6c:	f04f 0901 	mov.w	r9, #1
 800ec70:	4623      	mov	r3, r4
 800ec72:	469a      	mov	sl, r3
 800ec74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec78:	b10a      	cbz	r2, 800ec7e <_vfiprintf_r+0x86>
 800ec7a:	2a25      	cmp	r2, #37	@ 0x25
 800ec7c:	d1f9      	bne.n	800ec72 <_vfiprintf_r+0x7a>
 800ec7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ec82:	d00b      	beq.n	800ec9c <_vfiprintf_r+0xa4>
 800ec84:	465b      	mov	r3, fp
 800ec86:	4622      	mov	r2, r4
 800ec88:	4629      	mov	r1, r5
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	f7ff ffa1 	bl	800ebd2 <__sfputs_r>
 800ec90:	3001      	adds	r0, #1
 800ec92:	f000 80a7 	beq.w	800ede4 <_vfiprintf_r+0x1ec>
 800ec96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec98:	445a      	add	r2, fp
 800ec9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec9c:	f89a 3000 	ldrb.w	r3, [sl]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f000 809f 	beq.w	800ede4 <_vfiprintf_r+0x1ec>
 800eca6:	2300      	movs	r3, #0
 800eca8:	f04f 32ff 	mov.w	r2, #4294967295
 800ecac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecb0:	f10a 0a01 	add.w	sl, sl, #1
 800ecb4:	9304      	str	r3, [sp, #16]
 800ecb6:	9307      	str	r3, [sp, #28]
 800ecb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecbe:	4654      	mov	r4, sl
 800ecc0:	2205      	movs	r2, #5
 800ecc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc6:	4853      	ldr	r0, [pc, #332]	@ (800ee14 <_vfiprintf_r+0x21c>)
 800ecc8:	f7f1 fb22 	bl	8000310 <memchr>
 800eccc:	9a04      	ldr	r2, [sp, #16]
 800ecce:	b9d8      	cbnz	r0, 800ed08 <_vfiprintf_r+0x110>
 800ecd0:	06d1      	lsls	r1, r2, #27
 800ecd2:	bf44      	itt	mi
 800ecd4:	2320      	movmi	r3, #32
 800ecd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecda:	0713      	lsls	r3, r2, #28
 800ecdc:	bf44      	itt	mi
 800ecde:	232b      	movmi	r3, #43	@ 0x2b
 800ece0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ece4:	f89a 3000 	ldrb.w	r3, [sl]
 800ece8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecea:	d015      	beq.n	800ed18 <_vfiprintf_r+0x120>
 800ecec:	9a07      	ldr	r2, [sp, #28]
 800ecee:	4654      	mov	r4, sl
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	f04f 0c0a 	mov.w	ip, #10
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecfc:	3b30      	subs	r3, #48	@ 0x30
 800ecfe:	2b09      	cmp	r3, #9
 800ed00:	d94b      	bls.n	800ed9a <_vfiprintf_r+0x1a2>
 800ed02:	b1b0      	cbz	r0, 800ed32 <_vfiprintf_r+0x13a>
 800ed04:	9207      	str	r2, [sp, #28]
 800ed06:	e014      	b.n	800ed32 <_vfiprintf_r+0x13a>
 800ed08:	eba0 0308 	sub.w	r3, r0, r8
 800ed0c:	fa09 f303 	lsl.w	r3, r9, r3
 800ed10:	4313      	orrs	r3, r2
 800ed12:	9304      	str	r3, [sp, #16]
 800ed14:	46a2      	mov	sl, r4
 800ed16:	e7d2      	b.n	800ecbe <_vfiprintf_r+0xc6>
 800ed18:	9b03      	ldr	r3, [sp, #12]
 800ed1a:	1d19      	adds	r1, r3, #4
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	9103      	str	r1, [sp, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	bfbb      	ittet	lt
 800ed24:	425b      	neglt	r3, r3
 800ed26:	f042 0202 	orrlt.w	r2, r2, #2
 800ed2a:	9307      	strge	r3, [sp, #28]
 800ed2c:	9307      	strlt	r3, [sp, #28]
 800ed2e:	bfb8      	it	lt
 800ed30:	9204      	strlt	r2, [sp, #16]
 800ed32:	7823      	ldrb	r3, [r4, #0]
 800ed34:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed36:	d10a      	bne.n	800ed4e <_vfiprintf_r+0x156>
 800ed38:	7863      	ldrb	r3, [r4, #1]
 800ed3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed3c:	d132      	bne.n	800eda4 <_vfiprintf_r+0x1ac>
 800ed3e:	9b03      	ldr	r3, [sp, #12]
 800ed40:	1d1a      	adds	r2, r3, #4
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	9203      	str	r2, [sp, #12]
 800ed46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed4a:	3402      	adds	r4, #2
 800ed4c:	9305      	str	r3, [sp, #20]
 800ed4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee24 <_vfiprintf_r+0x22c>
 800ed52:	7821      	ldrb	r1, [r4, #0]
 800ed54:	2203      	movs	r2, #3
 800ed56:	4650      	mov	r0, sl
 800ed58:	f7f1 fada 	bl	8000310 <memchr>
 800ed5c:	b138      	cbz	r0, 800ed6e <_vfiprintf_r+0x176>
 800ed5e:	9b04      	ldr	r3, [sp, #16]
 800ed60:	eba0 000a 	sub.w	r0, r0, sl
 800ed64:	2240      	movs	r2, #64	@ 0x40
 800ed66:	4082      	lsls	r2, r0
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	3401      	adds	r4, #1
 800ed6c:	9304      	str	r3, [sp, #16]
 800ed6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed72:	4829      	ldr	r0, [pc, #164]	@ (800ee18 <_vfiprintf_r+0x220>)
 800ed74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed78:	2206      	movs	r2, #6
 800ed7a:	f7f1 fac9 	bl	8000310 <memchr>
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d03f      	beq.n	800ee02 <_vfiprintf_r+0x20a>
 800ed82:	4b26      	ldr	r3, [pc, #152]	@ (800ee1c <_vfiprintf_r+0x224>)
 800ed84:	bb1b      	cbnz	r3, 800edce <_vfiprintf_r+0x1d6>
 800ed86:	9b03      	ldr	r3, [sp, #12]
 800ed88:	3307      	adds	r3, #7
 800ed8a:	f023 0307 	bic.w	r3, r3, #7
 800ed8e:	3308      	adds	r3, #8
 800ed90:	9303      	str	r3, [sp, #12]
 800ed92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed94:	443b      	add	r3, r7
 800ed96:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed98:	e76a      	b.n	800ec70 <_vfiprintf_r+0x78>
 800ed9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed9e:	460c      	mov	r4, r1
 800eda0:	2001      	movs	r0, #1
 800eda2:	e7a8      	b.n	800ecf6 <_vfiprintf_r+0xfe>
 800eda4:	2300      	movs	r3, #0
 800eda6:	3401      	adds	r4, #1
 800eda8:	9305      	str	r3, [sp, #20]
 800edaa:	4619      	mov	r1, r3
 800edac:	f04f 0c0a 	mov.w	ip, #10
 800edb0:	4620      	mov	r0, r4
 800edb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edb6:	3a30      	subs	r2, #48	@ 0x30
 800edb8:	2a09      	cmp	r2, #9
 800edba:	d903      	bls.n	800edc4 <_vfiprintf_r+0x1cc>
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d0c6      	beq.n	800ed4e <_vfiprintf_r+0x156>
 800edc0:	9105      	str	r1, [sp, #20]
 800edc2:	e7c4      	b.n	800ed4e <_vfiprintf_r+0x156>
 800edc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800edc8:	4604      	mov	r4, r0
 800edca:	2301      	movs	r3, #1
 800edcc:	e7f0      	b.n	800edb0 <_vfiprintf_r+0x1b8>
 800edce:	ab03      	add	r3, sp, #12
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	462a      	mov	r2, r5
 800edd4:	4b12      	ldr	r3, [pc, #72]	@ (800ee20 <_vfiprintf_r+0x228>)
 800edd6:	a904      	add	r1, sp, #16
 800edd8:	4630      	mov	r0, r6
 800edda:	f3af 8000 	nop.w
 800edde:	4607      	mov	r7, r0
 800ede0:	1c78      	adds	r0, r7, #1
 800ede2:	d1d6      	bne.n	800ed92 <_vfiprintf_r+0x19a>
 800ede4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ede6:	07d9      	lsls	r1, r3, #31
 800ede8:	d405      	bmi.n	800edf6 <_vfiprintf_r+0x1fe>
 800edea:	89ab      	ldrh	r3, [r5, #12]
 800edec:	059a      	lsls	r2, r3, #22
 800edee:	d402      	bmi.n	800edf6 <_vfiprintf_r+0x1fe>
 800edf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edf2:	f7ff fd25 	bl	800e840 <__retarget_lock_release_recursive>
 800edf6:	89ab      	ldrh	r3, [r5, #12]
 800edf8:	065b      	lsls	r3, r3, #25
 800edfa:	f53f af1f 	bmi.w	800ec3c <_vfiprintf_r+0x44>
 800edfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee00:	e71e      	b.n	800ec40 <_vfiprintf_r+0x48>
 800ee02:	ab03      	add	r3, sp, #12
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	462a      	mov	r2, r5
 800ee08:	4b05      	ldr	r3, [pc, #20]	@ (800ee20 <_vfiprintf_r+0x228>)
 800ee0a:	a904      	add	r1, sp, #16
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	f000 f879 	bl	800ef04 <_printf_i>
 800ee12:	e7e4      	b.n	800edde <_vfiprintf_r+0x1e6>
 800ee14:	08010284 	.word	0x08010284
 800ee18:	0801028e 	.word	0x0801028e
 800ee1c:	00000000 	.word	0x00000000
 800ee20:	0800ebd3 	.word	0x0800ebd3
 800ee24:	0801028a 	.word	0x0801028a

0800ee28 <_printf_common>:
 800ee28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee2c:	4616      	mov	r6, r2
 800ee2e:	4698      	mov	r8, r3
 800ee30:	688a      	ldr	r2, [r1, #8]
 800ee32:	690b      	ldr	r3, [r1, #16]
 800ee34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	bfb8      	it	lt
 800ee3c:	4613      	movlt	r3, r2
 800ee3e:	6033      	str	r3, [r6, #0]
 800ee40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee44:	4607      	mov	r7, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	b10a      	cbz	r2, 800ee4e <_printf_common+0x26>
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	6033      	str	r3, [r6, #0]
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	0699      	lsls	r1, r3, #26
 800ee52:	bf42      	ittt	mi
 800ee54:	6833      	ldrmi	r3, [r6, #0]
 800ee56:	3302      	addmi	r3, #2
 800ee58:	6033      	strmi	r3, [r6, #0]
 800ee5a:	6825      	ldr	r5, [r4, #0]
 800ee5c:	f015 0506 	ands.w	r5, r5, #6
 800ee60:	d106      	bne.n	800ee70 <_printf_common+0x48>
 800ee62:	f104 0a19 	add.w	sl, r4, #25
 800ee66:	68e3      	ldr	r3, [r4, #12]
 800ee68:	6832      	ldr	r2, [r6, #0]
 800ee6a:	1a9b      	subs	r3, r3, r2
 800ee6c:	42ab      	cmp	r3, r5
 800ee6e:	dc26      	bgt.n	800eebe <_printf_common+0x96>
 800ee70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ee74:	6822      	ldr	r2, [r4, #0]
 800ee76:	3b00      	subs	r3, #0
 800ee78:	bf18      	it	ne
 800ee7a:	2301      	movne	r3, #1
 800ee7c:	0692      	lsls	r2, r2, #26
 800ee7e:	d42b      	bmi.n	800eed8 <_printf_common+0xb0>
 800ee80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ee84:	4641      	mov	r1, r8
 800ee86:	4638      	mov	r0, r7
 800ee88:	47c8      	blx	r9
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	d01e      	beq.n	800eecc <_printf_common+0xa4>
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	6922      	ldr	r2, [r4, #16]
 800ee92:	f003 0306 	and.w	r3, r3, #6
 800ee96:	2b04      	cmp	r3, #4
 800ee98:	bf02      	ittt	eq
 800ee9a:	68e5      	ldreq	r5, [r4, #12]
 800ee9c:	6833      	ldreq	r3, [r6, #0]
 800ee9e:	1aed      	subeq	r5, r5, r3
 800eea0:	68a3      	ldr	r3, [r4, #8]
 800eea2:	bf0c      	ite	eq
 800eea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eea8:	2500      	movne	r5, #0
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	bfc4      	itt	gt
 800eeae:	1a9b      	subgt	r3, r3, r2
 800eeb0:	18ed      	addgt	r5, r5, r3
 800eeb2:	2600      	movs	r6, #0
 800eeb4:	341a      	adds	r4, #26
 800eeb6:	42b5      	cmp	r5, r6
 800eeb8:	d11a      	bne.n	800eef0 <_printf_common+0xc8>
 800eeba:	2000      	movs	r0, #0
 800eebc:	e008      	b.n	800eed0 <_printf_common+0xa8>
 800eebe:	2301      	movs	r3, #1
 800eec0:	4652      	mov	r2, sl
 800eec2:	4641      	mov	r1, r8
 800eec4:	4638      	mov	r0, r7
 800eec6:	47c8      	blx	r9
 800eec8:	3001      	adds	r0, #1
 800eeca:	d103      	bne.n	800eed4 <_printf_common+0xac>
 800eecc:	f04f 30ff 	mov.w	r0, #4294967295
 800eed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed4:	3501      	adds	r5, #1
 800eed6:	e7c6      	b.n	800ee66 <_printf_common+0x3e>
 800eed8:	18e1      	adds	r1, r4, r3
 800eeda:	1c5a      	adds	r2, r3, #1
 800eedc:	2030      	movs	r0, #48	@ 0x30
 800eede:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eee2:	4422      	add	r2, r4
 800eee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eee8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eeec:	3302      	adds	r3, #2
 800eeee:	e7c7      	b.n	800ee80 <_printf_common+0x58>
 800eef0:	2301      	movs	r3, #1
 800eef2:	4622      	mov	r2, r4
 800eef4:	4641      	mov	r1, r8
 800eef6:	4638      	mov	r0, r7
 800eef8:	47c8      	blx	r9
 800eefa:	3001      	adds	r0, #1
 800eefc:	d0e6      	beq.n	800eecc <_printf_common+0xa4>
 800eefe:	3601      	adds	r6, #1
 800ef00:	e7d9      	b.n	800eeb6 <_printf_common+0x8e>
	...

0800ef04 <_printf_i>:
 800ef04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef08:	7e0f      	ldrb	r7, [r1, #24]
 800ef0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef0c:	2f78      	cmp	r7, #120	@ 0x78
 800ef0e:	4691      	mov	r9, r2
 800ef10:	4680      	mov	r8, r0
 800ef12:	460c      	mov	r4, r1
 800ef14:	469a      	mov	sl, r3
 800ef16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef1a:	d807      	bhi.n	800ef2c <_printf_i+0x28>
 800ef1c:	2f62      	cmp	r7, #98	@ 0x62
 800ef1e:	d80a      	bhi.n	800ef36 <_printf_i+0x32>
 800ef20:	2f00      	cmp	r7, #0
 800ef22:	f000 80d1 	beq.w	800f0c8 <_printf_i+0x1c4>
 800ef26:	2f58      	cmp	r7, #88	@ 0x58
 800ef28:	f000 80b8 	beq.w	800f09c <_printf_i+0x198>
 800ef2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef34:	e03a      	b.n	800efac <_printf_i+0xa8>
 800ef36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef3a:	2b15      	cmp	r3, #21
 800ef3c:	d8f6      	bhi.n	800ef2c <_printf_i+0x28>
 800ef3e:	a101      	add	r1, pc, #4	@ (adr r1, 800ef44 <_printf_i+0x40>)
 800ef40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef44:	0800ef9d 	.word	0x0800ef9d
 800ef48:	0800efb1 	.word	0x0800efb1
 800ef4c:	0800ef2d 	.word	0x0800ef2d
 800ef50:	0800ef2d 	.word	0x0800ef2d
 800ef54:	0800ef2d 	.word	0x0800ef2d
 800ef58:	0800ef2d 	.word	0x0800ef2d
 800ef5c:	0800efb1 	.word	0x0800efb1
 800ef60:	0800ef2d 	.word	0x0800ef2d
 800ef64:	0800ef2d 	.word	0x0800ef2d
 800ef68:	0800ef2d 	.word	0x0800ef2d
 800ef6c:	0800ef2d 	.word	0x0800ef2d
 800ef70:	0800f0af 	.word	0x0800f0af
 800ef74:	0800efdb 	.word	0x0800efdb
 800ef78:	0800f069 	.word	0x0800f069
 800ef7c:	0800ef2d 	.word	0x0800ef2d
 800ef80:	0800ef2d 	.word	0x0800ef2d
 800ef84:	0800f0d1 	.word	0x0800f0d1
 800ef88:	0800ef2d 	.word	0x0800ef2d
 800ef8c:	0800efdb 	.word	0x0800efdb
 800ef90:	0800ef2d 	.word	0x0800ef2d
 800ef94:	0800ef2d 	.word	0x0800ef2d
 800ef98:	0800f071 	.word	0x0800f071
 800ef9c:	6833      	ldr	r3, [r6, #0]
 800ef9e:	1d1a      	adds	r2, r3, #4
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	6032      	str	r2, [r6, #0]
 800efa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efac:	2301      	movs	r3, #1
 800efae:	e09c      	b.n	800f0ea <_printf_i+0x1e6>
 800efb0:	6833      	ldr	r3, [r6, #0]
 800efb2:	6820      	ldr	r0, [r4, #0]
 800efb4:	1d19      	adds	r1, r3, #4
 800efb6:	6031      	str	r1, [r6, #0]
 800efb8:	0606      	lsls	r6, r0, #24
 800efba:	d501      	bpl.n	800efc0 <_printf_i+0xbc>
 800efbc:	681d      	ldr	r5, [r3, #0]
 800efbe:	e003      	b.n	800efc8 <_printf_i+0xc4>
 800efc0:	0645      	lsls	r5, r0, #25
 800efc2:	d5fb      	bpl.n	800efbc <_printf_i+0xb8>
 800efc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800efc8:	2d00      	cmp	r5, #0
 800efca:	da03      	bge.n	800efd4 <_printf_i+0xd0>
 800efcc:	232d      	movs	r3, #45	@ 0x2d
 800efce:	426d      	negs	r5, r5
 800efd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efd4:	4858      	ldr	r0, [pc, #352]	@ (800f138 <_printf_i+0x234>)
 800efd6:	230a      	movs	r3, #10
 800efd8:	e011      	b.n	800effe <_printf_i+0xfa>
 800efda:	6821      	ldr	r1, [r4, #0]
 800efdc:	6833      	ldr	r3, [r6, #0]
 800efde:	0608      	lsls	r0, r1, #24
 800efe0:	f853 5b04 	ldr.w	r5, [r3], #4
 800efe4:	d402      	bmi.n	800efec <_printf_i+0xe8>
 800efe6:	0649      	lsls	r1, r1, #25
 800efe8:	bf48      	it	mi
 800efea:	b2ad      	uxthmi	r5, r5
 800efec:	2f6f      	cmp	r7, #111	@ 0x6f
 800efee:	4852      	ldr	r0, [pc, #328]	@ (800f138 <_printf_i+0x234>)
 800eff0:	6033      	str	r3, [r6, #0]
 800eff2:	bf14      	ite	ne
 800eff4:	230a      	movne	r3, #10
 800eff6:	2308      	moveq	r3, #8
 800eff8:	2100      	movs	r1, #0
 800effa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800effe:	6866      	ldr	r6, [r4, #4]
 800f000:	60a6      	str	r6, [r4, #8]
 800f002:	2e00      	cmp	r6, #0
 800f004:	db05      	blt.n	800f012 <_printf_i+0x10e>
 800f006:	6821      	ldr	r1, [r4, #0]
 800f008:	432e      	orrs	r6, r5
 800f00a:	f021 0104 	bic.w	r1, r1, #4
 800f00e:	6021      	str	r1, [r4, #0]
 800f010:	d04b      	beq.n	800f0aa <_printf_i+0x1a6>
 800f012:	4616      	mov	r6, r2
 800f014:	fbb5 f1f3 	udiv	r1, r5, r3
 800f018:	fb03 5711 	mls	r7, r3, r1, r5
 800f01c:	5dc7      	ldrb	r7, [r0, r7]
 800f01e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f022:	462f      	mov	r7, r5
 800f024:	42bb      	cmp	r3, r7
 800f026:	460d      	mov	r5, r1
 800f028:	d9f4      	bls.n	800f014 <_printf_i+0x110>
 800f02a:	2b08      	cmp	r3, #8
 800f02c:	d10b      	bne.n	800f046 <_printf_i+0x142>
 800f02e:	6823      	ldr	r3, [r4, #0]
 800f030:	07df      	lsls	r7, r3, #31
 800f032:	d508      	bpl.n	800f046 <_printf_i+0x142>
 800f034:	6923      	ldr	r3, [r4, #16]
 800f036:	6861      	ldr	r1, [r4, #4]
 800f038:	4299      	cmp	r1, r3
 800f03a:	bfde      	ittt	le
 800f03c:	2330      	movle	r3, #48	@ 0x30
 800f03e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f042:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f046:	1b92      	subs	r2, r2, r6
 800f048:	6122      	str	r2, [r4, #16]
 800f04a:	f8cd a000 	str.w	sl, [sp]
 800f04e:	464b      	mov	r3, r9
 800f050:	aa03      	add	r2, sp, #12
 800f052:	4621      	mov	r1, r4
 800f054:	4640      	mov	r0, r8
 800f056:	f7ff fee7 	bl	800ee28 <_printf_common>
 800f05a:	3001      	adds	r0, #1
 800f05c:	d14a      	bne.n	800f0f4 <_printf_i+0x1f0>
 800f05e:	f04f 30ff 	mov.w	r0, #4294967295
 800f062:	b004      	add	sp, #16
 800f064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f068:	6823      	ldr	r3, [r4, #0]
 800f06a:	f043 0320 	orr.w	r3, r3, #32
 800f06e:	6023      	str	r3, [r4, #0]
 800f070:	4832      	ldr	r0, [pc, #200]	@ (800f13c <_printf_i+0x238>)
 800f072:	2778      	movs	r7, #120	@ 0x78
 800f074:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f078:	6823      	ldr	r3, [r4, #0]
 800f07a:	6831      	ldr	r1, [r6, #0]
 800f07c:	061f      	lsls	r7, r3, #24
 800f07e:	f851 5b04 	ldr.w	r5, [r1], #4
 800f082:	d402      	bmi.n	800f08a <_printf_i+0x186>
 800f084:	065f      	lsls	r7, r3, #25
 800f086:	bf48      	it	mi
 800f088:	b2ad      	uxthmi	r5, r5
 800f08a:	6031      	str	r1, [r6, #0]
 800f08c:	07d9      	lsls	r1, r3, #31
 800f08e:	bf44      	itt	mi
 800f090:	f043 0320 	orrmi.w	r3, r3, #32
 800f094:	6023      	strmi	r3, [r4, #0]
 800f096:	b11d      	cbz	r5, 800f0a0 <_printf_i+0x19c>
 800f098:	2310      	movs	r3, #16
 800f09a:	e7ad      	b.n	800eff8 <_printf_i+0xf4>
 800f09c:	4826      	ldr	r0, [pc, #152]	@ (800f138 <_printf_i+0x234>)
 800f09e:	e7e9      	b.n	800f074 <_printf_i+0x170>
 800f0a0:	6823      	ldr	r3, [r4, #0]
 800f0a2:	f023 0320 	bic.w	r3, r3, #32
 800f0a6:	6023      	str	r3, [r4, #0]
 800f0a8:	e7f6      	b.n	800f098 <_printf_i+0x194>
 800f0aa:	4616      	mov	r6, r2
 800f0ac:	e7bd      	b.n	800f02a <_printf_i+0x126>
 800f0ae:	6833      	ldr	r3, [r6, #0]
 800f0b0:	6825      	ldr	r5, [r4, #0]
 800f0b2:	6961      	ldr	r1, [r4, #20]
 800f0b4:	1d18      	adds	r0, r3, #4
 800f0b6:	6030      	str	r0, [r6, #0]
 800f0b8:	062e      	lsls	r6, r5, #24
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	d501      	bpl.n	800f0c2 <_printf_i+0x1be>
 800f0be:	6019      	str	r1, [r3, #0]
 800f0c0:	e002      	b.n	800f0c8 <_printf_i+0x1c4>
 800f0c2:	0668      	lsls	r0, r5, #25
 800f0c4:	d5fb      	bpl.n	800f0be <_printf_i+0x1ba>
 800f0c6:	8019      	strh	r1, [r3, #0]
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	6123      	str	r3, [r4, #16]
 800f0cc:	4616      	mov	r6, r2
 800f0ce:	e7bc      	b.n	800f04a <_printf_i+0x146>
 800f0d0:	6833      	ldr	r3, [r6, #0]
 800f0d2:	1d1a      	adds	r2, r3, #4
 800f0d4:	6032      	str	r2, [r6, #0]
 800f0d6:	681e      	ldr	r6, [r3, #0]
 800f0d8:	6862      	ldr	r2, [r4, #4]
 800f0da:	2100      	movs	r1, #0
 800f0dc:	4630      	mov	r0, r6
 800f0de:	f7f1 f917 	bl	8000310 <memchr>
 800f0e2:	b108      	cbz	r0, 800f0e8 <_printf_i+0x1e4>
 800f0e4:	1b80      	subs	r0, r0, r6
 800f0e6:	6060      	str	r0, [r4, #4]
 800f0e8:	6863      	ldr	r3, [r4, #4]
 800f0ea:	6123      	str	r3, [r4, #16]
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0f2:	e7aa      	b.n	800f04a <_printf_i+0x146>
 800f0f4:	6923      	ldr	r3, [r4, #16]
 800f0f6:	4632      	mov	r2, r6
 800f0f8:	4649      	mov	r1, r9
 800f0fa:	4640      	mov	r0, r8
 800f0fc:	47d0      	blx	sl
 800f0fe:	3001      	adds	r0, #1
 800f100:	d0ad      	beq.n	800f05e <_printf_i+0x15a>
 800f102:	6823      	ldr	r3, [r4, #0]
 800f104:	079b      	lsls	r3, r3, #30
 800f106:	d413      	bmi.n	800f130 <_printf_i+0x22c>
 800f108:	68e0      	ldr	r0, [r4, #12]
 800f10a:	9b03      	ldr	r3, [sp, #12]
 800f10c:	4298      	cmp	r0, r3
 800f10e:	bfb8      	it	lt
 800f110:	4618      	movlt	r0, r3
 800f112:	e7a6      	b.n	800f062 <_printf_i+0x15e>
 800f114:	2301      	movs	r3, #1
 800f116:	4632      	mov	r2, r6
 800f118:	4649      	mov	r1, r9
 800f11a:	4640      	mov	r0, r8
 800f11c:	47d0      	blx	sl
 800f11e:	3001      	adds	r0, #1
 800f120:	d09d      	beq.n	800f05e <_printf_i+0x15a>
 800f122:	3501      	adds	r5, #1
 800f124:	68e3      	ldr	r3, [r4, #12]
 800f126:	9903      	ldr	r1, [sp, #12]
 800f128:	1a5b      	subs	r3, r3, r1
 800f12a:	42ab      	cmp	r3, r5
 800f12c:	dcf2      	bgt.n	800f114 <_printf_i+0x210>
 800f12e:	e7eb      	b.n	800f108 <_printf_i+0x204>
 800f130:	2500      	movs	r5, #0
 800f132:	f104 0619 	add.w	r6, r4, #25
 800f136:	e7f5      	b.n	800f124 <_printf_i+0x220>
 800f138:	08010295 	.word	0x08010295
 800f13c:	080102a6 	.word	0x080102a6

0800f140 <__sflush_r>:
 800f140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	0716      	lsls	r6, r2, #28
 800f14a:	4605      	mov	r5, r0
 800f14c:	460c      	mov	r4, r1
 800f14e:	d454      	bmi.n	800f1fa <__sflush_r+0xba>
 800f150:	684b      	ldr	r3, [r1, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	dc02      	bgt.n	800f15c <__sflush_r+0x1c>
 800f156:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f158:	2b00      	cmp	r3, #0
 800f15a:	dd48      	ble.n	800f1ee <__sflush_r+0xae>
 800f15c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f15e:	2e00      	cmp	r6, #0
 800f160:	d045      	beq.n	800f1ee <__sflush_r+0xae>
 800f162:	2300      	movs	r3, #0
 800f164:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f168:	682f      	ldr	r7, [r5, #0]
 800f16a:	6a21      	ldr	r1, [r4, #32]
 800f16c:	602b      	str	r3, [r5, #0]
 800f16e:	d030      	beq.n	800f1d2 <__sflush_r+0x92>
 800f170:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f172:	89a3      	ldrh	r3, [r4, #12]
 800f174:	0759      	lsls	r1, r3, #29
 800f176:	d505      	bpl.n	800f184 <__sflush_r+0x44>
 800f178:	6863      	ldr	r3, [r4, #4]
 800f17a:	1ad2      	subs	r2, r2, r3
 800f17c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f17e:	b10b      	cbz	r3, 800f184 <__sflush_r+0x44>
 800f180:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f182:	1ad2      	subs	r2, r2, r3
 800f184:	2300      	movs	r3, #0
 800f186:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f188:	6a21      	ldr	r1, [r4, #32]
 800f18a:	4628      	mov	r0, r5
 800f18c:	47b0      	blx	r6
 800f18e:	1c43      	adds	r3, r0, #1
 800f190:	89a3      	ldrh	r3, [r4, #12]
 800f192:	d106      	bne.n	800f1a2 <__sflush_r+0x62>
 800f194:	6829      	ldr	r1, [r5, #0]
 800f196:	291d      	cmp	r1, #29
 800f198:	d82b      	bhi.n	800f1f2 <__sflush_r+0xb2>
 800f19a:	4a2a      	ldr	r2, [pc, #168]	@ (800f244 <__sflush_r+0x104>)
 800f19c:	40ca      	lsrs	r2, r1
 800f19e:	07d6      	lsls	r6, r2, #31
 800f1a0:	d527      	bpl.n	800f1f2 <__sflush_r+0xb2>
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	6062      	str	r2, [r4, #4]
 800f1a6:	04d9      	lsls	r1, r3, #19
 800f1a8:	6922      	ldr	r2, [r4, #16]
 800f1aa:	6022      	str	r2, [r4, #0]
 800f1ac:	d504      	bpl.n	800f1b8 <__sflush_r+0x78>
 800f1ae:	1c42      	adds	r2, r0, #1
 800f1b0:	d101      	bne.n	800f1b6 <__sflush_r+0x76>
 800f1b2:	682b      	ldr	r3, [r5, #0]
 800f1b4:	b903      	cbnz	r3, 800f1b8 <__sflush_r+0x78>
 800f1b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f1b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1ba:	602f      	str	r7, [r5, #0]
 800f1bc:	b1b9      	cbz	r1, 800f1ee <__sflush_r+0xae>
 800f1be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1c2:	4299      	cmp	r1, r3
 800f1c4:	d002      	beq.n	800f1cc <__sflush_r+0x8c>
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f7ff fb4a 	bl	800e860 <_free_r>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1d0:	e00d      	b.n	800f1ee <__sflush_r+0xae>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	47b0      	blx	r6
 800f1d8:	4602      	mov	r2, r0
 800f1da:	1c50      	adds	r0, r2, #1
 800f1dc:	d1c9      	bne.n	800f172 <__sflush_r+0x32>
 800f1de:	682b      	ldr	r3, [r5, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d0c6      	beq.n	800f172 <__sflush_r+0x32>
 800f1e4:	2b1d      	cmp	r3, #29
 800f1e6:	d001      	beq.n	800f1ec <__sflush_r+0xac>
 800f1e8:	2b16      	cmp	r3, #22
 800f1ea:	d11e      	bne.n	800f22a <__sflush_r+0xea>
 800f1ec:	602f      	str	r7, [r5, #0]
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	e022      	b.n	800f238 <__sflush_r+0xf8>
 800f1f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1f6:	b21b      	sxth	r3, r3
 800f1f8:	e01b      	b.n	800f232 <__sflush_r+0xf2>
 800f1fa:	690f      	ldr	r7, [r1, #16]
 800f1fc:	2f00      	cmp	r7, #0
 800f1fe:	d0f6      	beq.n	800f1ee <__sflush_r+0xae>
 800f200:	0793      	lsls	r3, r2, #30
 800f202:	680e      	ldr	r6, [r1, #0]
 800f204:	bf08      	it	eq
 800f206:	694b      	ldreq	r3, [r1, #20]
 800f208:	600f      	str	r7, [r1, #0]
 800f20a:	bf18      	it	ne
 800f20c:	2300      	movne	r3, #0
 800f20e:	eba6 0807 	sub.w	r8, r6, r7
 800f212:	608b      	str	r3, [r1, #8]
 800f214:	f1b8 0f00 	cmp.w	r8, #0
 800f218:	dde9      	ble.n	800f1ee <__sflush_r+0xae>
 800f21a:	6a21      	ldr	r1, [r4, #32]
 800f21c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f21e:	4643      	mov	r3, r8
 800f220:	463a      	mov	r2, r7
 800f222:	4628      	mov	r0, r5
 800f224:	47b0      	blx	r6
 800f226:	2800      	cmp	r0, #0
 800f228:	dc08      	bgt.n	800f23c <__sflush_r+0xfc>
 800f22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f22e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f232:	81a3      	strh	r3, [r4, #12]
 800f234:	f04f 30ff 	mov.w	r0, #4294967295
 800f238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f23c:	4407      	add	r7, r0
 800f23e:	eba8 0800 	sub.w	r8, r8, r0
 800f242:	e7e7      	b.n	800f214 <__sflush_r+0xd4>
 800f244:	20400001 	.word	0x20400001

0800f248 <_fflush_r>:
 800f248:	b538      	push	{r3, r4, r5, lr}
 800f24a:	690b      	ldr	r3, [r1, #16]
 800f24c:	4605      	mov	r5, r0
 800f24e:	460c      	mov	r4, r1
 800f250:	b913      	cbnz	r3, 800f258 <_fflush_r+0x10>
 800f252:	2500      	movs	r5, #0
 800f254:	4628      	mov	r0, r5
 800f256:	bd38      	pop	{r3, r4, r5, pc}
 800f258:	b118      	cbz	r0, 800f262 <_fflush_r+0x1a>
 800f25a:	6a03      	ldr	r3, [r0, #32]
 800f25c:	b90b      	cbnz	r3, 800f262 <_fflush_r+0x1a>
 800f25e:	f7ff f8c5 	bl	800e3ec <__sinit>
 800f262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d0f3      	beq.n	800f252 <_fflush_r+0xa>
 800f26a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f26c:	07d0      	lsls	r0, r2, #31
 800f26e:	d404      	bmi.n	800f27a <_fflush_r+0x32>
 800f270:	0599      	lsls	r1, r3, #22
 800f272:	d402      	bmi.n	800f27a <_fflush_r+0x32>
 800f274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f276:	f7ff fae2 	bl	800e83e <__retarget_lock_acquire_recursive>
 800f27a:	4628      	mov	r0, r5
 800f27c:	4621      	mov	r1, r4
 800f27e:	f7ff ff5f 	bl	800f140 <__sflush_r>
 800f282:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f284:	07da      	lsls	r2, r3, #31
 800f286:	4605      	mov	r5, r0
 800f288:	d4e4      	bmi.n	800f254 <_fflush_r+0xc>
 800f28a:	89a3      	ldrh	r3, [r4, #12]
 800f28c:	059b      	lsls	r3, r3, #22
 800f28e:	d4e1      	bmi.n	800f254 <_fflush_r+0xc>
 800f290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f292:	f7ff fad5 	bl	800e840 <__retarget_lock_release_recursive>
 800f296:	e7dd      	b.n	800f254 <_fflush_r+0xc>

0800f298 <__swhatbuf_r>:
 800f298:	b570      	push	{r4, r5, r6, lr}
 800f29a:	460c      	mov	r4, r1
 800f29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2a0:	2900      	cmp	r1, #0
 800f2a2:	b096      	sub	sp, #88	@ 0x58
 800f2a4:	4615      	mov	r5, r2
 800f2a6:	461e      	mov	r6, r3
 800f2a8:	da0d      	bge.n	800f2c6 <__swhatbuf_r+0x2e>
 800f2aa:	89a3      	ldrh	r3, [r4, #12]
 800f2ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f2b0:	f04f 0100 	mov.w	r1, #0
 800f2b4:	bf14      	ite	ne
 800f2b6:	2340      	movne	r3, #64	@ 0x40
 800f2b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f2bc:	2000      	movs	r0, #0
 800f2be:	6031      	str	r1, [r6, #0]
 800f2c0:	602b      	str	r3, [r5, #0]
 800f2c2:	b016      	add	sp, #88	@ 0x58
 800f2c4:	bd70      	pop	{r4, r5, r6, pc}
 800f2c6:	466a      	mov	r2, sp
 800f2c8:	f000 f862 	bl	800f390 <_fstat_r>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	dbec      	blt.n	800f2aa <__swhatbuf_r+0x12>
 800f2d0:	9901      	ldr	r1, [sp, #4]
 800f2d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f2d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f2da:	4259      	negs	r1, r3
 800f2dc:	4159      	adcs	r1, r3
 800f2de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2e2:	e7eb      	b.n	800f2bc <__swhatbuf_r+0x24>

0800f2e4 <__smakebuf_r>:
 800f2e4:	898b      	ldrh	r3, [r1, #12]
 800f2e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2e8:	079d      	lsls	r5, r3, #30
 800f2ea:	4606      	mov	r6, r0
 800f2ec:	460c      	mov	r4, r1
 800f2ee:	d507      	bpl.n	800f300 <__smakebuf_r+0x1c>
 800f2f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f2f4:	6023      	str	r3, [r4, #0]
 800f2f6:	6123      	str	r3, [r4, #16]
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	6163      	str	r3, [r4, #20]
 800f2fc:	b003      	add	sp, #12
 800f2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f300:	ab01      	add	r3, sp, #4
 800f302:	466a      	mov	r2, sp
 800f304:	f7ff ffc8 	bl	800f298 <__swhatbuf_r>
 800f308:	9f00      	ldr	r7, [sp, #0]
 800f30a:	4605      	mov	r5, r0
 800f30c:	4639      	mov	r1, r7
 800f30e:	4630      	mov	r0, r6
 800f310:	f7fe ff54 	bl	800e1bc <_malloc_r>
 800f314:	b948      	cbnz	r0, 800f32a <__smakebuf_r+0x46>
 800f316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f31a:	059a      	lsls	r2, r3, #22
 800f31c:	d4ee      	bmi.n	800f2fc <__smakebuf_r+0x18>
 800f31e:	f023 0303 	bic.w	r3, r3, #3
 800f322:	f043 0302 	orr.w	r3, r3, #2
 800f326:	81a3      	strh	r3, [r4, #12]
 800f328:	e7e2      	b.n	800f2f0 <__smakebuf_r+0xc>
 800f32a:	89a3      	ldrh	r3, [r4, #12]
 800f32c:	6020      	str	r0, [r4, #0]
 800f32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f332:	81a3      	strh	r3, [r4, #12]
 800f334:	9b01      	ldr	r3, [sp, #4]
 800f336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f33a:	b15b      	cbz	r3, 800f354 <__smakebuf_r+0x70>
 800f33c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f340:	4630      	mov	r0, r6
 800f342:	f000 f837 	bl	800f3b4 <_isatty_r>
 800f346:	b128      	cbz	r0, 800f354 <__smakebuf_r+0x70>
 800f348:	89a3      	ldrh	r3, [r4, #12]
 800f34a:	f023 0303 	bic.w	r3, r3, #3
 800f34e:	f043 0301 	orr.w	r3, r3, #1
 800f352:	81a3      	strh	r3, [r4, #12]
 800f354:	89a3      	ldrh	r3, [r4, #12]
 800f356:	431d      	orrs	r5, r3
 800f358:	81a5      	strh	r5, [r4, #12]
 800f35a:	e7cf      	b.n	800f2fc <__smakebuf_r+0x18>

0800f35c <memmove>:
 800f35c:	4288      	cmp	r0, r1
 800f35e:	b510      	push	{r4, lr}
 800f360:	eb01 0402 	add.w	r4, r1, r2
 800f364:	d902      	bls.n	800f36c <memmove+0x10>
 800f366:	4284      	cmp	r4, r0
 800f368:	4623      	mov	r3, r4
 800f36a:	d807      	bhi.n	800f37c <memmove+0x20>
 800f36c:	1e43      	subs	r3, r0, #1
 800f36e:	42a1      	cmp	r1, r4
 800f370:	d008      	beq.n	800f384 <memmove+0x28>
 800f372:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f37a:	e7f8      	b.n	800f36e <memmove+0x12>
 800f37c:	4402      	add	r2, r0
 800f37e:	4601      	mov	r1, r0
 800f380:	428a      	cmp	r2, r1
 800f382:	d100      	bne.n	800f386 <memmove+0x2a>
 800f384:	bd10      	pop	{r4, pc}
 800f386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f38a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f38e:	e7f7      	b.n	800f380 <memmove+0x24>

0800f390 <_fstat_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4d07      	ldr	r5, [pc, #28]	@ (800f3b0 <_fstat_r+0x20>)
 800f394:	2300      	movs	r3, #0
 800f396:	4604      	mov	r4, r0
 800f398:	4608      	mov	r0, r1
 800f39a:	4611      	mov	r1, r2
 800f39c:	602b      	str	r3, [r5, #0]
 800f39e:	f7f2 fdee 	bl	8001f7e <_fstat>
 800f3a2:	1c43      	adds	r3, r0, #1
 800f3a4:	d102      	bne.n	800f3ac <_fstat_r+0x1c>
 800f3a6:	682b      	ldr	r3, [r5, #0]
 800f3a8:	b103      	cbz	r3, 800f3ac <_fstat_r+0x1c>
 800f3aa:	6023      	str	r3, [r4, #0]
 800f3ac:	bd38      	pop	{r3, r4, r5, pc}
 800f3ae:	bf00      	nop
 800f3b0:	24028f4c 	.word	0x24028f4c

0800f3b4 <_isatty_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	4d06      	ldr	r5, [pc, #24]	@ (800f3d0 <_isatty_r+0x1c>)
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	4608      	mov	r0, r1
 800f3be:	602b      	str	r3, [r5, #0]
 800f3c0:	f7f2 fded 	bl	8001f9e <_isatty>
 800f3c4:	1c43      	adds	r3, r0, #1
 800f3c6:	d102      	bne.n	800f3ce <_isatty_r+0x1a>
 800f3c8:	682b      	ldr	r3, [r5, #0]
 800f3ca:	b103      	cbz	r3, 800f3ce <_isatty_r+0x1a>
 800f3cc:	6023      	str	r3, [r4, #0]
 800f3ce:	bd38      	pop	{r3, r4, r5, pc}
 800f3d0:	24028f4c 	.word	0x24028f4c

0800f3d4 <_realloc_r>:
 800f3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d8:	4607      	mov	r7, r0
 800f3da:	4614      	mov	r4, r2
 800f3dc:	460d      	mov	r5, r1
 800f3de:	b921      	cbnz	r1, 800f3ea <_realloc_r+0x16>
 800f3e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e4:	4611      	mov	r1, r2
 800f3e6:	f7fe bee9 	b.w	800e1bc <_malloc_r>
 800f3ea:	b92a      	cbnz	r2, 800f3f8 <_realloc_r+0x24>
 800f3ec:	f7ff fa38 	bl	800e860 <_free_r>
 800f3f0:	4625      	mov	r5, r4
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f8:	f000 f81a 	bl	800f430 <_malloc_usable_size_r>
 800f3fc:	4284      	cmp	r4, r0
 800f3fe:	4606      	mov	r6, r0
 800f400:	d802      	bhi.n	800f408 <_realloc_r+0x34>
 800f402:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f406:	d8f4      	bhi.n	800f3f2 <_realloc_r+0x1e>
 800f408:	4621      	mov	r1, r4
 800f40a:	4638      	mov	r0, r7
 800f40c:	f7fe fed6 	bl	800e1bc <_malloc_r>
 800f410:	4680      	mov	r8, r0
 800f412:	b908      	cbnz	r0, 800f418 <_realloc_r+0x44>
 800f414:	4645      	mov	r5, r8
 800f416:	e7ec      	b.n	800f3f2 <_realloc_r+0x1e>
 800f418:	42b4      	cmp	r4, r6
 800f41a:	4622      	mov	r2, r4
 800f41c:	4629      	mov	r1, r5
 800f41e:	bf28      	it	cs
 800f420:	4632      	movcs	r2, r6
 800f422:	f7ff fa0e 	bl	800e842 <memcpy>
 800f426:	4629      	mov	r1, r5
 800f428:	4638      	mov	r0, r7
 800f42a:	f7ff fa19 	bl	800e860 <_free_r>
 800f42e:	e7f1      	b.n	800f414 <_realloc_r+0x40>

0800f430 <_malloc_usable_size_r>:
 800f430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f434:	1f18      	subs	r0, r3, #4
 800f436:	2b00      	cmp	r3, #0
 800f438:	bfbc      	itt	lt
 800f43a:	580b      	ldrlt	r3, [r1, r0]
 800f43c:	18c0      	addlt	r0, r0, r3
 800f43e:	4770      	bx	lr

0800f440 <_init>:
 800f440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f442:	bf00      	nop
 800f444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f446:	bc08      	pop	{r3}
 800f448:	469e      	mov	lr, r3
 800f44a:	4770      	bx	lr

0800f44c <_fini>:
 800f44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f44e:	bf00      	nop
 800f450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f452:	bc08      	pop	{r3}
 800f454:	469e      	mov	lr, r3
 800f456:	4770      	bx	lr
